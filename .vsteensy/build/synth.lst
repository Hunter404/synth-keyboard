
.vsteensy/build/synth.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00006b40 l    d  .fini	00000000 .fini
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fffa9d0 l    d  .usbbuffers	00000000 .usbbuffers
1fffad30 l    d  .data	00000000 .data
1fffb89c l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
00003974 l     F .text	0000000c startup_default_early_hook
00003980 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fffb89c l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fffb8a0 l       .bss	00000000 object.8610
00006af4 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
0000069c l     F .text	00000750 _GLOBAL__sub_I_i2s
1fff0200 l     O .dmabuffers	0000a280 setup::data
00000000 l    df *ABS*	00000000 output_pwm.cpp
00000df8 l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE
00000000 l    df *ABS*	00000000 output_pt8211.cpp
00000e10 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE
00000000 l    df *ABS*	00000000 analyze_peak.cpp
00000000 l    df *ABS*	00000000 mixer.cpp
00000000 l    df *ABS*	00000000 output_adat.cpp
00000f5c l     F .text	00000018 _GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE
00000000 l    df *ABS*	00000000 effect_multiply.cpp
00000000 l    df *ABS*	00000000 input_adc.cpp
00001010 l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE
00000000 l    df *ABS*	00000000 control_sgtl5000.cpp
00000000 l    df *ABS*	00000000 output_dac.cpp
00001248 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE
00000000 l    df *ABS*	00000000 input_adcs.cpp
00001260 l     F .text	00000030 _GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE
00000000 l    df *ABS*	00000000 input_i2s_quad.cpp
00001290 l     F .text	00000018 _GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E
00000000 l    df *ABS*	00000000 output_dacs.cpp
000012a8 l     F .text	00000018 _GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE
00000000 l    df *ABS*	00000000 filter_variable.cpp
00000000 l    df *ABS*	00000000 output_i2s_quad.cpp
00001548 l     F .text	00000018 _GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE
00000000 l    df *ABS*	00000000 synth_dc.cpp
00000000 l    df *ABS*	00000000 input_tdm.cpp
00001694 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE
00000000 l    df *ABS*	00000000 input_i2s.cpp
000016ac l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE
00000000 l    df *ABS*	00000000 input_pdm.cpp
000016c4 l     F .text	00000018 _GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE
00000000 l    df *ABS*	00000000 output_tdm.cpp
000016dc l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE
00000000 l    df *ABS*	00000000 output_i2s.cpp
00001a5c l     F .text	00000018 _GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE
1fffa480 l     O .dmabuffers	00000200 i2s_tx_buffer
00000000 l    df *ABS*	00000000 synth_whitenoise.cpp
00000000 l    df *ABS*	00000000 output_spdif.cpp
00001b5c l     F .text	00000018 _GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE
00000000 l    df *ABS*	00000000 effect_delay.cpp
00000000 l    df *ABS*	00000000 synth_waveform.cpp
00000000 l    df *ABS*	00000000 WireKinetis.cpp
000022fc l       .text	00000000 L_1373_delayMicroseconds
0000230a l       .text	00000000 L_1387_delayMicroseconds
00002350 l       .text	00000000 L_1438_delayMicroseconds
1fffcb58 l     O .bss	00000001 TwoWire::isr()::receiving
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 File.cpp
00000000 l    df *ABS*	00000000 SD.cpp
000025fc l     F .text	00000024 _GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc
00000000 l    df *ABS*	00000000 SdVolume.cpp
000026fc l     F .text	00000084 SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]
00000000 l    df *ABS*	00000000 SdFile.cpp
000028e0 l     F .text	0000006c SdFile::sync() [clone .part.23] [clone .constprop.37]
00000000 l    df *ABS*	00000000 Sd2Card.cpp
00003084 l     F .text	00000010 _GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm
1fffcdc0 l     O .bss	00000004 settings
1fffcdc4 l     O .bss	00000001 chip_select_asserted
00000000 l    df *ABS*	00000000 KinetisSDHC.c
00003094 l     F .text	00000098 SDHC_CMD_Do
0000312c l     F .text	00000044 SDHC_CMD12_StopTransferWaitForBusy
1fffcdc8 l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 .vsteensy/build/lib/Audio/memcpy_audio.o
0000334c l       .text	00000000 .loopLR
00003390 l       .text	00000000 .loopL
000033d0 l       .text	00000000 .loopR
0000340c l       .text	00000000 .loopQuad
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fffcdd9 l     O .bss	00000001 tx_noautoflush
1fffcddc l     O .bss	00000004 tx_packet
1fffcde0 l     O .bss	00000001 transmit_previous_timeout
1fffcde4 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 analog.c
1fffcde9 l     O .bss	00000001 calibrating
1fffaf9c l     O .data	00000001 analog_config_bits
1fffcdea l     O .bss	00000001 analog_reference_internal
1fffaf9d l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 pins_teensy.c
00003a1c l     F .text	0000004c digitalWrite.part.1
00003a68 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fffafa4 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fffcdf0 l     O .bss	00000004 ep0_tx_ptr
1fffcdf4 l     O .bss	00000010 rx_last
1fffce04 l     O .bss	00000002 ep0_tx_len
1fffce08 l     O .bss	00000040 ep0_rx0_buf
1fffce48 l     O .bss	00000010 rx_first
1fffce58 l     O .bss	00000001 ep0_tx_data_toggle
1fffce5c l     O .bss	00000040 ep0_rx1_buf
1fffce9c l     O .bss	00000010 tx_first
1fff0000 l     O .usbdescriptortable	000000a0 table
1fffceac l     O .bss	00000010 tx_last
1fffcebc l     O .bss	00000008 setup
1fffcec4 l     O .bss	00000001 ep0_tx_bdt_bank
1fffcec8 l     O .bss	00000008 reply_buffer
1fffced4 l     O .bss	00000004 tx_state
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
1fffcef8 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 WMath.cpp
00004f6c l     F .text	00000070 random(unsigned long) [clone .part.0]
1fffcefc l     O .bss	00000004 seed
00000000 l    df *ABS*	00000000 AudioStream.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fffcf88 l     O .bss	00000004 rts_pin
1fffcf8c l     O .bss	00000001 rx_buffer_head
1fffcf8d l     O .bss	00000001 rx_buffer_tail
1fffcf90 l     O .bss	00000028 tx_buffer
1fffcfb8 l     O .bss	00000040 rx_buffer
1fffcff8 l     O .bss	00000001 transmitting
1fffcff9 l     O .bss	00000001 tx_buffer_tail
1fffcffc l     O .bss	00000004 transmit_pin
1fffd000 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial2.c
1fffd004 l     O .bss	00000004 rts_pin
1fffd008 l     O .bss	00000001 transmitting
1fffd009 l     O .bss	00000001 rx_buffer_tail
1fffd00c l     O .bss	00000028 tx_buffer
1fffd034 l     O .bss	00000040 rx_buffer
1fffd074 l     O .bss	00000001 rx_buffer_head
1fffd075 l     O .bss	00000001 tx_buffer_tail
1fffd078 l     O .bss	00000004 transmit_pin
1fffd07c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fffd080 l     O .bss	00000004 rts_pin
1fffd084 l     O .bss	00000001 rx_buffer_head
1fffd085 l     O .bss	00000001 rx_buffer_tail
1fffd088 l     O .bss	00000028 tx_buffer
1fffd0b0 l     O .bss	00000040 rx_buffer
1fffd0f0 l     O .bss	00000001 transmitting
1fffd0f1 l     O .bss	00000001 tx_buffer_tail
1fffd0f4 l     O .bss	00000004 transmit_pin
1fffd0f8 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fffd0fc l     O .bss	00000004 rts_pin
1fffd100 l     O .bss	00000001 rx_buffer_head
1fffd101 l     O .bss	00000001 rx_buffer_tail
1fffd104 l     O .bss	00000040 tx_buffer
1fffd144 l     O .bss	00000040 rx_buffer
1fffd184 l     O .bss	00000001 transmitting
1fffd185 l     O .bss	00000001 tx_buffer_tail
1fffd188 l     O .bss	00000004 transmit_pin
1fffd18c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fffd190 l     O .bss	00000004 rts_pin
1fffd194 l     O .bss	00000001 rx_buffer_head
1fffd195 l     O .bss	00000001 rx_buffer_tail
1fffd198 l     O .bss	00000028 tx_buffer
1fffd1c0 l     O .bss	00000040 rx_buffer
1fffd200 l     O .bss	00000001 transmitting
1fffd201 l     O .bss	00000001 tx_buffer_tail
1fffd204 l     O .bss	00000004 transmit_pin
1fffd208 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fffafb8 l     O .data	00000012 device_descriptor
1fffafe4 l     O .data	00000043 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fffd20c l     O .bss	00000004 rts_pin
1fffd210 l     O .bss	00000001 rx_buffer_head
1fffd211 l     O .bss	00000001 rx_buffer_tail
1fffd214 l     O .bss	00000028 tx_buffer
1fffd23c l     O .bss	00000040 rx_buffer
1fffd27c l     O .bss	00000001 transmitting
1fffd27d l     O .bss	00000001 tx_buffer_tail
1fffd280 l     O .bss	00000004 transmit_pin
1fffd284 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 aeabi_atexit.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000061d8 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 data_waveforms.c
00000000 l    df *ABS*	00000000 impure.c
1fffb060 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/progra~2/arduino/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fffb89c l       .bss	00000000 __bss_start__
1fffd2d4 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
0000396c  w    F .text	00000006 adc0_isr
00001a74 g     F .text	000000e8 AudioSynthNoiseWhite::update()
000035e8 g     F .text	0000001c usb_serial_available
00005580 g     F .text	00000020 serial4_available
1fffcf08 g     O .bss	00000004 AudioStream::memory_pool
00004e18  w    F .text	000000c4 yield
0000294c g     F .text	0000002a SdFile::addCluster()
1fffafcc g     O .data	00000018 usb_string_manufacturer_name_default
00005678 g     F .text	00000020 serial_available
1fffaeec g     O .data	0000006c Wire1
00003924  w    F .text	00000048 hard_fault_isr
0000396c  w    F .text	00000006 dma_ch6_isr
1fffcf0c g     O .bss	00000001 AudioStream::update_scheduled
000064f8 g     O .text	0000000c vtable for AudioOutputI2S
00004f34 g     F .text	00000020 Print::println()
00002154 g     F .text	00000130 TwoWire::isr()
00005454 g     F .text	00000020 serial2_available
1fffcf84 g     O .bss	00000002 AudioStream::memory_used
0000396c  w    F .text	00000006 uart0_lon_isr
00003e20 g     F .text	000000c8 usb_rx_memory
00004edc  w    F .text	00000002 serialEvent5()
0000396c  w    F .text	00000006 dma_ch8_isr
000057a4 g     F .text	00000020 serial6_available
0000610c g     F .text	00000002 __malloc_unlock
00002be4 g     F .text	00000068 Sd2Card::chipSelectHigh()
00003844 g     F .text	000000e0 analog_init
00003ee8 g     F .text	00000084 usb_tx
0000396c  w    F .text	00000006 portcd_isr
00001988 g     F .text	000000d4 AudioOutputI2S::begin()
00002bcc g     F .text	00000018 SdFile::write(unsigned char)
00004d70 g     F .text	00000098 MillisTimer::runFromTimer()
1fffcaf8 g     O .bss	00000008 AudioOutputAnalogStereo::dma
0000396c  w    F .text	00000006 can1_rx_warn_isr
00006b44 g       .fini	00000000 __exidx_end
0000396c  w    F .text	00000006 dma_error_isr
1fffcb40 g     O .bss	00000004 AudioOutputI2S::block_right_2nd
1fffcef0 g     O .bss	00000001 EventResponder::runningFromYield
00002484 g     F .text	0000000c i2c0_isr
00004f0c g     F .text	00000026 Print::write(unsigned char const*, unsigned int)
00005a90 g     F .text	0000000c __errno
0000396c  w    F .text	00000006 portd_isr
00003170 g     F .text	00000104 KinetisSDHC_ReadBlock
0000396c  w    F .text	00000006 enet_error_isr
1fffb8cc g     O .bss	00000038 channel1A
00006568 g     O .text	00000020 TwoWire::i2c2_hardware
1fffcedc g     O .bss	00000004 EventResponder::firstInterrupt
1fffb9d4 g     O .bss	00000014 patchCord2
0000396c  w    F .text	00000006 tpm1_isr
000064a0 g     O .text	0000000c vtable for AudioAnalyzePeak
00004ef8  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0000685c g     O .text	00000200 digital_pin_to_info_PGM
1fffd2d0 g     O .bss	00000004 errno
00006b44 g       .fini	00000000 _etext
000024c4 g     F .text	00000134 _spi_dma_rxISR0()
1fffb89c g       .bss	00000000 _sbss
000029dc g     F .text	000001f0 SdFile::write(void const*, unsigned int)
1fffcbb8 g     O .bss	00000200 SdVolume::cacheBuffer_
00005358  w    F .text	00000002 serialEvent6()
0000396c  w    F .text	00000006 porte_isr
00005180 g     F .text	00000018 AudioStream::receiveReadOnly(unsigned int)
000005d4 g     F .text	000000c8 loop
0000396c  w    F .text	00000006 portb_isr
1fffc994 g     O .bss	00000038 channel1MixerB
0000396c  w    F .text	00000006 spi1_isr
1fffc824 g     O .bss	0000003c audioFilter1C2
000055a0 g     F .text	000000d8 uart3_status_isr
00005a70  w    F .text	00000002 serialEvent1()
0000396c  w    F .text	00000006 mcm_isr
1fffb9e8 g     O .bss	00000014 patchCord3
00004d08 g     F .text	00000068 MillisTimer::addToActiveList()
00001028  w    F .text	00000004 AudioControlSGTL5000::disable()
000027f0 g     F .text	000000f0 SdVolume::allocContiguous(unsigned long, unsigned long*)
00002370 g     F .text	00000114 TwoWire::endTransmission(unsigned char)
1fffcee0 g     O .bss	00000004 EventResponder::lastInterrupt
00005474 g     F .text	0000010c uart1_status_isr
0000343c g     F .text	00000134 memcpy
0000396c  w    F .text	00000006 randnum_isr
000064ac g     O .text	0000000c vtable for AudioMixer4
1fffcdbc g     O .bss	00000004 SdFile::dateTime_
1fffcdec g     O .bss	00000004 systick_millis_count
1fffcbb0 g     O .bss	00000004 SdVolume::cacheMirrorBlock_
00003924  w    F .text	00000048 bus_fault_isr
00002284 g     F .text	000000ec TwoWire::wait_idle()
00001d38 g     F .text	000002d8 AudioSynthWaveform::update()
0000396c  w    F .text	00000006 watchdog_isr
00002490 g     F .text	0000000c i2c1_isr
1fffced0 g     O .bss	00000001 usb_configuration
0000396c  w    F .text	00000006 dma_ch11_isr
1fffb9fc g     O .bss	00000038 childMixer1A
00000000  w      *UND*	00000000 __fini_array_end
000026a0 g     F .text	0000005c SdVolume::cacheRawBlock(unsigned long, unsigned char)
1fffc9cc g     O .bss	00000020 channel1Combine
00004f54  w    F .text	00000002 serialEvent2()
0000249c g     F .text	0000000c i2c2_isr
1fffcf10 g     O .bss	00000070 AudioStream::memory_pool_available_mask
1fffcad8 g     O .bss	00000008 AudioOutputAnalog::dma
1fffafcc  w    O .data	00000018 usb_string_manufacturer_name
1fffd2c8 g     O .bss	00000008 usb_rx_byte_count_data
1fffc7b4 g     O .bss	00000014 patchCord9
0000396c  w    F .text	00000006 pit1_isr
00005aec g     F .text	00000010 malloc
0000396c  w    F .text	00000006 dma_ch4_isr
00006548 g     O .text	00000020 TwoWire::i2c1_hardware
000052d4 g     F .text	00000084 software_isr
0000396c  w    F .text	00000006 dma_ch7_isr
00002020  w    F .text	0000001e TwoWire::read()
000024a8  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00004a3c g     F .text	00000100 usb_init
1fffcf82 g     O .bss	00000002 AudioStream::memory_pool_first_mask
0000135c g     F .text	000000f0 AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)
1fffc7c8 g     O .bss	00000014 patchCord10
1fffc860 g     O .bss	00000014 patchCord16
0000396c  w    F .text	00000006 lptmr_isr
1fffd290 g     O .bss	00000004 __malloc_top_pad
00003ae0 g     F .text	00000024 rtc_set
1fffad30 g     O .data	00000000 .hidden __dso_handle
00000478  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
1fffc874 g     O .bss	00000014 patchCord17
1fffad30 g       .data	00000000 _sdata
00006528 g     O .text	00000020 TwoWire::i2c0_hardware
000039e8 g     F .text	00000034 kinetis_hsrun_enable
00006110 g     F .text	00000024 _sbrk_r
000001d0 g     F .text	00000200 ResetHandler
00003570 g     F .text	00000048 usb_serial_getchar
0000396c  w    F .text	00000006 can1_bus_off_isr
00003344 g     F .text	00000000 memcpy_tointerleaveLR
0000396c  w    F .text	00000006 ftm2_isr
1fffd2bc g     O .bss	00000008 usb_cdc_line_coding
00003b04 g     F .text	0000000a digitalWrite
1fffcee8 g     O .bss	00000004 EventResponder::lastYield
0000396c  w    F .text	00000006 uart5_status_isr
000057c4 g     F .text	000000e4 lpuart0_status_isr
00006a88 g     O .text	00000004 usb_endpoint_config_table
0000396c  w    F .text	00000006 dma_ch9_isr
1fffcb38 g     O .bss	00000002 AudioOutputI2S::block_right_offset
0000396c  w    F .text	00000006 pit2_isr
00005978 g     F .text	00000020 serial3_available
1fffd28c g     O .bss	00000004 __malloc_max_sbrked_mem
00002c4c g     F .text	000000b4 Sd2Card::chipSelectLow()
00003b10 g     F .text	0000000a pinMode
00003d6c g     F .text	0000004c usb_free
00000f74 g     F .text	0000009c AudioEffectMultiply::update()
0000396c  w    F .text	00000006 i2c3_isr
1fffcbb4 g     O .bss	00000004 SdVolume::sdCard_
1fffae14 g     O .data	0000006c Wire2
00006b44 g       .fini	00000000 __exidx_start
00000dec  w    F .text	0000000c DMAChannel::~DMAChannel()
0000396c  w    F .text	00000006 pit0_isr
1fffceec g     O .bss	00000004 EventResponder::firstYield
1fffc8ec g     O .bss	00000038 masterMixer
00002978 g     F .text	00000064 SdFile::seekSet(unsigned long)
00006ae0 g     O .text	00000004 _global_impure_ptr
1fffcb28 g     O .bss	00000002 AudioOutputI2S::block_left_offset
0000396c  w    F .text	00000006 can1_error_isr
00002ff8 g     F .text	0000008c Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)
00005a9c g     F .text	00000050 __libc_init_array
1fffd2d4 g       .bss	00000000 __bss_end
00002014  w    F .text	0000000c TwoWire::available()
0000396c  w    F .text	00000006 can0_wakeup_isr
0000396c  w    F .text	00000006 flash_cmd_isr
00004ee0  w    F .text	00000004 usb_serial_class::clear()
00005998 g     F .text	000000d8 uart2_status_isr
00003984 g     F .text	0000002c _sbrk
1fffcef4 g     O .bss	00000004 MillisTimer::listWaiting
1fffc9f8 g     O .bss	00000038 channel1B
1fffcb20 g     O .bss	00000008 AudioOutputTDM::dma
1fffafa0 g     O .data	00000004 __brkval
1fffcde8 g     O .bss	00000001 usb_cdc_line_rtsdtr
000037fc g     F .text	00000048 usb_serial_flush_callback
00006ae4 g     F .text	00000000 _init
0000396c  w    F .text	00000006 svcall_isr
1fffb988 g     O .bss	00000038 lfo
00004fe4 g     F .text	0000006c AudioStream::initialize_memory(audio_block_struct*, unsigned int)
000064e0 g     O .text	0000000c vtable for AudioFilterStateVariable
0000396c  w    F .text	00000006 dma_ch15_isr
00006504 g     O .text	0000000c vtable for AudioSynthNoiseWhite
00006588 g     O .text	00000024 vtable for TwoWire
0000396c  w    F .text	00000006 uart1_error_isr
000061f8 g     F .text	00000028 __libc_fini_array
0000396c  w    F .text	00000006 usbhs_phy_isr
1fffcae0 g     O .bss	00000008 AudioInputAnalogStereo::dma0
1fffd2d4 g       .bss	00000000 _ebss
1fffcac8 g     O .bss	00000008 AudioOutputADAT::dma
1fffcb34 g     O .bss	00000004 AudioOutputI2S::block_right_1st
1fffba5c g     O .bss	00000d44 audioDelay1C1
1fffcb44 g     O .bss	00000001 AudioOutputI2S::update_responsibility
0000396c g     F .text	00000006 unused_isr
0000396c  w    F .text	00000006 spi0_isr
0000396c  w    F .text	00000006 dma_ch3_isr
00003402 g     F .text	00000000 memcpy_tointerleaveQuad
00000dec  w    F .text	0000000c DMAChannel::~DMAChannel()
0000396c  w    F .text	00000006 flash_error_isr
1fffc888 g     O .bss	00000014 patchCord18
00001560 g     F .text	00000134 AudioSynthWaveformDc::update()
0000535c g     F .text	00000020 serial5_available
0000396c  w    F .text	00000006 uart5_error_isr
0000396c  w    F .text	00000006 rtc_seconds_isr
000065ac g     O .text	00000094 SPIClass::spi0_hardware
0000396c  w    F .text	00000006 pdb_isr
00003924  w    F .text	00000048 usage_fault_isr
0000396c  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
0000396c  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fffd2c4 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
1fffca7c g     O .bss	0000003c channel1FilterA
1fffc7a0 g     O .bss	00000014 patchCord8
00004e08 g     F .text	00000010 systick_isr
0000396c  w    F .text	00000006 rtc_alarm_isr
1fffcb48 g     O .bss	00000004 AudioOutputI2S::block_left_2nd
1fffcf00 g     O .bss	00000004 AudioStream::first_update
0000396c  w    F .text	00000006 dma_ch2_isr
1fffafa8 g     O .data	00000010 Serial
1fffcf04 g     O .bss	00000002 AudioStream::memory_used_max
0000396c  w    F .text	00000006 ftm1_isr
0000046c  w    F .text	0000000c AudioConnection::~AudioConnection()
000064c4 g     O .text	0000001c vtable for AudioControlSGTL5000
00004f00  w    F .text	00000006 usb_serial_class::write(unsigned char)
00003974  w    F .text	0000000c startup_early_hook
0000396c  w    F .text	00000006 dma_ch13_isr
1fffb8b8 g     O .bss	00000014 patchCord11
1fffc810 g     O .bss	00000014 patchCord13
0000102c  w    F .text	00000004 AudioControlSGTL5000::inputLevel(float)
0000396c  w    F .text	00000006 uart2_error_isr
000035b8 g     F .text	00000030 usb_serial_peekchar
1fffcb3c g     O .bss	00000004 AudioOutputI2S::block_left_1st
1fffb044 g     O .data	00000016 usb_string_serial_number_default
00003924 g     F .text	00000048 fault_isr
000062bc g     F .text	000001d0 _free_r
0000396c  w    F .text	00000006 usb_charge_isr
1fffc95c g     O .bss	00000038 channel1MixerA
00004ef0  w    F .text	00000004 usb_serial_class::flush()
0000396c  w    F .text	00000006 cmt_isr
0000396c  w    F .text	00000006 usbhs_isr
1fffb898 g     O .data	00000004 __malloc_sbrk_base
00004ee8  w    F .text	00000004 usb_serial_class::read()
0000396c  w    F .text	00000006 ftm3_isr
0000396c  w    F .text	00000006 tsi0_isr
000039b0  w    F .text	00000002 __cxa_pure_virtual
0000396c  w    F .text	00000006 spi2_isr
1fffcae8 g     O .bss	00000008 AudioInputAnalogStereo::dma1
00004f58  w    F .text	00000002 serialEvent4()
00004f08  w    F .text	00000002 serialEvent()
00001164  w    F .text	0000005c AudioControlSGTL5000::inputSelect(int)
1fffce59 g     O .bss	00000001 usb_reboot_timer
1fffcab8 g     O .bss	00000008 AudioOutputPWM::dma
00006134 g     F .text	000000a4 __register_exitproc
00005198 g     F .text	00000042 AudioStream::receiveWritable(unsigned int)
00000478  w    F .text	00000054 AudioStream::AudioStream(unsigned char, audio_block_struct**)
00003604 g     F .text	00000038 usb_serial_flush_input
00003744 g     F .text	00000018 usb_serial_putchar
1fffd294 g     O .bss	00000028 __malloc_current_mallinfo
00001228  w    F .text	00000020 AudioControlSGTL5000::volume(float)
0000396c  w    F .text	00000006 can0_bus_off_isr
1fffc7fc g     O .bss	00000014 patchCord12
1fffcec5 g     O .bss	00000001 usb_rx_memory_needed
00003f6c g     F .text	00000ace usb_isr
00005a84 g     F .text	0000000c __cxa_atexit
000052a4 g     F .text	00000030 AudioStream::update_setup()
00004fdc g     F .text	00000008 random(unsigned long)
1fffaf58 g     O .data	00000040 SPI
00006a5c  w    O .text	00000028 vtable for usb_serial_class
0000396c  w    F .text	00000006 uart3_error_isr
000017f8 g     F .text	00000098 AudioOutputI2S::update()
1fffcee4 g     O .bss	00000004 MillisTimer::listActive
0000396c  w    F .text	00000006 porta_isr
1fffa9d0 g     O .usbbuffers	00000360 usb_buffer_memory
1fffba34 g     O .bss	00000014 patchCord5
0000396c  w    F .text	00000006 low_voltage_isr
1fffb48c g     O .data	00000408 __malloc_av_
0000396c  w    F .text	00000006 can0_error_isr
1fffc938 g     O .bss	00000024 peak1
00003bc0 g     F .text	0000016c _init_Teensyduino_internal_
000037a4 g     F .text	00000058 usb_serial_flush_output
0000396c  w    F .text	00000006 dma_ch12_isr
1fffcb10 g     O .bss	00000008 AudioInputI2S::dma
00006108 g     F .text	00000002 __malloc_lock
1fffc7dc g     O .bss	00000020 i2s
00000000  w      *UND*	00000000 __fini_array_start
0000396c  w    F .text	00000006 can1_wakeup_isr
1fffa800 g     O .dmabuffers	000001d0 _VectorsRam
0000396c  w    F .text	00000006 pit3_isr
0000396c  w    F .text	00000006 enet_rx_isr
00006658 g     O .text	00000202 AudioWaveformSine
0000396c  w    F .text	00000006 portc_isr
00003382 g     F .text	00000000 memcpy_tointerleaveL
1fffcaf0 g     O .bss	00000008 AudioInputI2SQuad::dma
0000606c g     F .text	0000009a memset
000011c0 g     F .text	00000066 AudioControlSGTL5000::volumeInteger(unsigned int)
00004f5c g     F .text	00000010 main
00002780 g     F .text	00000070 SdVolume::fatGet(unsigned long, unsigned long*) const
1fffcb2c g     O .bss	00000008 AudioOutputI2S::dma
1fffd288 g     O .bss	00000004 __malloc_max_total_mem
00003924  w    F .text	00000048 memmanage_fault_isr
00001030 g     F .text	00000058 AudioControlSGTL5000::write(unsigned int, unsigned int)
000058a8 g     F .text	00000084 usb_init_serialnumber
00006b40 g       .text	00000000 __init_array_end
00005afc g     F .text	00000570 _malloc_r
0000396c  w    F .text	00000006 debugmonitor_isr
1fffb960 g     O .bss	00000028 dc1
00004c40 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00001088 g     F .text	000000dc AudioControlSGTL5000::enable()
00000000  w      *UND*	00000000 __libc_fini
0000396c  w    F .text	00000006 cmp1_isr
00000e68 g     F .text	000000f4 AudioMixer4::update()
0000396c  w    F .text	00000006 ftm0_isr
00006220 g     F .text	0000009c _malloc_trim_r
1fffb040 g     O .data	00000004 string0
0000363c g     F .text	00000108 usb_serial_write
00003980  w    F .text	00000002 startup_late_hook
00004eec  w    F .text	00000004 usb_serial_class::available()
000064b8 g     O .text	0000000c vtable for AudioEffectMultiply
00000e28 g     F .text	00000040 AudioAnalyzePeak::update()
1fffc9ec g     O .bss	0000000c codec
1fffb028  w    O .data	00000016 usb_string_product_name
00003274 g     F .text	000000d0 KinetisSDHC_WriteBlock
00003b1c g     F .text	000000a4 delay
0000396c  w    F .text	00000006 tpm0_isr
1fffced8 g     O .bss	00000002 dma_channel_allocated_mask
00006b40 g     F .fini	00000000 _fini
1fffaf98 g     O .data	00000004 SdVolume::cacheBlockNumber_
00002098 g     F .text	00000026 TwoWire::write(unsigned char)
1fffcac0 g     O .bss	00000008 AudioOutputPT8211::dma
0000396c  w    F .text	00000006 i2s0_rx_isr
0000396c  w    F .text	00000006 uart4_error_isr
000061ec g     F .text	0000000c atexit
1fffcb5c g     O .bss	00000054 SD
000050f8 g     F .text	00000054 AudioStream::release(audio_block_struct*)
0000396c  w    F .text	00000006 can0_message_isr
1fffb488 g     O .data	00000004 _impure_ptr
0000396c  w    F .text	00000006 can1_message_isr
1fffcb50 g     O .bss	00000008 AudioOutputSPDIF::dma
0000396c  w    F .text	00000006 nmi_isr
1fffae80 g     O .data	0000006c Wire
0000514c g     F .text	00000034 AudioStream::transmit(audio_block_struct*, unsigned char)
1fffb94c g     O .bss	00000014 patchCord15
00006af0 g       .text	00000000 __preinit_array_end
1fffcb08 g     O .bss	00000008 AudioInputTDM::dma
0000396c  w    F .text	00000006 sdhc_isr
00001b74 g     F .text	000001c2 AudioEffectDelay::update()
00005050 g     F .text	000000a8 AudioStream::allocate()
00002040  w    F .text	00000016 TwoWire::peek()
00002058  w    F .text	00000002 TwoWire::flush()
000004cc g     F .text	00000108 setup
00006a8c g     O .text	00000054 usb_descriptor_list
00003db8 g     F .text	0000003c usb_rx
00002d00 g     F .text	00000054 Sd2Card::waitNotBusy(unsigned int)
0000396c  w    F .text	00000006 dma_ch10_isr
1fffb924 g     O .bss	00000028 channel1Env
000025f8  w    F .text	00000002 Print::flush()
1fffb9c0 g     O .bss	00000014 patchCord1
0000396c  w    F .text	00000006 uart0_error_isr
1fffc924 g     O .bss	00000014 patchCord4
00003d2c g     F .text	00000040 usb_malloc
0000396c  w    F .text	00000006 i2s0_isr
20030000 g       .bss	00000000 _estack
00004c08 g     F .text	00000038 DMAChannel::release()
0000375c g     F .text	00000048 usb_serial_write_buffer_free
0000396c  w    F .text	00000006 enet_timer_isr
1fffb904 g     O .bss	00000020 channel1C
000051dc g     F .text	00000068 AudioConnection::connect()
00002e0c g     F .text	00000060 Sd2Card::waitStartBlock()
1fffcb18 g     O .bss	00000008 AudioInputPDM::dma
0000205c g     F .text	0000003a TwoWire::write(unsigned char const*, unsigned int)
1fffb89c g       .data	00000000 _edata
1fffc8b0 g     O .bss	00000014 patchCord7
0000396c  w    F .text	00000006 i2s0_tx_isr
0000396c  w    F .text	00000006 adc1_isr
00004ef4  w    F .text	00000004 usb_serial_class::availableForWrite()
0000396c  w    F .text	00000006 cmp0_isr
0000592c g     F .text	0000004c ultoa
00006640 g     O .text	00000018 vtable for SdFile
000020c0 g     F .text	00000094 TwoWire::begin()
00004cc0 g     F .text	00000044 EventResponder::runFromInterrupt()
1fffb894 g     O .data	00000004 __malloc_trim_threshold
00004ee4  w    F .text	00000004 usb_serial_class::peek()
00005244 g     F .text	00000060 AudioConnection::disconnect()
00002f2c g     F .text	000000cc Sd2Card::writeData(unsigned char, unsigned char const*)
000012c0 g     F .text	0000009c AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)
1fffcdd8 g     O .bss	00000001 usb_cdc_transmit_flush_timer
1fffcf86 g     O .bss	00000002 AudioStream::cpu_cycles_total
0000396c  w    F .text	00000006 pit_isr
00002d54 g     F .text	000000b8 Sd2Card::cardCommand(unsigned char, unsigned long)
00002620 g     F .text	00000080 SdVolume::cacheFlush()
0000396c  w    F .text	00000006 dac0_isr
00006af0 g       .text	00000000 __init_array_start
0000396c  w    F .text	00000006 can1_tx_warn_isr
00002e6c g     F .text	000000c0 Sd2Card::SD_readBlock(unsigned long, unsigned char*)
00005698 g     F .text	0000010c uart0_status_isr
1fffad34 g     O .data	000000e0 noteFreq
000016f4 g     F .text	00000104 AudioOutputI2S::isr()
1fffcb4c g     O .bss	00000002 AudioSynthNoiseWhite::instance_count
0000396c  w    F .text	00000006 mcg_isr
00001890 g     F .text	000000f8 AudioOutputI2S::config_i2s()
000064ec g     O .text	0000000c vtable for AudioSynthWaveformDc
00000400 g     O .text	00000010 flashconfigbytes
00004b3c g     F .text	000000cc DMAChannel::begin(bool)
1fffb028 g     O .data	00000016 usb_string_product_name_default
1fffcb00 g     O .bss	00000008 AudioOutputI2SQuad::dma
0000396c  w    F .text	00000006 dma_ch1_isr
1fffba48 g     O .bss	00000014 patchCord6
1fffc8c4 g     O .bss	00000028 channel1EnvFilter
00003df4 g     F .text	0000002c usb_tx_packet_count
000033c2 g     F .text	00000000 memcpy_tointerleaveR
1fffc89c g     O .bss	00000014 patchCord19
0000396c  w    F .text	00000006 dma_ch5_isr
0000396c  w    F .text	00000006 can0_rx_warn_isr
0000396c  w    F .text	00000006 can0_tx_warn_isr
0000537c g     F .text	000000d8 uart4_status_isr
0000651c g     O .text	0000000c vtable for AudioSynthWaveform
00000000  w      *UND*	00000000 _Jv_RegisterClasses
1fffcad0 g     O .bss	00000008 AudioInputAnalog::dma
1fffcf80 g     O .bss	00000002 AudioStream::cpu_cycles_total_max
000039b4 g     F .text	00000034 kinetis_hsrun_disable
00006af0 g       .text	00000000 __preinit_array_start
0000648c  w    O .text	0000000c vtable for AudioStream
00005a74  w    F .text	00000002 serialEvent3()
00005a78 g     F .text	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
0000396c  w    F .text	00000006 cmp2_isr
1fffca30 g     O .bss	00000038 mixer1
00004d04 g     F .text	00000004 pendablesrvreq_isr
00002010  w    F .text	00000004 Print::availableForWrite()
0000046c  w    F .text	0000000c AudioConnection::~AudioConnection()
0000396c  w    F .text	00000006 wakeup_isr
00006510 g     O .text	0000000c vtable for AudioEffectDelay
0000144c g     F .text	000000fa AudioFilterStateVariable::update()
0000396c  w    F .text	00000006 cmp3_isr
1fffcdb8 g     O .bss	00000001 SdVolume::cacheDirty_
0000396c  w    F .text	00000006 tpm2_isr
0000396c  w    F .text	00000006 dma_ch0_isr
1fffb044  w    O .data	00000016 usb_string_serial_number
1fffca68 g     O .bss	00000014 patchCord14
0000396c  w    F .text	00000006 enet_tx_isr



Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	... ....m9..%9..
      10:	%9..%9..%9..%9..
      20:	%9..%9..%9..m9..
      30:	m9..%9...M...N..
      40:	m9..m9..m9..m9..
      50:	m9..m9..m9..m9..
      60:	m9..m9..m9..m9..
      70:	m9..m9..m9..m9..
      80:	m9..m9..m9..m9..
      90:	m9..m9..m9..m9..
      a0:	.$...$..m9..m9..
      b0:	m9..m9..m9...V..
      c0:	m9..uT..m9...Y..
      d0:	m9...U..m9..m9..
      e0:	m9..m9..m9..m9..
      f0:	m9..m9..m9..m9..
     100:	m9..m9..m9..m9..
     110:	m9..m?..m9..m9..
     120:	m9..m9..m9..m9..
     130:	m9..m9..m9..m9..
     140:	.R..m9..}S..m9..
     150:	m9..m9..m9..m9..
     160:	m9..m9...$..m9..
     170:	m9..m9..m9..m9..
     180:	m9..m9..m9..m9..
     190:	m9..m9...W..m9..
     1a0:	m9..m9..m9..m9..
     1b0:	m9..m9..m9..m9..
     1c0:	m9..m9..m9..m9..

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	3974 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	ldr	r3, [r2, #0]
     20a:	ands.w	r3, r3, #256	; 0x100
     20e:	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	mov.w	r3, #5376	; 0x1500
     218:	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	ldrb	r2, [r3, #0]
     21e:	lsls	r1, r2, #28
     220:	bpl.n	22a <ResetHandler+0x5a>
     222:	ldrb	r2, [r3, #0]
     224:	orr.w	r2, r2, #8
     228:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	movs	r2, #170	; 0xaa
     230:	strb	r2, [r3, #0]
     232:	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	cmp	r3, r1
     238:	bcs.n	244 <ResetHandler+0x74>
     23a:	ldr.w	r0, [r2, #4]!
     23e:	str.w	r0, [r3], #4
     242:	b.n	236 <ResetHandler+0x66>
     244:	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	movs	r2, #0
     24a:	cmp	r3, r1
     24c:	bcs.n	254 <ResetHandler+0x84>
     24e:	str.w	r2, [r3], #4
     252:	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	movs	r3, #0
     25a:	ldr.w	r0, [r2, r3, lsl #2]
     25e:	str.w	r0, [r1, r3, lsl #2]
     262:	adds	r3, #1
     264:	cmp	r3, #116	; 0x74
     266:	bne.n	25a <ResetHandler+0x8a>
     268:	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	movs	r1, #128	; 0x80
     26e:	strb.w	r1, [r3], #1
     272:	cmp	r3, r2
     274:	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	movs	r2, #138	; 0x8a
     280:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	sub.w	r3, r3, #4096	; 0x1000
     286:	movs	r2, #36	; 0x24
     288:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	movs	r2, #160	; 0xa0
     28c:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	ldrb	r2, [r3, #6]
     290:	lsls	r2, r2, #30
     292:	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	ldrb	r2, [r3, #6]
     296:	lsls	r4, r2, #27
     298:	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	ldrb	r3, [r2, #6]
     29e:	and.w	r3, r3, #12
     2a2:	cmp	r3, #8
     2a4:	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	movs	r2, #96	; 0x60
     2aa:	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	adds	r3, #2
     2ae:	ldrb	r2, [r3, #0]
     2b0:	cmp	r2, #128	; 0x80
     2b2:	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	movs	r2, #1
     2b8:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	movs	r2, #93	; 0x5d
     2bc:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	ldrb	r2, [r3, #6]
     2c0:	lsls	r0, r2, #26
     2c2:	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	ldrb	r1, [r3, #6]
     2c6:	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	lsls	r1, r1, #25
     2ca:	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	movs	r1, #0
     2d4:	str	r1, [r3, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	movs	r3, #32
     2d8:	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	ldrb	r3, [r2, #6]
     2dc:	and.w	r3, r3, #12
     2e0:	cmp	r3, #12
     2e2:	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	movs	r2, #0
     2f2:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	movs	r2, #7
     2f6:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	cpsie	i

	_init_Teensyduino_internal_();
     302:	bl	3bc0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	ldr	r3, [r3, #0]
     30a:	lsls	r2, r3, #31
     30c:	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	bl	3ae0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	ldrb	r3, [r3, #0]
     31e:	lsls	r3, r3, #25
     320:	bpl.n	336 <ResetHandler+0x166>
     322:	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	ldr	r2, [r4, #0]
     328:	cmp	r2, r3
     32a:	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	bl	3ae0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	movs	r3, #0
     334:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	bl	5a9c <__libc_init_array>

	startup_late_hook();
     33a:	bl	3980 <startup_late_hook>
	main();
     33e:	bl	4f5c <main>
     342:	b.n	342 <ResetHandler+0x172>
     344:	.word	0x4005200e
     348:	.word	0x40048030
     34c:	.word	0x00043f82
     350:	.word	0x2b000001
     354:	.word	0xe000ed88
     358:	.word	0xe0082000
     35c:	.word	0x85000003
     360:	.word	0x4003d010
     364:	.word	0x4003d014
     368:	.word	0x4007d002
     36c:	.word	0x4007e000
     370:	.word	0x1fffb89c
     374:	.word	0x00006b40
     378:	.word	0x1fffad30
     37c:	.word	0x1fffb89c
     380:	.word	0x1fffd2d4
     384:	.word	0x1fffa800
     388:	.word	0x00000000
     38c:	.word	0xe000e400
     390:	.word	0xe000e464
     394:	.word	0xe000ed08
     398:	.word	0x40065000
     39c:	.word	0x40064000
     3a0:	.word	0x4007e001
     3a4:	.word	0x40048044
     3a8:	.word	0x02060000
     3ac:	.word	0x40048004
     3b0:	.word	0x000710c0
     3b4:	.word	0xe000e014
     3b8:	.word	0x0002bf1f
     3bc:	.word	0x20200000
     3c0:	.word	0x00000031
     3c4:	.word	0x4003e01c
     3c8:	.word	0x5a94c3a5
     3cc:	.word	0x4007f000
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fffb89c
     42c:	.word	0x00000000
     430:	.word	0x00006b44

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fffb8a0
     460:	.word	0x00006b44
     464:	.word	0x1fffb89c
     468:	.word	0x00000000

0000046c <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
     46c:	push	{r4, lr}
     46e:	mov	r4, r0
		disconnect();
     470:	bl	5244 <AudioConnection::disconnect()>
	}
     474:	mov	r0, r4
     476:	pop	{r4, pc}

00000478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
     478:	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
     47a:	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
     47c:	ldr	r4, [pc, #68]	; (4c4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
     47e:	strb	r1, [r0, #9]
     480:	str	r2, [r0, #16]
     482:	str	r4, [r0, #0]
			active = false;
     484:	strb	r3, [r0, #8]
			destination_list = NULL;
     486:	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
     488:	cbz	r1, 49c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
     48a:	mov	r1, r3
     48c:	b.n	490 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
     48e:	ldr	r2, [r0, #16]
     490:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     494:	ldrb	r2, [r0, #9]
     496:	adds	r3, #1
     498:	cmp	r2, r3
     49a:	bgt.n	48e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     49c:	ldr	r3, [pc, #40]	; (4c8 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
     49e:	ldr	r2, [r3, #0]
     4a0:	cbnz	r2, 4a6 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
     4a2:	b.n	4be <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x46>
     4a4:	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     4a6:	ldr	r3, [r2, #20]
     4a8:	cmp	r3, #0
     4aa:	bne.n	4a4 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
     4ac:	str	r0, [r2, #20]
			}
			next_update = NULL;
     4ae:	movs	r3, #0
     4b0:	str	r3, [r0, #20]
			cpu_cycles = 0;
     4b2:	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
     4b4:	strh	r3, [r0, #6]
			numConnections = 0;
     4b6:	strb	r3, [r0, #10]
		}
     4b8:	ldr.w	r4, [sp], #4
     4bc:	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     4be:	str	r0, [r3, #0]
     4c0:	b.n	4ae <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
     4c2:	nop
     4c4:	.word	0x00006494
     4c8:	.word	0x1fffcf00

000004cc <setup>:
  {493.88,329.63,554.37,369.99,622.25,415.30,659.25,440.00},
  {523.25,349.23,587.33,392.00,659.25,440.00,698.46,466.16},
  {587.33,392.00,659.25,440.00,739.99,493.88,783.99,523.25},
};

void setup() {
     4cc:	push	{r3, r4, r5, r6, r7, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     4ce:	movs	r1, #5
     4d0:	ldr	r0, [pc, #196]	; (598 <setup+0xcc>)
		if (milliseconds < 0.0) milliseconds = 0.0;
		uint32_t n = (milliseconds*(AUDIO_SAMPLE_RATE_EXACT/1000.0))+0.5;
		uint32_t nmax = AUDIO_BLOCK_SAMPLES * (DELAY_QUEUE_SIZE-1);
		if (n > nmax) n = nmax;
		uint32_t blks = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
		if (!(activemask & (1<<channel))) {
     4d2:	ldr	r5, [pc, #200]	; (59c <setup+0xd0>)
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     4d4:	ldr	r6, [pc, #200]	; (5a0 <setup+0xd4>)
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     4d6:	ldr	r7, [pc, #204]	; (5a4 <setup+0xd8>)
     4d8:	bl	363c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     4dc:	ldr	r0, [pc, #200]	; (5a8 <setup+0xdc>)
     4de:	bl	4f34 <Print::println()>

    SerialPortInterface::start();

    AudioMemory(160);
     4e2:	movs	r1, #160	; 0xa0
     4e4:	ldr	r0, [pc, #196]	; (5ac <setup+0xe0>)
     4e6:	bl	4fe4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>

    codec.enable();
     4ea:	ldr	r0, [pc, #196]	; (5b0 <setup+0xe4>)
     4ec:	bl	1088 <AudioControlSGTL5000::enable()>
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
     4f0:	movs	r1, #129	; 0x81
     4f2:	ldr	r0, [pc, #188]	; (5b0 <setup+0xe4>)
     4f4:	bl	11c0 <AudioControlSGTL5000::volumeInteger(unsigned int)>
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
		else if (gain < -32767.0f) gain = -32767.0f;
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
     4f8:	ldr	r1, [pc, #184]	; (5b4 <setup+0xe8>)
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     4fa:	ldr	r2, [pc, #188]	; (5b8 <setup+0xec>)
     4fc:	ldr	r3, [pc, #188]	; (5bc <setup+0xf0>)
     4fe:	ldrb	r0, [r5, #24]
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     500:	str	r7, [r3, #28]
     502:	mov.w	r4, #16384	; 0x4000
     506:	str	r4, [r1, #24]
     508:	str	r4, [r1, #28]
     50a:	str	r4, [r1, #32]
     50c:	str	r4, [r1, #36]	; 0x24
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     50e:	movw	r1, #19660	; 0x4ccc
	}
	void begin(float t_amp, float t_freq, short t_type) {
		amplitude(t_amp);
		frequency(t_freq);
		phase_offset = 0;
		tone_type = t_type;
     512:	movs	r4, #2
     514:	strh	r4, [r2, #50]	; 0x32
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     516:	str	r1, [r2, #36]	; 0x24
		tone_type = t_type;
	}
	void begin(float t_amp, float t_freq, short t_type) {
		amplitude(t_amp);
		frequency(t_freq);
		phase_offset = 0;
     518:	movs	r4, #0
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     51a:	str	r1, [r3, #36]	; 0x24
	}
	void begin(float t_amp, float t_freq, short t_type) {
		amplitude(t_amp);
		frequency(t_freq);
		phase_offset = 0;
		tone_type = t_type;
     51c:	movs	r1, #1
		tone_type = t_type;
	}
	void begin(float t_amp, float t_freq, short t_type) {
		amplitude(t_amp);
		frequency(t_freq);
		phase_offset = 0;
     51e:	str	r4, [r3, #32]
		tone_type = t_type;
     520:	strh	r1, [r3, #50]	; 0x32
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
     522:	mov.w	r3, #1073741824	; 0x40000000
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     526:	str	r7, [r2, #28]
		tone_type = t_type;
	}
	void begin(float t_amp, float t_freq, short t_type) {
		amplitude(t_amp);
		frequency(t_freq);
		phase_offset = 0;
     528:	str	r4, [r2, #32]
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     52a:	ldr	r7, [pc, #148]	; (5c0 <setup+0xf4>)
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     52c:	ldr	r2, [pc, #148]	; (5c4 <setup+0xf8>)
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
     52e:	str	r3, [r6, #36]	; 0x24
     530:	ands.w	r3, r0, r1
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     534:	str	r7, [r6, #24]
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     536:	str	r2, [r6, #28]
     538:	bne.n	566 <setup+0x9a>
			// enabling a previously disabled channel
			position[channel] = n;
			if (blks > maxblocks) maxblocks = blks;
     53a:	ldrh	r2, [r5, #30]
		uint32_t nmax = AUDIO_BLOCK_SAMPLES * (DELAY_QUEUE_SIZE-1);
		if (n > nmax) n = nmax;
		uint32_t blks = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
		if (!(activemask & (1<<channel))) {
			// enabling a previously disabled channel
			position[channel] = n;
     53c:	str	r3, [r5, #32]
			if (blks > maxblocks) maxblocks = blks;
     53e:	cbnz	r2, 542 <setup+0x76>
     540:	strh	r1, [r5, #30]
			activemask |= (1<<channel);
     542:	orr.w	r0, r0, #1
     546:	strb	r0, [r5, #24]
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     548:	ldr	r3, [pc, #124]	; (5c8 <setup+0xfc>)
     54a:	ldr	r1, [pc, #128]	; (5cc <setup+0x100>)
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     54c:	ldr	r2, [pc, #128]	; (5d0 <setup+0x104>)
     54e:	str	r2, [r3, #28]
     550:	mov.w	r4, #32768	; 0x8000
     554:	movs	r2, #0
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     556:	mov.w	r0, #65536	; 0x10000
     55a:	str	r4, [r1, #24]
     55c:	str	r2, [r1, #36]	; 0x24
		tone_type = t_type;
	}
	void begin(float t_amp, float t_freq, short t_type) {
		amplitude(t_amp);
		frequency(t_freq);
		phase_offset = 0;
     55e:	str	r2, [r3, #32]
		tone_type = t_type;
     560:	strh	r2, [r3, #50]	; 0x32
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     562:	str	r0, [r3, #36]	; 0x24
     564:	pop	{r3, r4, r5, r6, r7, pc}
				// new delay is greater than previous setting
				if (blks > maxblocks) maxblocks = blks;
				position[channel] = n;
			} else {
				// new delay is less than previous setting
				position[channel] = n;
     566:	mov	r1, r5
	}
	virtual void update(void);
private:
	void recompute_maxblocks(void) {
		uint32_t max=0;
		uint32_t channel = 0;
     568:	mov	r3, r4
				// new delay is greater than previous setting
				if (blks > maxblocks) maxblocks = blks;
				position[channel] = n;
			} else {
				// new delay is less than previous setting
				position[channel] = n;
     56a:	str.w	r4, [r1, #32]!
private:
	void recompute_maxblocks(void) {
		uint32_t max=0;
		uint32_t channel = 0;
		do {
			if (activemask & (1<<channel)) {
     56e:	asr.w	r2, r0, r3
     572:	tst.w	r2, #1
     576:	add.w	r3, r3, #1
     57a:	beq.n	58a <setup+0xbe>
				uint32_t n = position[channel];
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
     57c:	ldr	r2, [r1, #0]
     57e:	adds	r2, #127	; 0x7f
     580:	lsrs	r2, r2, #7
     582:	adds	r2, #1
     584:	cmp	r4, r2
     586:	it	cc
     588:	movcc	r4, r2
	virtual void update(void);
private:
	void recompute_maxblocks(void) {
		uint32_t max=0;
		uint32_t channel = 0;
		do {
     58a:	cmp	r3, #8
     58c:	add.w	r1, r1, #4
     590:	bne.n	56e <setup+0xa2>
				uint32_t n = position[channel];
				n = (n + (AUDIO_BLOCK_SAMPLES-1)) / AUDIO_BLOCK_SAMPLES + 1;
				if (n > max) max = n;
			}
		} while(++channel < 8);
		maxblocks = max;
     592:	strh	r4, [r5, #30]
     594:	b.n	548 <setup+0x7c>
     596:	nop
     598:	.word	0x00006498
     59c:	.word	0x1fffba5c
     5a0:	.word	0x1fffc824
     5a4:	.word	0x028d9cc0
     5a8:	.word	0x1fffafa8
     5ac:	.word	0x1fff0200
     5b0:	.word	0x1fffc9ec
     5b4:	.word	0x1fffc95c
     5b8:	.word	0x1fffb8cc
     5bc:	.word	0x1fffc9f8
     5c0:	.word	0x0dac1610
     5c4:	.word	0x0da56f30
     5c8:	.word	0x1fffb988
     5cc:	.word	0x1fffc8ec
     5d0:	.word	0x000474d9

000005d4 <loop>:
    masterMixer.gain(0, 0.5);

    lfo.begin(1, 3, WAVEFORM_SINE);
}

void loop() {
     5d4:	push	{r3, lr}
     5d6:	movs	r1, #129	; 0x81
     5d8:	ldr	r0, [pc, #164]	; (680 <loop+0xac>)
     5da:	bl	11c0 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    int vcoOneOct = 1;
    int vcoTwoOct = 1;
    int deTune = 1;
    int deTuneLfo = 1;

    channel1A.frequency((noteFreq[keyIndex][keyIndex]/4)*vcoOneOct);
     5de:	ldr	r3, [pc, #164]	; (684 <loop+0xb0>)
     5e0:	vldr	s15, [r3]
     5e4:	vmov.f32	s14, #80	; 0x3e800000  0.250
     5e8:	vmul.f32	s15, s15, s14
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
		tone_offset(0) {
	}

	void frequency(float freq) {
		if (freq < 0.0) {
     5ec:	vcmpe.f32	s15, #0.0
     5f0:	vmrs	APSR_nzcv, fpscr
     5f4:	bmi.n	66c <loop+0x98>
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
     5f6:	vldr	s14, [pc, #144]	; 688 <loop+0xb4>
     5fa:	vcmpe.f32	s15, s14
     5fe:	vmrs	APSR_nzcv, fpscr
     602:	bgt.n	646 <loop+0x72>
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     604:	vldr	s14, [pc, #132]	; 68c <loop+0xb8>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     608:	ldr	r1, [pc, #132]	; (690 <loop+0xbc>)
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     60a:	ldr	r2, [pc, #136]	; (694 <loop+0xc0>)
     60c:	vmul.f32	s14, s15, s14
     610:	vcvt.u32.f32	s14, s14
     614:	vmov	r3, s14
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     618:	cmp	r3, r1
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     61a:	vstr	s14, [r2, #28]
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     61e:	bhi.n	648 <loop+0x74>
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
		tone_offset(0) {
	}

	void frequency(float freq) {
		if (freq < 0.0) {
     620:	vcmpe.f32	s15, #0.0
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     624:	mov.w	r3, #65536	; 0x10000
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
		tone_offset(0) {
	}

	void frequency(float freq) {
		if (freq < 0.0) {
     628:	vmrs	APSR_nzcv, fpscr
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     62c:	str	r3, [r2, #36]	; 0x24
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
		tone_offset(0) {
	}

	void frequency(float freq) {
		if (freq < 0.0) {
     62e:	bmi.n	678 <loop+0xa4>
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
     630:	vldr	s14, [pc, #84]	; 688 <loop+0xb4>
     634:	vcmpe.f32	s15, s14
     638:	vmrs	APSR_nzcv, fpscr
     63c:	ble.n	64e <loop+0x7a>
     63e:	ldr	r2, [pc, #88]	; (698 <loop+0xc4>)
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     640:	ldr	r3, [pc, #76]	; (690 <loop+0xbc>)
     642:	str	r3, [r2, #28]
     644:	pop	{r3, pc}
     646:	ldr	r2, [pc, #76]	; (694 <loop+0xc0>)
     648:	ldr	r3, [pc, #68]	; (690 <loop+0xbc>)
     64a:	str	r3, [r2, #28]
     64c:	b.n	620 <loop+0x4c>
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     64e:	vldr	s14, [pc, #60]	; 68c <loop+0xb8>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     652:	ldr	r1, [pc, #60]	; (690 <loop+0xbc>)
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     654:	ldr	r2, [pc, #64]	; (698 <loop+0xc4>)
     656:	vmul.f32	s15, s15, s14
     65a:	vcvt.u32.f32	s15, s15
     65e:	vmov	r3, s15
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     662:	cmp	r3, r1
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     664:	vstr	s15, [r2, #28]
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
     668:	bhi.n	640 <loop+0x6c>
     66a:	pop	{r3, pc}
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     66c:	ldr	r3, [pc, #36]	; (694 <loop+0xc0>)
     66e:	movs	r1, #0
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     670:	mov.w	r2, #65536	; 0x10000
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     674:	str	r1, [r3, #28]
		if (n < 0) {
			n = 0;
		} else if (n > 1.0) {
			n = 1.0;
		}
		magnitude = n * 65536.0;
     676:	str	r2, [r3, #36]	; 0x24
		if (freq < 0.0) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2) {
			freq = AUDIO_SAMPLE_RATE_EXACT / 2;
		}
		phase_increment = freq * (4294967296.0 / AUDIO_SAMPLE_RATE_EXACT);
     678:	ldr	r3, [pc, #28]	; (698 <loop+0xc4>)
     67a:	movs	r2, #0
     67c:	str	r2, [r3, #28]
     67e:	pop	{r3, pc}
     680:	.word	0x1fffc9ec
     684:	.word	0x1fffad34
     688:	.word	0x46ac55a6
     68c:	.word	0x47be244b
     690:	.word	0x7ffe0000
     694:	.word	0x1fffb8cc
     698:	.word	0x1fffc9f8

0000069c <_GLOBAL__sub_I_i2s>:
    channel1A.amplitude(1);
    channel1B.frequency(((noteFreq[keyIndex][keyIndex]/4*vcoTwoOct) * deTune) * deTuneLfo);
    channel1A.amplitude(1);

    // delay(100);
     69c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     6a0:	ldr.w	fp, [pc, #688]	; 954 <_GLOBAL__sub_I_i2s+0x2b8>
     6a4:	ldr	r3, [pc, #680]	; (950 <_GLOBAL__sub_I_i2s+0x2b4>)
     6a6:	str.w	r3, [fp]
			active = false;
     6aa:	movs	r1, #0

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     6ac:	movs	r0, #2
     6ae:	add.w	r2, fp, #24
     6b2:	sub	sp, #12
			active = false;
			destination_list = NULL;
     6b4:	mov	r3, r1

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     6b6:	strb.w	r0, [fp, #9]
     6ba:	str.w	r2, [fp, #16]
			active = false;
     6be:	strb.w	r1, [fp, #8]
			destination_list = NULL;
     6c2:	str.w	r1, [fp, #12]
			for (int i=0; i < num_inputs; i++) {
     6c6:	mov	r4, fp
     6c8:	b.n	6cc <_GLOBAL__sub_I_i2s+0x30>
     6ca:	ldr	r2, [r4, #16]
				inputQueue[i] = NULL;
     6cc:	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     6d0:	ldrb.w	r2, [fp, #9]
     6d4:	ldr	r0, [pc, #636]	; (954 <_GLOBAL__sub_I_i2s+0x2b8>)
     6d6:	adds	r3, #1
     6d8:	cmp	r2, r3
     6da:	bgt.n	6ca <_GLOBAL__sub_I_i2s+0x2e>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     6dc:	ldr	r3, [pc, #632]	; (958 <_GLOBAL__sub_I_i2s+0x2bc>)
     6de:	ldr	r2, [r3, #0]
     6e0:	cbnz	r2, 6e6 <_GLOBAL__sub_I_i2s+0x4a>
     6e2:	b.n	dd0 <_GLOBAL__sub_I_i2s+0x734>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     6e4:	mov	r2, r3
     6e6:	ldr	r3, [r2, #20]
     6e8:	cmp	r3, #0
     6ea:	bne.n	6e4 <_GLOBAL__sub_I_i2s+0x48>
				p->next_update = this;
     6ec:	str.w	fp, [r2, #20]
			}
			next_update = NULL;
     6f0:	movs	r6, #0
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
     6f2:	ldr	r3, [pc, #616]	; (95c <_GLOBAL__sub_I_i2s+0x2c0>)
     6f4:	ldr	r0, [pc, #604]	; (954 <_GLOBAL__sub_I_i2s+0x2b8>)
#endif

class AudioSynthWaveformDc : public AudioStream
{
public:
	AudioSynthWaveformDc() : AudioStream(0, NULL), state(0), magnitude(0) {}
     6f6:	ldr.w	r9, [pc, #716]	; 9c4 <_GLOBAL__sub_I_i2s+0x328>
     6fa:	str.w	r3, [fp]
     6fe:	str.w	r6, [fp, #20]
			cpu_cycles = 0;
     702:	strh.w	r6, [fp, #4]
			cpu_cycles_max = 0;
     706:	strh.w	r6, [fp, #6]
			numConnections = 0;
     70a:	strb.w	r6, [fp, #10]
     70e:	bl	1988 <AudioOutputI2S::begin()>
#include "AudioControl.h"

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
     712:	ldr	r3, [pc, #588]	; (960 <_GLOBAL__sub_I_i2s+0x2c4>)
public:
	AudioSynthWaveform(void) : AudioStream(0,NULL),
		phase_accumulator(0), phase_increment(0), phase_offset(0),
		magnitude(0), pulse_width(0x40000000),
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
		tone_offset(0) {
     714:	ldr.w	r8, [pc, #688]	; 9c8 <_GLOBAL__sub_I_i2s+0x32c>
     718:	ldr	r2, [pc, #584]	; (964 <_GLOBAL__sub_I_i2s+0x2c8>)
     71a:	str	r2, [r3, #0]
     71c:	mov	r1, r6
     71e:	mov	r2, r6
     720:	movs	r4, #10
     722:	mov	r0, r9
     724:	strb	r4, [r3, #8]
     726:	ldr	r7, [pc, #576]	; (968 <_GLOBAL__sub_I_i2s+0x2cc>)

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     728:	ldr	r4, [pc, #576]	; (96c <_GLOBAL__sub_I_i2s+0x2d0>)
     72a:	ldr	r5, [pc, #580]	; (970 <_GLOBAL__sub_I_i2s+0x2d4>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     72c:	ldr.w	sl, [pc, #668]	; 9cc <_GLOBAL__sub_I_i2s+0x330>
     730:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     734:	mov	r2, r6
     736:	mov	r1, r6
     738:	mov	r0, r8
     73a:	strb.w	r6, [r9, #24]
     73e:	str.w	r6, [r9, #28]
     742:	str.w	r7, [r9]
     746:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     74a:	ldr	r3, [pc, #544]	; (96c <_GLOBAL__sub_I_i2s+0x2d0>)
     74c:	str.w	r6, [r8, #24]
     750:	add.w	r2, r3, #40	; 0x28
     754:	mov	r0, r3
     756:	ldr	r3, [pc, #540]	; (974 <_GLOBAL__sub_I_i2s+0x2d8>)
     758:	str.w	r3, [r8]
     75c:	movs	r1, #4
     75e:	mov.w	r3, #1073741824	; 0x40000000
     762:	str.w	r3, [r8, #40]	; 0x28
     766:	str.w	r6, [r8, #28]
     76a:	str.w	r6, [r8, #32]
     76e:	str.w	r6, [r8, #36]	; 0x24
     772:	str.w	r6, [r8, #44]	; 0x2c
     776:	strh.w	r6, [r8, #48]	; 0x30
     77a:	strh.w	r6, [r8, #50]	; 0x32
     77e:	strh.w	r6, [r8, #52]	; 0x34
     782:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     786:	mov.w	r3, #65536	; 0x10000
     78a:	mov	r2, r6
     78c:	mov	r1, r6
     78e:	ldr	r0, [pc, #488]	; (978 <_GLOBAL__sub_I_i2s+0x2dc>)
     790:	str	r3, [r4, #24]
     792:	str	r3, [r4, #28]
     794:	str	r3, [r4, #32]
     796:	str	r3, [r4, #36]	; 0x24

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     798:	str	r5, [r4, #0]
     79a:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     79e:	ldr	r3, [pc, #472]	; (978 <_GLOBAL__sub_I_i2s+0x2dc>)
     7a0:	ldr	r4, [pc, #464]	; (974 <_GLOBAL__sub_I_i2s+0x2d8>)
     7a2:	str	r4, [r3, #0]
     7a4:	mov	r2, r6
     7a6:	mov	r1, r6
     7a8:	mov.w	r4, #1073741824	; 0x40000000
     7ac:	ldr	r0, [pc, #460]	; (97c <_GLOBAL__sub_I_i2s+0x2e0>)
     7ae:	str	r6, [r3, #24]
     7b0:	str	r6, [r3, #28]
     7b2:	str	r6, [r3, #32]
     7b4:	str	r6, [r3, #36]	; 0x24
     7b6:	str	r4, [r3, #40]	; 0x28
     7b8:	str	r6, [r3, #44]	; 0x2c
     7ba:	strh	r6, [r3, #48]	; 0x30
     7bc:	strh	r6, [r3, #50]	; 0x32
     7be:	strh	r6, [r3, #52]	; 0x34
     7c0:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     7c4:	ldr	r3, [pc, #400]	; (958 <_GLOBAL__sub_I_i2s+0x2bc>)
     7c6:	ldr	r1, [pc, #428]	; (974 <_GLOBAL__sub_I_i2s+0x2d8>)
     7c8:	ldr	r2, [r3, #0]
     7ca:	ldr	r3, [pc, #432]	; (97c <_GLOBAL__sub_I_i2s+0x2e0>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     7cc:	strb.w	r6, [sl, #9]
     7d0:	str	r1, [r3, #0]
     7d2:	str	r6, [r3, #24]
     7d4:	str	r6, [r3, #28]
     7d6:	str	r6, [r3, #32]
     7d8:	str	r6, [r3, #36]	; 0x24
     7da:	str	r4, [r3, #40]	; 0x28
     7dc:	str	r6, [r3, #44]	; 0x2c
     7de:	strh	r6, [r3, #48]	; 0x30
     7e0:	strh	r6, [r3, #50]	; 0x32
     7e2:	strh	r6, [r3, #52]	; 0x34
     7e4:	ldr	r3, [pc, #360]	; (950 <_GLOBAL__sub_I_i2s+0x2b4>)
     7e6:	str.w	r3, [sl]
     7ea:	str.w	r6, [sl, #16]
			active = false;
     7ee:	strb.w	r6, [sl, #8]
			destination_list = NULL;
     7f2:	str.w	r6, [sl, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     7f6:	ldr	r3, [pc, #352]	; (958 <_GLOBAL__sub_I_i2s+0x2bc>)
     7f8:	cbnz	r2, 7fe <_GLOBAL__sub_I_i2s+0x162>
     7fa:	b.n	dd4 <_GLOBAL__sub_I_i2s+0x738>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     7fc:	mov	r2, r3
     7fe:	ldr	r3, [r2, #20]
     800:	cmp	r3, #0
     802:	bne.n	7fc <_GLOBAL__sub_I_i2s+0x160>
				p->next_update = this;
     804:	str.w	sl, [r2, #20]
class AudioSynthNoiseWhite : public AudioStream
{
public:
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
		level = 0;
		seed = 1 + instance_count++;
     808:	ldr	r6, [pc, #372]	; (980 <_GLOBAL__sub_I_i2s+0x2e4>)
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
     80a:	ldr	r3, [pc, #376]	; (984 <_GLOBAL__sub_I_i2s+0x2e8>)
     80c:	ldrh	r5, [r6, #0]
#include "utility/dspinst.h"

class AudioSynthNoiseWhite : public AudioStream
{
public:
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
     80e:	ldr	r2, [pc, #376]	; (988 <_GLOBAL__sub_I_i2s+0x2ec>)
     810:	str.w	r2, [sl]
			}
			next_update = NULL;
     814:	movs	r4, #0
		level = 0;
		seed = 1 + instance_count++;
     816:	adds	r5, #1
     818:	add.w	r2, r3, #24
     81c:	mov	r0, r3
     81e:	movs	r1, #1

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     820:	ldr	r3, [pc, #360]	; (98c <_GLOBAL__sub_I_i2s+0x2f0>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
     822:	str.w	r4, [sl, #20]
			cpu_cycles = 0;
     826:	strh.w	r4, [sl, #4]
			cpu_cycles_max = 0;
     82a:	strh.w	r4, [sl, #6]
			numConnections = 0;
     82e:	strb.w	r4, [sl, #10]
     832:	strh	r5, [r6, #0]
     834:	str.w	r5, [sl, #28]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     838:	str	r3, [sp, #4]

class AudioSynthNoiseWhite : public AudioStream
{
public:
	AudioSynthNoiseWhite() : AudioStream(0, NULL) {
		level = 0;
     83a:	str.w	r4, [sl, #24]
     83e:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     842:	ldr	r3, [pc, #320]	; (984 <_GLOBAL__sub_I_i2s+0x2e8>)
     844:	ldr	r2, [pc, #328]	; (990 <_GLOBAL__sub_I_i2s+0x2f4>)
     846:	str	r2, [r3, #0]
     848:	ldr	r3, [pc, #328]	; (994 <_GLOBAL__sub_I_i2s+0x2f8>)
     84a:	ldr	r6, [pc, #292]	; (970 <_GLOBAL__sub_I_i2s+0x2d4>)
     84c:	add.w	r2, r3, #40	; 0x28
     850:	mov	r0, r3
		min_sample = 32767;
     852:	ldr	r3, [pc, #304]	; (984 <_GLOBAL__sub_I_i2s+0x2e8>)
     854:	movw	r1, #32767	; 0x7fff
     858:	strh	r1, [r3, #30]
		max_sample = -32768;
     85a:	mov.w	r5, #32768	; 0x8000
     85e:	movs	r1, #4
     860:	strh	r5, [r3, #32]
     862:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     866:	ldr	r3, [pc, #300]	; (994 <_GLOBAL__sub_I_i2s+0x2f8>)
     868:	ldr	r0, [pc, #300]	; (998 <_GLOBAL__sub_I_i2s+0x2fc>)
     86a:	str	r6, [r3, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     86c:	mov.w	r5, #65536	; 0x10000
     870:	mov	r2, r4
     872:	mov	r1, r4
     874:	str	r5, [r3, #24]
     876:	str	r5, [r3, #28]
     878:	str	r5, [r3, #32]
     87a:	str	r5, [r3, #36]	; 0x24
     87c:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     880:	ldr	r3, [pc, #276]	; (998 <_GLOBAL__sub_I_i2s+0x2fc>)
     882:	ldr	r0, [pc, #280]	; (99c <_GLOBAL__sub_I_i2s+0x300>)
     884:	str	r7, [r3, #0]
     886:	mov	r2, r4
     888:	mov	r1, r4
     88a:	strb	r4, [r3, #24]
     88c:	str	r4, [r3, #28]
     88e:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     892:	ldr	r3, [pc, #268]	; (9a0 <_GLOBAL__sub_I_i2s+0x304>)
     894:	add.w	r2, r3, #40	; 0x28
     898:	mov	r0, r3
     89a:	ldr	r3, [pc, #256]	; (99c <_GLOBAL__sub_I_i2s+0x300>)
     89c:	movs	r1, #4
     89e:	str	r7, [r3, #0]
     8a0:	strb	r4, [r3, #24]
     8a2:	str	r4, [r3, #28]
     8a4:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
#include "utility/dspinst.h"

class AudioEffectMultiply : public AudioStream
{
public:
	AudioEffectMultiply() : AudioStream(2, inputQueueArray) { }
     8a8:	ldr	r3, [pc, #248]	; (9a4 <_GLOBAL__sub_I_i2s+0x308>)
     8aa:	ldr	r7, [pc, #196]	; (970 <_GLOBAL__sub_I_i2s+0x2d4>)
     8ac:	add.w	r2, r3, #24
     8b0:	mov	r0, r3
     8b2:	ldr	r3, [pc, #236]	; (9a0 <_GLOBAL__sub_I_i2s+0x304>)
     8b4:	movs	r1, #2
     8b6:	str	r6, [r3, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     8b8:	str	r5, [r3, #24]
     8ba:	str	r5, [r3, #28]
     8bc:	str	r5, [r3, #32]
     8be:	str	r5, [r3, #36]	; 0x24
     8c0:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     8c4:	ldr	r3, [pc, #220]	; (9a4 <_GLOBAL__sub_I_i2s+0x308>)
     8c6:	ldr	r2, [pc, #224]	; (9a8 <_GLOBAL__sub_I_i2s+0x30c>)
     8c8:	str	r2, [r3, #0]
#include "AudioStream.h"

class AudioFilterStateVariable: public AudioStream
{
public:
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
     8ca:	ldr	r3, [pc, #224]	; (9ac <_GLOBAL__sub_I_i2s+0x310>)
     8cc:	ldr	r6, [pc, #224]	; (9b0 <_GLOBAL__sub_I_i2s+0x314>)
     8ce:	add.w	r2, r3, #52	; 0x34
     8d2:	mov	r0, r3
     8d4:	movs	r1, #2
     8d6:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
		frequency(1000);
		octaveControl(1.0); // default values
		resonance(0.707);
		state_inputprev = 0;
     8da:	ldr	r3, [pc, #208]	; (9ac <_GLOBAL__sub_I_i2s+0x310>)
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     8dc:	ldr	r0, [pc, #212]	; (9b4 <_GLOBAL__sub_I_i2s+0x318>)
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     8de:	ldr	r2, [pc, #216]	; (9b8 <_GLOBAL__sub_I_i2s+0x31c>)
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     8e0:	str	r0, [r3, #24]
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     8e2:	str	r2, [r3, #28]
public:
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
		frequency(1000);
		octaveControl(1.0); // default values
		resonance(0.707);
		state_inputprev = 0;
     8e4:	str	r4, [r3, #40]	; 0x28
		state_lowpass = 0;
     8e6:	str	r4, [r3, #44]	; 0x2c
		state_bandpass = 0;
     8e8:	str	r4, [r3, #48]	; 0x30

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     8ea:	ldr	r3, [pc, #208]	; (9bc <_GLOBAL__sub_I_i2s+0x320>)
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
     8ec:	ldr	r1, [pc, #208]	; (9c0 <_GLOBAL__sub_I_i2s+0x324>)
     8ee:	add.w	r2, r3, #40	; 0x28
		// filter's corner frequency is Fcenter * 2^(control * N)
		// where "control" ranges from -1.0 to +1.0
		// and "N" allows the frequency to change from 0 to 7 octaves
		if (n < 0.0) n = 0.0;
		else if (n > 6.9999) n = 6.9999;
		setting_octavemult = n * 4096.0;
     8f2:	ldr	r3, [pc, #184]	; (9ac <_GLOBAL__sub_I_i2s+0x310>)
     8f4:	mov.w	r0, #4096	; 0x1000
     8f8:	str	r0, [r3, #32]
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
     8fa:	str	r1, [r3, #36]	; 0x24
     8fc:	sub.w	r0, r2, #40	; 0x28
     900:	movs	r1, #4
#include "AudioStream.h"

class AudioFilterStateVariable: public AudioStream
{
public:
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
     902:	str	r6, [r3, #0]
     904:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     908:	ldr	r3, [sp, #4]
     90a:	ldr	r0, [pc, #176]	; (9bc <_GLOBAL__sub_I_i2s+0x320>)
			active = false;
     90c:	strb	r4, [r3, #8]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     90e:	str	r5, [r0, #24]
     910:	str	r5, [r0, #28]
     912:	str	r5, [r0, #32]
     914:	str	r5, [r0, #36]	; 0x24

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     916:	mov.w	lr, #1
     91a:	ldr	r5, [pc, #52]	; (950 <_GLOBAL__sub_I_i2s+0x2b4>)

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
     91c:	str	r7, [r0, #0]
     91e:	add.w	r1, r3, #3392	; 0xd40
     922:	str	r5, [r3, #0]
			active = false;
			destination_list = NULL;
     924:	mov	r2, r4
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
     926:	mov	r0, r4
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
     928:	str	r4, [r3, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
     92a:	strb.w	lr, [r3, #9]
     92e:	str	r1, [r3, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     930:	mov	r5, r3
     932:	b.n	936 <_GLOBAL__sub_I_i2s+0x29a>
     934:	ldr	r1, [r5, #16]
				inputQueue[i] = NULL;
     936:	str.w	r0, [r1, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
     93a:	ldrb	r1, [r3, #9]
     93c:	ldr	r4, [pc, #76]	; (98c <_GLOBAL__sub_I_i2s+0x2f0>)
     93e:	adds	r2, #1
     940:	cmp	r1, r2
     942:	bgt.n	934 <_GLOBAL__sub_I_i2s+0x298>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
     944:	ldr	r2, [pc, #16]	; (958 <_GLOBAL__sub_I_i2s+0x2bc>)
     946:	ldr	r1, [r2, #0]
     948:	cmp	r1, #0
     94a:	bne.n	9d2 <_GLOBAL__sub_I_i2s+0x336>
     94c:	b.n	dda <_GLOBAL__sub_I_i2s+0x73e>
     94e:	nop
     950:	.word	0x00006494
     954:	.word	0x1fffc7dc
     958:	.word	0x1fffcf00
     95c:	.word	0x00006500
     960:	.word	0x1fffc9ec
     964:	.word	0x000064cc
     968:	.word	0x000064f4
     96c:	.word	0x1fffca30
     970:	.word	0x000064b4
     974:	.word	0x00006524
     978:	.word	0x1fffb8cc
     97c:	.word	0x1fffc9f8
     980:	.word	0x1fffcb4c
     984:	.word	0x1fffc938
     988:	.word	0x0000650c
     98c:	.word	0x1fffba5c
     990:	.word	0x000064a8
     994:	.word	0x1fffc95c
     998:	.word	0x1fffb924
     99c:	.word	0x1fffc8c4
     9a0:	.word	0x1fffc994
     9a4:	.word	0x1fffc9cc
     9a8:	.word	0x000064c0
     9ac:	.word	0x1fffca7c
     9b0:	.word	0x000064e8
     9b4:	.word	0x048eb200
     9b8:	.word	0x048e72e8
     9bc:	.word	0x1fffb9fc
     9c0:	.word	0x5a85f980
     9c4:	.word	0x1fffb960
     9c8:	.word	0x1fffb988
     9cc:	.word	0x1fffb904
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
     9d0:	mov	r1, r2
     9d2:	ldr	r2, [r1, #20]
     9d4:	cmp	r2, #0
     9d6:	bne.n	9d0 <_GLOBAL__sub_I_i2s+0x334>
				p->next_update = this;
     9d8:	str	r3, [r1, #20]
			}
			next_update = NULL;
     9da:	movs	r4, #0
#endif

class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
     9dc:	ldr	r2, [pc, #736]	; (cc0 <_GLOBAL__sub_I_i2s+0x624>)
     9de:	str	r4, [r3, #20]
		activemask = 0;
		headindex = 0;
		tailindex = 0;
		maxblocks = 0;
		memset(queue, 0, sizeof(queue));
     9e0:	mov	r1, r4
			cpu_cycles = 0;
     9e2:	strh	r4, [r3, #4]
			cpu_cycles_max = 0;
     9e4:	strh	r4, [r3, #6]
			numConnections = 0;
     9e6:	strb	r4, [r3, #10]
#endif

class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
     9e8:	str	r2, [r3, #0]
		activemask = 0;
		headindex = 0;
		tailindex = 0;
		maxblocks = 0;
		memset(queue, 0, sizeof(queue));
     9ea:	ldr	r0, [pc, #728]	; (cc4 <_GLOBAL__sub_I_i2s+0x628>)

class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
		activemask = 0;
     9ec:	strb	r4, [r3, #24]
		headindex = 0;
		tailindex = 0;
		maxblocks = 0;
		memset(queue, 0, sizeof(queue));
     9ee:	mov.w	r2, #3328	; 0xd00
class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
		activemask = 0;
		headindex = 0;
     9f2:	strh	r4, [r3, #26]
		tailindex = 0;
     9f4:	strh	r4, [r3, #28]
		maxblocks = 0;
     9f6:	strh	r4, [r3, #30]
#endif

class AudioEffectDelay : public AudioStream
{
public:
	AudioEffectDelay() : AudioStream(1, inputQueueArray) {
     9f8:	str	r3, [sp, #4]
		activemask = 0;
		headindex = 0;
		tailindex = 0;
		maxblocks = 0;
		memset(queue, 0, sizeof(queue));
     9fa:	bl	606c <memset>
     9fe:	ldr	r3, [pc, #712]	; (cc8 <_GLOBAL__sub_I_i2s+0x62c>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a00:	ldr	r5, [pc, #712]	; (ccc <_GLOBAL__sub_I_i2s+0x630>)
     a02:	ldr	r7, [pc, #716]	; (cd0 <_GLOBAL__sub_I_i2s+0x634>)
     a04:	add.w	r2, r3, #52	; 0x34
     a08:	mov	r0, r3
     a0a:	movs	r1, #2
     a0c:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     a10:	ldr	r3, [pc, #692]	; (cc8 <_GLOBAL__sub_I_i2s+0x62c>)
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     a12:	ldr	r1, [pc, #704]	; (cd4 <_GLOBAL__sub_I_i2s+0x638>)
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     a14:	ldr	r2, [pc, #704]	; (cd8 <_GLOBAL__sub_I_i2s+0x63c>)
#include "AudioStream.h"

class AudioFilterStateVariable: public AudioStream
{
public:
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
     a16:	str	r6, [r3, #0]
		frequency(1000);
		octaveControl(1.0); // default values
		resonance(0.707);
		state_inputprev = 0;
     a18:	str	r4, [r3, #40]	; 0x28
		state_lowpass = 0;
     a1a:	str	r4, [r3, #44]	; 0x2c
		state_bandpass = 0;
     a1c:	str	r4, [r3, #48]	; 0x30
	}
	void frequency(float freq) {
		if (freq < 20.0) freq = 20.0;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5) freq = AUDIO_SAMPLE_RATE_EXACT/2.5;
		setting_fcenter = (freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     a1e:	str	r1, [r3, #24]
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654/(AUDIO_SAMPLE_RATE_EXACT*2.0)))
			* 2147483647.0;
     a20:	str	r2, [r3, #28]
     a22:	ldr	r3, [pc, #696]	; (cdc <_GLOBAL__sub_I_i2s+0x640>)
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
     a24:	ldr	r1, [pc, #696]	; (ce0 <_GLOBAL__sub_I_i2s+0x644>)
     a26:	ldr	r6, [pc, #700]	; (ce4 <_GLOBAL__sub_I_i2s+0x648>)
     a28:	add.w	r2, r3, #40	; 0x28
		// filter's corner frequency is Fcenter * 2^(control * N)
		// where "control" ranges from -1.0 to +1.0
		// and "N" allows the frequency to change from 0 to 7 octaves
		if (n < 0.0) n = 0.0;
		else if (n > 6.9999) n = 6.9999;
		setting_octavemult = n * 4096.0;
     a2c:	ldr	r3, [pc, #664]	; (cc8 <_GLOBAL__sub_I_i2s+0x62c>)
     a2e:	mov.w	r0, #4096	; 0x1000
     a32:	str	r0, [r3, #32]
	}
	void resonance(float q) {
		if (q < 0.7) q = 0.7;
		else if (q > 5.0) q = 5.0;
		// TODO: allow lower Q when frequency is lower
		setting_damp = (1.0 / q) * 1073741824.0;
     a34:	str	r1, [r3, #36]	; 0x24
     a36:	sub.w	r0, r2, #40	; 0x28
     a3a:	movs	r1, #4
     a3c:	bl	478 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
     a40:	ldr	r3, [pc, #664]	; (cdc <_GLOBAL__sub_I_i2s+0x640>)
     a42:	ldr	r2, [pc, #676]	; (ce8 <_GLOBAL__sub_I_i2s+0x64c>)
     a44:	str	r2, [r3, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
     a46:	mov.w	r2, #65536	; 0x10000
		{ isConnected = false;
		  connect(); }
     a4a:	mov	r0, r5
     a4c:	str	r2, [r3, #24]
     a4e:	str	r2, [r3, #28]
     a50:	str	r2, [r3, #32]
     a52:	str	r2, [r3, #36]	; 0x24
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a54:	ldr	r3, [pc, #660]	; (cec <_GLOBAL__sub_I_i2s+0x650>)
     a56:	str	r3, [r5, #4]
     a58:	strb	r4, [r5, #8]
     a5a:	str.w	r9, [r5]
     a5e:	strb	r4, [r5, #9]
     a60:	str	r4, [r5, #12]
		{ isConnected = false;
     a62:	strb	r4, [r5, #16]
		  connect(); }
     a64:	bl	51dc <AudioConnection::connect()>
AudioFilterStateVariable channel1FilterA; //xy=1045.6666564941406,280.9999809265137
AudioMixer4              childMixer1A;   //xy=1254.6666564941406,530.9999809265137
AudioEffectDelay         audioDelay1C1;  //xy=1470.6666564941406,857.9999809265137
AudioFilterStateVariable audioFilter1C2; //xy=1472.6666564941406,734.9999809265137
AudioMixer4              masterMixer;    //xy=1477.6666564941406,635.9999809265137
AudioConnection          patchCord1(dc1, 0, mixer1, 0);
     a68:	ldr	r2, [pc, #644]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     a6a:	ldr	r1, [pc, #648]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a6c:	ldr.w	r9, [pc, #732]	; d4c <_GLOBAL__sub_I_i2s+0x6b0>
     a70:	mov	r0, r5
     a72:	bl	5a78 <__aeabi_atexit>
     a76:	ldr	r3, [pc, #640]	; (cf8 <_GLOBAL__sub_I_i2s+0x65c>)
     a78:	str	r3, [r7, #4]
		{ isConnected = false;
		  connect(); }
     a7a:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a7c:	mov.w	r3, #1
     a80:	strb	r3, [r7, #9]
     a82:	strb	r4, [r7, #8]
     a84:	str.w	r8, [r7]
     a88:	str	r4, [r7, #12]
		{ isConnected = false;
     a8a:	strb	r4, [r7, #16]
		  connect(); }
     a8c:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord2(lfo, 0, channel1MixerB, 1);
     a90:	ldr	r2, [pc, #604]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     a92:	ldr	r1, [pc, #608]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     a94:	ldr	r5, [pc, #612]	; (cfc <_GLOBAL__sub_I_i2s+0x660>)
     a96:	mov	r0, r7
     a98:	bl	5a78 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     a9c:	ldr	r3, [pc, #588]	; (cec <_GLOBAL__sub_I_i2s+0x650>)
     a9e:	str	r3, [r6, #4]
		{ isConnected = false;
		  connect(); }
     aa0:	mov	r0, r6
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     aa2:	mov.w	r3, #1
     aa6:	strb	r3, [r6, #9]
     aa8:	strb	r4, [r6, #8]
     aaa:	str.w	r8, [r6]
     aae:	str	r4, [r6, #12]
		{ isConnected = false;
     ab0:	strb	r4, [r6, #16]
		  connect(); }
     ab2:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord3(lfo, 0, mixer1, 1);
     ab6:	ldr	r2, [pc, #568]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     ab8:	ldr	r1, [pc, #568]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     aba:	ldr.w	r8, [pc, #660]	; d50 <_GLOBAL__sub_I_i2s+0x6b4>
     abe:	ldr	r7, [pc, #576]	; (d00 <_GLOBAL__sub_I_i2s+0x664>)
     ac0:	mov	r0, r6
     ac2:	bl	5a78 <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     ac6:	ldr	r3, [pc, #548]	; (cec <_GLOBAL__sub_I_i2s+0x650>)
     ac8:	str	r3, [r5, #0]
		{ isConnected = false;
		  connect(); }
     aca:	mov	r0, r5
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     acc:	ldr	r3, [pc, #564]	; (d04 <_GLOBAL__sub_I_i2s+0x668>)
     ace:	str	r3, [r5, #4]
     ad0:	strb	r4, [r5, #8]
     ad2:	strb	r4, [r5, #9]
     ad4:	str	r4, [r5, #12]
		{ isConnected = false;
     ad6:	strb	r4, [r5, #16]
		  connect(); }
     ad8:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord4(mixer1, peak1);
     adc:	ldr	r2, [pc, #528]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     ade:	ldr	r1, [pc, #532]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ae0:	ldr	r6, [pc, #548]	; (d08 <_GLOBAL__sub_I_i2s+0x66c>)
     ae2:	mov	r0, r5
     ae4:	bl	5a78 <__aeabi_atexit>
     ae8:	ldr	r3, [pc, #544]	; (d0c <_GLOBAL__sub_I_i2s+0x670>)
     aea:	str.w	r3, [r9]
		{ isConnected = false;
		  connect(); }
     aee:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     af0:	ldr	r3, [pc, #540]	; (d10 <_GLOBAL__sub_I_i2s+0x674>)
     af2:	str.w	r3, [r9, #4]
     af6:	strb.w	r4, [r9, #8]
     afa:	strb.w	r4, [r9, #9]
     afe:	str.w	r4, [r9, #12]
		{ isConnected = false;
     b02:	strb.w	r4, [r9, #16]
		  connect(); }
     b06:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord5(channel1A, 0, channel1MixerA, 0);
     b0a:	ldr	r2, [pc, #484]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     b0c:	ldr	r1, [pc, #484]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b0e:	ldr	r5, [pc, #516]	; (d14 <_GLOBAL__sub_I_i2s+0x678>)
     b10:	mov	r0, r9
     b12:	bl	5a78 <__aeabi_atexit>
     b16:	ldr	r3, [pc, #512]	; (d18 <_GLOBAL__sub_I_i2s+0x67c>)
     b18:	str.w	r3, [r8]
     b1c:	ldr	r3, [pc, #496]	; (d10 <_GLOBAL__sub_I_i2s+0x674>)
     b1e:	str.w	r3, [r8, #4]
		{ isConnected = false;
		  connect(); }
     b22:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b24:	mov.w	r3, #1
     b28:	strb.w	r3, [r8, #9]
     b2c:	strb.w	r4, [r8, #8]
     b30:	str.w	r4, [r8, #12]
		{ isConnected = false;
     b34:	strb.w	r4, [r8, #16]
		  connect(); }
     b38:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord6(channel1B, 0, channel1MixerA, 1);
     b3c:	ldr	r1, [pc, #436]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     b3e:	ldr	r2, [pc, #432]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b40:	ldr.w	r9, [pc, #528]	; d54 <_GLOBAL__sub_I_i2s+0x6b8>
     b44:	mov	r0, r8
     b46:	bl	5a78 <__aeabi_atexit>
     b4a:	ldr	r3, [pc, #452]	; (d10 <_GLOBAL__sub_I_i2s+0x674>)
     b4c:	str	r3, [r7, #4]
     b4e:	movs	r2, #2
		{ isConnected = false;
		  connect(); }
     b50:	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b52:	strb	r4, [r7, #8]
     b54:	str.w	sl, [r7]
     b58:	str	r4, [r7, #12]
		{ isConnected = false;
     b5a:	strb	r4, [r7, #16]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b5c:	strb	r2, [r7, #9]
		{ isConnected = false;
		  connect(); }
     b5e:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord7(channel1C, 0, channel1MixerA, 2);
     b62:	ldr	r2, [pc, #396]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     b64:	ldr	r1, [pc, #396]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b66:	ldr.w	sl, [pc, #496]	; d58 <_GLOBAL__sub_I_i2s+0x6bc>
     b6a:	ldr.w	r8, [pc, #496]	; d5c <_GLOBAL__sub_I_i2s+0x6c0>
     b6e:	mov	r0, r7
     b70:	bl	5a78 <__aeabi_atexit>
     b74:	ldr	r3, [pc, #408]	; (d10 <_GLOBAL__sub_I_i2s+0x674>)
     b76:	str	r3, [r6, #0]
		{ isConnected = false;
		  connect(); }
     b78:	mov	r0, r6
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b7a:	ldr	r3, [pc, #416]	; (d1c <_GLOBAL__sub_I_i2s+0x680>)
     b7c:	str	r3, [r6, #4]
     b7e:	strb	r4, [r6, #8]
     b80:	strb	r4, [r6, #9]
     b82:	str	r4, [r6, #12]
		{ isConnected = false;
     b84:	strb	r4, [r6, #16]
		  connect(); }
     b86:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord8(channel1MixerA, 0, channel1Combine, 0);
     b8a:	ldr	r2, [pc, #356]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     b8c:	ldr	r1, [pc, #356]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     b8e:	ldr	r7, [pc, #400]	; (d20 <_GLOBAL__sub_I_i2s+0x684>)
     b90:	mov	r0, r6
     b92:	bl	5a78 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     b96:	ldr	r3, [pc, #396]	; (d24 <_GLOBAL__sub_I_i2s+0x688>)
     b98:	str	r3, [r5, #0]
     b9a:	ldr	r3, [pc, #384]	; (d1c <_GLOBAL__sub_I_i2s+0x680>)
     b9c:	str	r3, [r5, #4]
		{ isConnected = false;
		  connect(); }
     b9e:	mov	r0, r5
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     ba0:	mov.w	r3, #1
     ba4:	strb	r3, [r5, #9]
     ba6:	strb	r4, [r5, #8]
     ba8:	str	r4, [r5, #12]
		{ isConnected = false;
     baa:	strb	r4, [r5, #16]
		  connect(); }
     bac:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord9(channel1Env, 0, channel1Combine, 1);
     bb0:	ldr	r1, [pc, #320]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     bb2:	ldr	r2, [pc, #316]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     bb4:	ldr	r6, [pc, #368]	; (d28 <_GLOBAL__sub_I_i2s+0x68c>)
     bb6:	mov	r0, r5
     bb8:	bl	5a78 <__aeabi_atexit>
		{ isConnected = false;
		  connect(); }
     bbc:	ldr	r0, [pc, #364]	; (d2c <_GLOBAL__sub_I_i2s+0x690>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     bbe:	ldr	r2, [pc, #368]	; (d30 <_GLOBAL__sub_I_i2s+0x694>)
     bc0:	str	r2, [r0, #0]
     bc2:	ldr	r2, [pc, #308]	; (cf8 <_GLOBAL__sub_I_i2s+0x65c>)
     bc4:	strb	r4, [r0, #8]
     bc6:	str	r2, [r0, #4]
     bc8:	strb	r4, [r0, #9]
     bca:	str	r4, [r0, #12]
		{ isConnected = false;
     bcc:	strb	r4, [r0, #16]
		  connect(); }
     bce:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord10(channel1EnvFilter, 0, channel1MixerB, 0);
     bd2:	ldr	r1, [pc, #288]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     bd4:	ldr	r2, [pc, #280]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     bd6:	ldr	r0, [pc, #340]	; (d2c <_GLOBAL__sub_I_i2s+0x690>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     bd8:	ldr	r5, [pc, #344]	; (d34 <_GLOBAL__sub_I_i2s+0x698>)
     bda:	bl	5a78 <__aeabi_atexit>
		{ isConnected = false;
		  connect(); }
     bde:	ldr	r0, [pc, #344]	; (d38 <_GLOBAL__sub_I_i2s+0x69c>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     be0:	ldr	r2, [pc, #276]	; (cf8 <_GLOBAL__sub_I_i2s+0x65c>)
     be2:	str	r2, [r0, #0]
     be4:	ldr	r2, [pc, #340]	; (d3c <_GLOBAL__sub_I_i2s+0x6a0>)
     be6:	str	r2, [r0, #4]
     be8:	mov.w	r2, #1
     bec:	strb	r4, [r0, #8]
     bee:	strb	r2, [r0, #9]
     bf0:	str	r4, [r0, #12]
		{ isConnected = false;
     bf2:	strb	r4, [r0, #16]
		  connect(); }
     bf4:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord11(channel1MixerB, 0, channel1FilterA, 1);
     bf8:	ldr	r1, [pc, #248]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     bfa:	ldr	r2, [pc, #244]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     bfc:	ldr	r0, [pc, #312]	; (d38 <_GLOBAL__sub_I_i2s+0x69c>)
     bfe:	bl	5a78 <__aeabi_atexit>
     c02:	ldr	r0, [pc, #316]	; (d40 <_GLOBAL__sub_I_i2s+0x6a4>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c04:	ldr	r2, [pc, #276]	; (d1c <_GLOBAL__sub_I_i2s+0x680>)
     c06:	str	r2, [r0, #0]
     c08:	ldr	r2, [pc, #304]	; (d3c <_GLOBAL__sub_I_i2s+0x6a0>)
     c0a:	strb	r4, [r0, #8]
     c0c:	str	r2, [r0, #4]
     c0e:	strb	r4, [r0, #9]
     c10:	str	r4, [r0, #12]
		{ isConnected = false;
     c12:	strb	r4, [r0, #16]
		  connect(); }
     c14:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord12(channel1Combine, 0, channel1FilterA, 0);
     c18:	ldr	r1, [pc, #216]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     c1a:	ldr	r2, [pc, #212]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     c1c:	ldr	r0, [pc, #288]	; (d40 <_GLOBAL__sub_I_i2s+0x6a4>)
     c1e:	bl	5a78 <__aeabi_atexit>
     c22:	ldr	r0, [pc, #288]	; (d44 <_GLOBAL__sub_I_i2s+0x6a8>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c24:	ldr	r2, [pc, #276]	; (d3c <_GLOBAL__sub_I_i2s+0x6a0>)
     c26:	str	r2, [r0, #0]
     c28:	ldr	r2, [pc, #284]	; (d48 <_GLOBAL__sub_I_i2s+0x6ac>)
     c2a:	strb	r4, [r0, #8]
     c2c:	str	r2, [r0, #4]
     c2e:	strb	r4, [r0, #9]
     c30:	str	r4, [r0, #12]
		{ isConnected = false;
     c32:	strb	r4, [r0, #16]
		  connect(); }
     c34:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord13(channel1FilterA, 0, childMixer1A, 0);
     c38:	ldr	r2, [pc, #180]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     c3a:	ldr	r1, [pc, #184]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     c3c:	ldr	r0, [pc, #260]	; (d44 <_GLOBAL__sub_I_i2s+0x6a8>)
     c3e:	bl	5a78 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c42:	ldr	r3, [pc, #152]	; (cdc <_GLOBAL__sub_I_i2s+0x640>)
     c44:	str.w	r3, [sl, #4]
		{ isConnected = false;
		  connect(); }
     c48:	mov	r0, sl
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c4a:	ldr	r3, [pc, #252]	; (d48 <_GLOBAL__sub_I_i2s+0x6ac>)
     c4c:	str.w	r3, [sl]
     c50:	strb.w	r4, [sl, #8]
     c54:	strb.w	r4, [sl, #9]
     c58:	str.w	r4, [sl, #12]
		{ isConnected = false;
     c5c:	strb.w	r4, [sl, #16]
		  connect(); }
     c60:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord14(childMixer1A, 0, masterMixer, 0);
     c64:	ldr	r2, [pc, #136]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     c66:	ldr	r1, [pc, #140]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     c68:	mov	r0, sl
     c6a:	bl	5a78 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c6e:	ldr	r3, [pc, #88]	; (cc8 <_GLOBAL__sub_I_i2s+0x62c>)
     c70:	str.w	r3, [r9, #4]
		{ isConnected = false;
		  connect(); }
     c74:	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c76:	ldr	r3, [sp, #4]
     c78:	str.w	r3, [r9]
     c7c:	strb.w	r4, [r9, #8]
     c80:	strb.w	r4, [r9, #9]
     c84:	str.w	r4, [r9, #12]
		{ isConnected = false;
     c88:	strb.w	r4, [r9, #16]
		  connect(); }
     c8c:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord15(audioDelay1C1, 0, audioFilter1C2, 0);
     c90:	ldr	r1, [pc, #96]	; (cf4 <_GLOBAL__sub_I_i2s+0x658>)
     c92:	ldr	r2, [pc, #92]	; (cf0 <_GLOBAL__sub_I_i2s+0x654>)
     c94:	mov	r0, r9
     c96:	bl	5a78 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     c9a:	ldr	r3, [pc, #44]	; (cc8 <_GLOBAL__sub_I_i2s+0x62c>)
     c9c:	str.w	r3, [r8]
     ca0:	movs	r2, #3
     ca2:	ldr	r3, [pc, #56]	; (cdc <_GLOBAL__sub_I_i2s+0x640>)
     ca4:	str.w	r3, [r8, #4]
		{ isConnected = false;
		  connect(); }
     ca8:	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     caa:	strb.w	r2, [r8, #9]
     cae:	strb.w	r4, [r8, #8]
     cb2:	str.w	r4, [r8, #12]
		{ isConnected = false;
     cb6:	strb.w	r4, [r8, #16]
		  connect(); }
     cba:	bl	51dc <AudioConnection::connect()>
     cbe:	b.n	d60 <_GLOBAL__sub_I_i2s+0x6c4>
     cc0:	.word	0x00006518
     cc4:	.word	0x1fffba9c
     cc8:	.word	0x1fffc824
     ccc:	.word	0x1fffb9c0
     cd0:	.word	0x1fffb9d4
     cd4:	.word	0x048eb200
     cd8:	.word	0x048e72e8
     cdc:	.word	0x1fffc8ec
     ce0:	.word	0x5a85f980
     ce4:	.word	0x1fffb9e8
     ce8:	.word	0x000064b4
     cec:	.word	0x1fffca30
     cf0:	.word	0x1fffad30
     cf4:	.word	0x0000046d
     cf8:	.word	0x1fffc994
     cfc:	.word	0x1fffc924
     d00:	.word	0x1fffc8b0
     d04:	.word	0x1fffc938
     d08:	.word	0x1fffc7a0
     d0c:	.word	0x1fffb8cc
     d10:	.word	0x1fffc95c
     d14:	.word	0x1fffc7b4
     d18:	.word	0x1fffc9f8
     d1c:	.word	0x1fffc9cc
     d20:	.word	0x1fffc874
     d24:	.word	0x1fffb924
     d28:	.word	0x1fffc888
     d2c:	.word	0x1fffc7c8
     d30:	.word	0x1fffc8c4
     d34:	.word	0x1fffc89c
     d38:	.word	0x1fffb8b8
     d3c:	.word	0x1fffca7c
     d40:	.word	0x1fffc7fc
     d44:	.word	0x1fffc810
     d48:	.word	0x1fffb9fc
     d4c:	.word	0x1fffba34
     d50:	.word	0x1fffba48
     d54:	.word	0x1fffb94c
     d58:	.word	0x1fffca68
     d5c:	.word	0x1fffc860
AudioConnection          patchCord16(audioFilter1C2, 0, masterMixer, 3);
     d60:	ldr	r2, [pc, #124]	; (de0 <_GLOBAL__sub_I_i2s+0x744>)
     d62:	ldr	r1, [pc, #128]	; (de4 <_GLOBAL__sub_I_i2s+0x748>)
     d64:	mov	r0, r8
     d66:	bl	5a78 <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     d6a:	ldr	r3, [pc, #124]	; (de8 <_GLOBAL__sub_I_i2s+0x74c>)
     d6c:	str	r3, [r7, #0]
		{ isConnected = false;
		  connect(); }
     d6e:	mov	r0, r7
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
     d70:	ldr	r3, [sp, #4]
     d72:	str	r3, [r7, #4]
     d74:	strb	r4, [r7, #8]
     d76:	strb	r4, [r7, #9]
     d78:	str	r4, [r7, #12]
		{ isConnected = false;
     d7a:	strb	r4, [r7, #16]
		  connect(); }
     d7c:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord17(masterMixer, audioDelay1C1);
     d80:	ldr	r2, [pc, #92]	; (de0 <_GLOBAL__sub_I_i2s+0x744>)
     d82:	ldr	r1, [pc, #96]	; (de4 <_GLOBAL__sub_I_i2s+0x748>)
     d84:	mov	r0, r7
     d86:	bl	5a78 <__aeabi_atexit>
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d8a:	ldr	r3, [pc, #92]	; (de8 <_GLOBAL__sub_I_i2s+0x74c>)
     d8c:	strb	r4, [r6, #8]
		{ isConnected = false;
		  connect(); }
     d8e:	mov	r0, r6
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     d90:	stmia.w	r6, {r3, fp}
     d94:	strb	r4, [r6, #9]
     d96:	str	r4, [r6, #12]
		{ isConnected = false;
     d98:	strb	r4, [r6, #16]
		  connect(); }
     d9a:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord18(masterMixer, 0, i2s, 0);
     d9e:	ldr	r2, [pc, #64]	; (de0 <_GLOBAL__sub_I_i2s+0x744>)
     da0:	ldr	r1, [pc, #64]	; (de4 <_GLOBAL__sub_I_i2s+0x748>)
     da2:	mov	r0, r6
     da4:	bl	5a78 <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     da8:	mov.w	r3, #1
     dac:	strb	r3, [r5, #9]
     dae:	ldr	r3, [pc, #56]	; (de8 <_GLOBAL__sub_I_i2s+0x74c>)
     db0:	strb	r4, [r5, #8]
		{ isConnected = false;
		  connect(); }
     db2:	mov	r0, r5
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
     db4:	stmia.w	r5, {r3, fp}
     db8:	str	r4, [r5, #12]
		{ isConnected = false;
     dba:	strb	r4, [r5, #16]
		  connect(); }
     dbc:	bl	51dc <AudioConnection::connect()>
AudioConnection          patchCord19(masterMixer, 0, i2s, 1);
     dc0:	ldr	r2, [pc, #28]	; (de0 <_GLOBAL__sub_I_i2s+0x744>)
     dc2:	ldr	r1, [pc, #32]	; (de4 <_GLOBAL__sub_I_i2s+0x748>)
     dc4:	mov	r0, r5
    channel1A.amplitude(1);
    channel1B.frequency(((noteFreq[keyIndex][keyIndex]/4*vcoTwoOct) * deTune) * deTuneLfo);
    channel1A.amplitude(1);

    // delay(100);
     dc6:	add	sp, #12
     dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
AudioConnection          patchCord14(childMixer1A, 0, masterMixer, 0);
AudioConnection          patchCord15(audioDelay1C1, 0, audioFilter1C2, 0);
AudioConnection          patchCord16(audioFilter1C2, 0, masterMixer, 3);
AudioConnection          patchCord17(masterMixer, audioDelay1C1);
AudioConnection          patchCord18(masterMixer, 0, i2s, 0);
AudioConnection          patchCord19(masterMixer, 0, i2s, 1);
     dcc:	b.w	5a78 <__aeabi_atexit>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
     dd0:	str	r0, [r3, #0]
     dd2:	b.n	6f0 <_GLOBAL__sub_I_i2s+0x54>
     dd4:	str.w	sl, [r3]
     dd8:	b.n	808 <_GLOBAL__sub_I_i2s+0x16c>
     dda:	str	r4, [r2, #0]
     ddc:	b.n	9da <_GLOBAL__sub_I_i2s+0x33e>
     dde:	nop
     de0:	.word	0x1fffad30
     de4:	.word	0x0000046d
     de8:	.word	0x1fffc8ec

00000dec <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     dec:	push	{r4, lr}
     dee:	mov	r4, r0
		release();
     df0:	bl	4c08 <DMAChannel::release()>
	}
     df4:	mov	r0, r4
     df6:	pop	{r4, pc}

00000df8 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE>:
uint32_t  AudioOutputPWM::block_offset = 0;
bool AudioOutputPWM::update_responsibility = false;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
     df8:	ldr	r2, [pc, #8]	; (e04 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0xc>)
     dfa:	ldr	r1, [pc, #12]	; (e08 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x10>)
     dfc:	ldr	r0, [pc, #12]	; (e0c <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x14>)
     dfe:	b.w	5a78 <__aeabi_atexit>
     e02:	nop
     e04:	.word	0x1fffad30
     e08:	.word	0x00000ded
     e0c:	.word	0x1fffcab8

00000e10 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
	DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
	DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
     e10:	ldr	r2, [pc, #8]	; (e1c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
     e12:	ldr	r1, [pc, #12]	; (e20 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
     e14:	ldr	r0, [pc, #12]	; (e24 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
     e16:	b.w	5a78 <__aeabi_atexit>
     e1a:	nop
     e1c:	.word	0x1fffad30
     e20:	.word	0x00000ded
     e24:	.word	0x1fffcac0

00000e28 <AudioAnalyzePeak::update()>:

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
     e28:	push	{r4, r5, r6, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
     e2a:	movs	r1, #0

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
     e2c:	mov	r6, r0
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
     e2e:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
     e32:	cbz	r0, e66 <AudioAnalyzePeak::update()+0x3e>
		return;
	}
	p = block->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	min = min_sample;
     e34:	ldrsh.w	r4, [r6, #30]
	max = max_sample;
     e38:	ldrsh.w	r1, [r6, #32]

	block = receiveReadOnly();
	if (!block) {
		return;
	}
	p = block->data;
     e3c:	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
     e3e:	add.w	r5, r0, #260	; 0x104
	max = max_sample;
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
     e42:	ldrsh.w	r2, [r3], #2
     e46:	cmp	r4, r2
     e48:	it	ge
     e4a:	movge	r4, r2
     e4c:	cmp	r1, r2
     e4e:	it	lt
     e50:	movlt	r1, r2
		if (d>max) max=d;
	} while (p < end);
     e52:	cmp	r5, r3
     e54:	bhi.n	e42 <AudioAnalyzePeak::update()+0x1a>
	min_sample = min;
	max_sample = max;
	new_output = true;
     e56:	movs	r3, #1
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
     e58:	strh	r4, [r6, #30]
	max_sample = max;
     e5a:	strh	r1, [r6, #32]
	new_output = true;
     e5c:	strb	r3, [r6, #28]
	release(block);
}
     e5e:	ldmia.w	sp!, {r4, r5, r6, lr}
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
	max_sample = max;
	new_output = true;
	release(block);
     e62:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
     e66:	pop	{r4, r5, r6, pc}

00000e68 <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
     e68:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
     e6c:	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
     e70:	mov	r6, r0
     e72:	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
     e76:	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
     e78:	mov	r1, r8
     e7a:	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
     e7c:	cmp	r7, #0
     e7e:	beq.n	f20 <AudioMixer4::update()+0xb8>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
     e80:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
     e84:	cbz	r0, ec4 <AudioMixer4::update()+0x5c>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
     e86:	ldr	r4, [r5, #0]
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
     e88:	cmp.w	r4, #65536	; 0x10000
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
     e8c:	add.w	r1, r7, #4
     e90:	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
     e94:	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
     e98:	beq.n	eea <AudioMixer4::update()+0x82>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
     e9a:	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     e9e:	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     ea2:	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     ea6:	ssat	r2, #16, r3
     eaa:	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     eae:	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
     eb2:	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     eb4:	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
     eb8:	str.w	r3, [r1], #4
		} while (dst < end);
     ebc:	cmp	ip, r1
     ebe:	bhi.n	e9a <AudioMixer4::update()+0x32>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
     ec0:	bl	50f8 <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
     ec4:	add.w	r8, r8, #1
     ec8:	cmp.w	r8, #4
     ecc:	add.w	r5, r5, #4
     ed0:	bne.n	e78 <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
     ed2:	cmp	r7, #0
     ed4:	beq.n	f58 <AudioMixer4::update()+0xf0>
		transmit(out);
     ed6:	mov	r0, r6
     ed8:	mov	r1, r7
     eda:	movs	r2, #0
     edc:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
     ee0:	mov	r0, r7
	}
}
     ee2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
     ee6:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
     eea:	add.w	r1, r7, #12
     eee:	add.w	r4, r0, #12
     ef2:	ldr.w	r3, [r1, #-8]
     ef6:	ldr.w	r2, [r4, #-8]
     efa:	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
     efe:	str.w	r3, [r1, #-8]
     f02:	ldr.w	r2, [r4, #-4]
     f06:	ldr.w	r3, [r1, #-4]
     f0a:	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
     f0e:	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
     f10:	str.w	r3, [r1, #-4]
     f14:	add.w	r4, r4, #8
		} while (dst < end);
     f18:	add.w	r1, r1, #8
     f1c:	bhi.n	ef2 <AudioMixer4::update()+0x8a>
     f1e:	b.n	ec0 <AudioMixer4::update()+0x58>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
     f20:	bl	5198 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
     f24:	mov	r7, r0
     f26:	cmp	r0, #0
     f28:	beq.n	ec4 <AudioMixer4::update()+0x5c>
				int32_t mult = multiplier[channel];
     f2a:	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
     f2c:	cmp.w	r0, #65536	; 0x10000
     f30:	beq.n	ec4 <AudioMixer4::update()+0x5c>
     f32:	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
     f34:	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
     f38:	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     f3a:	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     f3e:	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     f42:	ssat	r2, #16, r2
     f46:	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     f4a:	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
     f4e:	str.w	r3, [r1], #4
	} while (p < end);
     f52:	cmp	r4, r1
     f54:	bhi.n	f38 <AudioMixer4::update()+0xd0>
     f56:	b.n	ec4 <AudioMixer4::update()+0x5c>
     f58:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00000f5c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
     f5c:	ldr	r2, [pc, #8]	; (f68 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
     f5e:	ldr	r1, [pc, #12]	; (f6c <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
     f60:	ldr	r0, [pc, #12]	; (f70 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
     f62:	b.w	5a78 <__aeabi_atexit>
     f66:	nop
     f68:	.word	0x1fffad30
     f6c:	.word	0x00000ded
     f70:	.word	0x1fffcac8

00000f74 <AudioEffectMultiply::update()>:

#include <Arduino.h>
#include "effect_multiply.h"

void AudioEffectMultiply::update(void)
{
     f74:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *blocka, *blockb;
	uint32_t *pa, *pb, *end;
	uint32_t a12, a34; //, a56, a78;
	uint32_t b12, b34; //, b56, b78;

	blocka = receiveWritable(0);
     f78:	movs	r1, #0

#include <Arduino.h>
#include "effect_multiply.h"

void AudioEffectMultiply::update(void)
{
     f7a:	mov	r5, r0
	audio_block_t *blocka, *blockb;
	uint32_t *pa, *pb, *end;
	uint32_t a12, a34; //, a56, a78;
	uint32_t b12, b34; //, b56, b78;

	blocka = receiveWritable(0);
     f7c:	bl	5198 <AudioStream::receiveWritable(unsigned int)>
	blockb = receiveReadOnly(1);
     f80:	movs	r1, #1
	audio_block_t *blocka, *blockb;
	uint32_t *pa, *pb, *end;
	uint32_t a12, a34; //, a56, a78;
	uint32_t b12, b34; //, b56, b78;

	blocka = receiveWritable(0);
     f82:	mov	r4, r0
	blockb = receiveReadOnly(1);
     f84:	mov	r0, r5
     f86:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
     f8a:	mov	r6, r0
	if (!blocka) {
     f8c:	cbz	r4, ffe <AudioEffectMultiply::update()+0x8a>
		if (blockb) release(blockb);
		return;
	}
	if (!blockb) {
     f8e:	cbz	r0, 1006 <AudioEffectMultiply::update()+0x92>
		release(blocka);
		return;
	}
	pa = (uint32_t *)(blocka->data);
	pb = (uint32_t *)(blockb->data);
	end = pa + AUDIO_BLOCK_SAMPLES/2;
     f90:	add.w	lr, r4, #260	; 0x104
	}
	if (!blockb) {
		release(blocka);
		return;
	}
	pa = (uint32_t *)(blocka->data);
     f94:	adds	r3, r4, #4
	pb = (uint32_t *)(blockb->data);
	end = pa + AUDIO_BLOCK_SAMPLES/2;
	while (pa < end) {
     f96:	cmp	lr, r3
     f98:	bls.n	fe4 <AudioEffectMultiply::update()+0x70>
     f9a:	adds	r0, #12
     f9c:	add.w	r1, r4, #12
		a12 = *pa;
		a34 = *(pa+1);
     fa0:	ldmdb	r1, {r2, r3}
		//a56 = *(pa+2); // 8 samples/loop should work, but crashes.
		//a78 = *(pa+3); // why?!  maybe a compiler bug??
		b12 = *pb++;
     fa4:	ldr.w	r9, [r0, #-8]
		b34 = *pb++;
     fa8:	ldr.w	r8, [r0, #-4]
// computes ((a[31:16] * b[31:16])
static inline int32_t multiply_16tx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smultt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     fac:	smultt	ip, r2, r9
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     fb0:	ssat	ip, #16, ip, asr #15
// computes ((a[15:0] * b[15:0])
static inline int32_t multiply_16bx16b(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16bx16b(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smulbb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     fb4:	smulbb	r2, r2, r9
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     fb8:	ssat	r2, #16, r2, asr #15
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     fbc:	pkhbt	r2, r2, ip, lsl #16
// computes ((a[31:16] * b[31:16])
static inline int32_t multiply_16tx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16tx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smultt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     fc0:	smultt	ip, r3, r8
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     fc4:	ssat	ip, #16, ip, asr #15
// computes ((a[15:0] * b[15:0])
static inline int32_t multiply_16bx16b(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16bx16b(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smulbb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
     fc8:	smulbb	r3, r3, r8
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     fcc:	ssat	r3, #16, r3, asr #15
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
     fd0:	pkhbt	r3, r3, ip, lsl #16
		return;
	}
	pa = (uint32_t *)(blocka->data);
	pb = (uint32_t *)(blockb->data);
	end = pa + AUDIO_BLOCK_SAMPLES/2;
	while (pa < end) {
     fd4:	cmp	lr, r1
		//	signed_saturate_rshift(multiply_16bx16b(a56, b56), 16, 15));
		//a78 = pack_16b_16b(
		//	signed_saturate_rshift(multiply_16tx16t(a78, b78), 16, 15), 
		//	signed_saturate_rshift(multiply_16bx16b(a78, b78), 16, 15));
		*pa++ = a12;
		*pa++ = a34;
     fd6:	stmdb	r1, {r2, r3}
     fda:	add.w	r0, r0, #8
		return;
	}
	pa = (uint32_t *)(blocka->data);
	pb = (uint32_t *)(blockb->data);
	end = pa + AUDIO_BLOCK_SAMPLES/2;
	while (pa < end) {
     fde:	add.w	r1, r1, #8
     fe2:	bhi.n	fa0 <AudioEffectMultiply::update()+0x2c>
		*pa++ = a12;
		*pa++ = a34;
		//*pa++ = a56;
		//*pa++ = a78;
	}
	transmit(blocka);
     fe4:	mov	r0, r5
     fe6:	movs	r2, #0
     fe8:	mov	r1, r4
     fea:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(blocka);
     fee:	mov	r0, r4
     ff0:	bl	50f8 <AudioStream::release(audio_block_struct*)>
	release(blockb);
     ff4:	mov	r0, r6
	block = receiveReadOnly(0);
	if (block) release(block);
	block = receiveReadOnly(1);
	if (block) release(block);
#endif
}
     ff6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		//*pa++ = a56;
		//*pa++ = a78;
	}
	transmit(blocka);
	release(blocka);
	release(blockb);
     ffa:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
	uint32_t b12, b34; //, b56, b78;

	blocka = receiveWritable(0);
	blockb = receiveReadOnly(1);
	if (!blocka) {
		if (blockb) release(blockb);
     ffe:	cmp	r0, #0
    1000:	bne.n	ff6 <AudioEffectMultiply::update()+0x82>
    1002:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return;
	}
	if (!blockb) {
		release(blocka);
    1006:	mov	r0, r4
	block = receiveReadOnly(0);
	if (block) release(block);
	block = receiveReadOnly(1);
	if (block) release(block);
#endif
}
    1008:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!blocka) {
		if (blockb) release(blockb);
		return;
	}
	if (!blockb) {
		release(blocka);
    100c:	b.w	50f8 <AudioStream::release(audio_block_struct*)>

00001010 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    1010:	ldr	r2, [pc, #8]	; (101c <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    1012:	ldr	r1, [pc, #12]	; (1020 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    1014:	ldr	r0, [pc, #12]	; (1024 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    1016:	b.w	5a78 <__aeabi_atexit>
    101a:	nop
    101c:	.word	0x1fffad30
    1020:	.word	0x00000ded
    1024:	.word	0x1fffcad0

00001028 <AudioControlSGTL5000::disable()>:
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
    1028:	movs	r0, #0
    102a:	bx	lr

0000102c <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
    102c:	movs	r0, #0
    102e:	bx	lr

00001030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1030:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    1032:	ldr	r4, [pc, #80]	; (1084 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
    1034:	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    1036:	cmp	r1, #36	; 0x24
    1038:	it	eq
    103a:	strheq	r2, [r0, #6]
    103c:	lsls	r3, r3, #1
		transmitting = 1;
    103e:	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    1040:	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1042:	mov	r0, r4
    1044:	ubfx	r1, r1, #8, #8
    1048:	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    104a:	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    104e:	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    1052:	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    1056:	bl	2098 <TwoWire::write(unsigned char)>
    105a:	uxtb	r1, r6
    105c:	mov	r0, r4
    105e:	bl	2098 <TwoWire::write(unsigned char)>
    1062:	ubfx	r1, r7, #8, #8
    1066:	mov	r0, r4
    1068:	bl	2098 <TwoWire::write(unsigned char)>
    106c:	uxtb	r1, r7
    106e:	mov	r0, r4
    1070:	bl	2098 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    1074:	mov	r1, r5
    1076:	mov	r0, r4
    1078:	bl	2370 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    107c:	clz	r0, r0
    1080:	lsrs	r0, r0, #5
    1082:	pop	{r3, r4, r5, r6, r7, pc}
    1084:	.word	0x1fffae80

00001088 <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    1088:	push	{r3, r4, r5, lr}
	muted = true;
    108a:	movs	r5, #1
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    108c:	mov	r4, r0
	muted = true;
    108e:	strb	r5, [r0, #4]
	Wire.begin();
    1090:	ldr	r0, [pc, #204]	; (1160 <AudioControlSGTL5000::enable()+0xd8>)
    1092:	bl	20c0 <TwoWire::begin()>
	delay(5);
    1096:	movs	r0, #5
    1098:	bl	3b1c <delay>
	//Serial.print("chip ID = ");
	//delay(5);
	//unsigned int n = read(CHIP_ID);
	//Serial.println(n, HEX);

	write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    109c:	mov	r0, r4
    109e:	movw	r2, #16480	; 0x4060
    10a2:	movs	r1, #48	; 0x30
    10a4:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    10a8:	mov	r0, r4
    10aa:	movs	r2, #108	; 0x6c
    10ac:	movs	r1, #38	; 0x26
    10ae:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    10b2:	mov	r0, r4
    10b4:	mov.w	r2, #498	; 0x1f2
    10b8:	movs	r1, #40	; 0x28
    10ba:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    10be:	mov	r0, r4
    10c0:	movw	r2, #3874	; 0xf22
    10c4:	movs	r1, #44	; 0x2c
    10c6:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    10ca:	mov	r0, r4
    10cc:	movw	r2, #17478	; 0x4446
    10d0:	movs	r1, #60	; 0x3c
    10d2:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    10d6:	mov	r0, r4
    10d8:	movw	r2, #311	; 0x137
    10dc:	movs	r1, #36	; 0x24
    10de:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    10e2:	mov	r0, r4
    10e4:	movw	r2, #16639	; 0x40ff
    10e8:	movs	r1, #48	; 0x30
    10ea:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    10ee:	movs	r2, #115	; 0x73
    10f0:	movs	r1, #2
    10f2:	mov	r0, r4
    10f4:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    10f8:	mov.w	r0, #400	; 0x190
    10fc:	bl	3b1c <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    1100:	mov	r0, r4
    1102:	movw	r2, #7453	; 0x1d1d
    1106:	movs	r1, #46	; 0x2e
    1108:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    110c:	movs	r2, #4
    110e:	mov	r1, r2
    1110:	mov	r0, r4
    1112:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_I2S_CTRL, 0x0130); // SCLK=32*Fs, 16bit, I2S format
    1116:	mov	r0, r4
    1118:	mov.w	r2, #304	; 0x130
    111c:	movs	r1, #6
    111e:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	// default signal routing is ok?
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    1122:	mov	r0, r4
    1124:	movs	r2, #16
    1126:	movs	r1, #10
    1128:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    112c:	mov	r0, r4
    112e:	movs	r2, #0
    1130:	movs	r1, #14
    1132:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    1136:	mov	r0, r4
    1138:	movw	r2, #15420	; 0x3c3c
    113c:	movs	r1, #16
    113e:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    1142:	mov	r0, r4
    1144:	movw	r2, #32639	; 0x7f7f
    1148:	movs	r1, #34	; 0x22
    114a:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    114e:	mov	r0, r4
    1150:	movs	r2, #54	; 0x36
    1152:	movs	r1, #36	; 0x24
    1154:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	//mute = false;
	semi_automated = true;
    1158:	strb	r5, [r4, #9]
	return true;
}
    115a:	mov	r0, r5
    115c:	pop	{r3, r4, r5, pc}
    115e:	nop
    1160:	.word	0x1fffae80

00001164 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    1164:	push	{r4, lr}
    1166:	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    1168:	cbz	r1, 1172 <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    116a:	cmp	r1, #1
    116c:	beq.n	1192 <AudioControlSGTL5000::inputSelect(int)+0x2e>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    116e:	movs	r0, #0
    1170:	pop	{r4, pc}
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    1172:	movs	r2, #85	; 0x55
    1174:	movs	r1, #32
    1176:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    117a:	cmp	r0, #0
    117c:	beq.n	116e <AudioControlSGTL5000::inputSelect(int)+0xa>
    117e:	ldrh	r2, [r4, #6]
    1180:	orr.w	r2, r2, #4
    1184:	mov	r0, r4
    1186:	uxth	r2, r2
    1188:	movs	r1, #36	; 0x24
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    118a:	ldmia.w	sp!, {r4, lr}
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    118e:	b.w	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    1192:	movw	r2, #371	; 0x173
    1196:	movs	r1, #42	; 0x2a
    1198:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    119c:	cmp	r0, #0
    119e:	beq.n	116e <AudioControlSGTL5000::inputSelect(int)+0xa>
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    11a0:	movs	r2, #136	; 0x88
    11a2:	movs	r1, #32
    11a4:	mov	r0, r4
    11a6:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    11aa:	cmp	r0, #0
    11ac:	beq.n	116e <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    11ae:	ldrh	r2, [r4, #6]
    11b0:	mov	r0, r4
    11b2:	bic.w	r2, r2, #4
    11b6:	movs	r1, #36	; 0x24
		} else {
			return false;
		}
	}
    11b8:	ldmia.w	sp!, {r4, lr}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    11bc:	b.w	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

000011c0 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    11c0:	push	{r3, r4, r5, lr}
    11c2:	mov	r5, r0
	if (n == 0) {
    11c4:	cbz	r1, 1204 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x44>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    11c6:	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    11c8:	ldrb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    11ca:	itte	ls
    11cc:	rsbls	r4, r1, #128	; 0x80
    11d0:	orrls.w	r4, r4, r4, lsl #8
    11d4:	movhi	r4, #0
	}
	if (muted) {
    11d6:	cbnz	r3, 11e6 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x26>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    11d8:	mov	r2, r4
    11da:	mov	r0, r5
    11dc:	movs	r1, #34	; 0x22
}
    11de:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    11e2:	b.w	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    11e6:	ldrh	r2, [r0, #6]
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
		muted = false;
    11e8:	movs	r3, #0
    11ea:	bic.w	r2, r2, #16
    11ee:	strb	r3, [r0, #4]
    11f0:	movs	r1, #36	; 0x24
    11f2:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    11f6:	mov	r2, r4
    11f8:	mov	r0, r5
    11fa:	movs	r1, #34	; 0x22
}
    11fc:	ldmia.w	sp!, {r3, r4, r5, lr}
	if (muted) {
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    1200:	b.w	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    1204:	movs	r3, #1
    1206:	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    1208:	movw	r2, #32639	; 0x7f7f
    120c:	movs	r1, #34	; 0x22
    120e:	bl	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    1212:	ldrh	r2, [r5, #6]
    1214:	orr.w	r2, r2, #16
    1218:	mov	r0, r5
    121a:	uxth	r2, r2
    121c:	movs	r1, #36	; 0x24
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    121e:	ldmia.w	sp!, {r3, r4, r5, lr}
    1222:	b.w	1030 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    1226:	nop

00001228 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    1228:	vldr	s14, [pc, #20]	; 1240 <AudioControlSGTL5000::volume(float)+0x18>
    122c:	vldr	s15, [pc, #20]	; 1244 <AudioControlSGTL5000::volume(float)+0x1c>
    1230:	vfma.f32	s15, s0, s14
    1234:	vcvt.u32.f32	s15, s15
    1238:	vmov	r1, s15
    123c:	b.w	11c0 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    1240:	.word	0x43010000
    1244:	.word	0x3eff7cee

00001248 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    1248:	ldr	r2, [pc, #8]	; (1254 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    124a:	ldr	r1, [pc, #12]	; (1258 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    124c:	ldr	r0, [pc, #12]	; (125c <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    124e:	b.w	5a78 <__aeabi_atexit>
    1252:	nop
    1254:	.word	0x1fffad30
    1258:	.word	0x00000ded
    125c:	.word	0x1fffcad8

00001260 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    1260:	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    1262:	ldr	r5, [pc, #28]	; (1280 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    1264:	ldr	r4, [pc, #28]	; (1284 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    1266:	ldr	r0, [pc, #32]	; (1288 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    1268:	mov	r2, r5
    126a:	mov	r1, r4
    126c:	bl	5a78 <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    1270:	mov	r2, r5
    1272:	mov	r1, r4
    1274:	ldr	r0, [pc, #20]	; (128c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    1276:	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    127a:	b.w	5a78 <__aeabi_atexit>
    127e:	nop
    1280:	.word	0x1fffad30
    1284:	.word	0x00000ded
    1288:	.word	0x1fffcae0
    128c:	.word	0x1fffcae8

00001290 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    1290:	ldr	r2, [pc, #8]	; (129c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    1292:	ldr	r1, [pc, #12]	; (12a0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    1294:	ldr	r0, [pc, #12]	; (12a4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    1296:	b.w	5a78 <__aeabi_atexit>
    129a:	nop
    129c:	.word	0x1fffad30
    12a0:	.word	0x00000ded
    12a4:	.word	0x1fffcaf0

000012a8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    12a8:	ldr	r2, [pc, #8]	; (12b4 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    12aa:	ldr	r1, [pc, #12]	; (12b8 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    12ac:	ldr	r0, [pc, #12]	; (12bc <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    12ae:	b.w	5a78 <__aeabi_atexit>
    12b2:	nop
    12b4:	.word	0x1fffad30
    12b8:	.word	0x00000ded
    12bc:	.word	0x1fffcaf8

000012c0 <AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)>:

#if defined(KINETISK)

void AudioFilterStateVariable::update_fixed(const int16_t *in,
	int16_t *lp, int16_t *bp, int16_t *hp)
{
    12c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12c4:	sub	sp, #12
    12c6:	mov	r8, r1
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fmult, damp;

	fmult = setting_fmult;
	damp = setting_damp;
	inputprev = state_inputprev;
    12c8:	ldr	r4, [r0, #40]	; 0x28

#if defined(KINETISK)

void AudioFilterStateVariable::update_fixed(const int16_t *in,
	int16_t *lp, int16_t *bp, int16_t *hp)
{
    12ca:	str	r0, [sp, #4]
	int32_t input, inputprev;
	int32_t lowpass, bandpass, highpass;
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fmult, damp;

	fmult = setting_fmult;
    12cc:	ldr.w	ip, [r0, #28]
	damp = setting_damp;
    12d0:	ldr.w	sl, [r0, #36]	; 0x24
	inputprev = state_inputprev;
	lowpass = state_lowpass;
    12d4:	ldr	r1, [r0, #44]	; 0x2c
	bandpass = state_bandpass;
    12d6:	ldr	r7, [r0, #48]	; 0x30

#if defined(KINETISK)

void AudioFilterStateVariable::update_fixed(const int16_t *in,
	int16_t *lp, int16_t *bp, int16_t *hp)
{
    12d8:	ldr.w	r9, [sp, #48]	; 0x30
	const int16_t *end = in + AUDIO_BLOCK_SAMPLES;
    12dc:	add.w	r0, r8, #256	; 0x100
    12e0:	mov	r6, r4
    12e2:	mov	fp, r0
	damp = setting_damp;
	inputprev = state_inputprev;
	lowpass = state_lowpass;
	bandpass = state_bandpass;
	do {
		input = (*in++) << 12;
    12e4:	ldrsh.w	lr, [r8], #2
    12e8:	mov.w	lr, lr, lsl #12
static inline int32_t multiply_32x32_rshift32_rounded(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_32x32_rshift32_rounded(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smmulr %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    12ec:	smmulr	r4, ip, r7
		lowpass = lowpass + MULT(fmult, bandpass);
    12f0:	add.w	r4, r1, r4, lsl #2
    12f4:	smmulr	r5, sl, r7
		highpass = ((input + inputprev)>>1) - lowpass - MULT(damp, bandpass);
    12f8:	add	r6, lr
    12fa:	rsb	r6, r4, r6, asr #1
    12fe:	sub.w	r6, r6, r5, lsl #2
    1302:	smmulr	r0, ip, r6
		inputprev = input;
		bandpass = bandpass + MULT(fmult, highpass);
    1306:	add.w	r0, r7, r0, lsl #2
    130a:	smmulr	r1, ip, r0
		lowpasstmp = lowpass;
		bandpasstmp = bandpass;
		highpasstmp = highpass;
		lowpass = lowpass + MULT(fmult, bandpass);
    130e:	add.w	r1, r4, r1, lsl #2
    1312:	smmulr	r5, sl, r0
		highpass = input - lowpass - MULT(damp, bandpass);
    1316:	rsb	r7, r1, lr
    131a:	sub.w	r5, r7, r5, lsl #2
    131e:	smmulr	r7, ip, r5
		bandpass = bandpass + MULT(fmult, highpass);
    1322:	add.w	r7, r0, r7, lsl #2
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
    1326:	add	r4, r1
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    1328:	ssat	r4, #16, r4, asr #13
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
    132c:	add	r0, r7
    132e:	ssat	r0, #16, r0, asr #13
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
    1332:	add	r5, r6
    1334:	ssat	r5, #16, r5, asr #13
		*lp++ = lowpasstmp;
		*bp++ = bandpasstmp;
		*hp++ = highpasstmp;
	} while (in < end);
    1338:	cmp	fp, r8
		highpass = input - lowpass - MULT(damp, bandpass);
		bandpass = bandpass + MULT(fmult, highpass);
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
		*lp++ = lowpasstmp;
    133a:	strh.w	r4, [r2], #2
	damp = setting_damp;
	inputprev = state_inputprev;
	lowpass = state_lowpass;
	bandpass = state_bandpass;
	do {
		input = (*in++) << 12;
    133e:	mov	r6, lr
		bandpass = bandpass + MULT(fmult, highpass);
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
		*lp++ = lowpasstmp;
		*bp++ = bandpasstmp;
    1340:	strh.w	r0, [r3], #2
		*hp++ = highpasstmp;
    1344:	strh.w	r5, [r9], #2
	} while (in < end);
    1348:	bne.n	12e4 <AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)+0x24>
	state_inputprev = inputprev;
    134a:	ldr	r2, [sp, #4]
    134c:	mov	r3, r2
    134e:	str.w	lr, [r3, #40]	; 0x28
	state_lowpass = lowpass;
    1352:	str	r1, [r2, #44]	; 0x2c
	state_bandpass = bandpass;
    1354:	str	r7, [r2, #48]	; 0x30
}
    1356:	add	sp, #12
    1358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000135c <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)>:


void AudioFilterStateVariable::update_variable(const int16_t *in,
	const int16_t *ctl, int16_t *lp, int16_t *bp, int16_t *hp)
{
    135c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1360:	sub	sp, #20
    1362:	mov	r8, r1
	int32_t lowpass, bandpass, highpass;
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fcenter, fmult, damp, octavemult;
	int32_t n;

	fcenter = setting_fcenter;
    1364:	ldr	r1, [r0, #24]
    1366:	str	r1, [sp, #4]
	octavemult = setting_octavemult;
    1368:	mov	r1, r0
	damp = setting_damp;
    136a:	mov	r4, r1
}


void AudioFilterStateVariable::update_variable(const int16_t *in,
	const int16_t *ctl, int16_t *lp, int16_t *bp, int16_t *hp)
{
    136c:	str	r0, [sp, #12]
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fcenter, fmult, damp, octavemult;
	int32_t n;

	fcenter = setting_fcenter;
	octavemult = setting_octavemult;
    136e:	ldr	r0, [r0, #32]
    1370:	str	r0, [sp, #8]
	damp = setting_damp;
    1372:	ldr.w	fp, [r1, #36]	; 0x24
	inputprev = state_inputprev;
    1376:	ldr	r7, [r1, #40]	; 0x28
	lowpass = state_lowpass;
	bandpass = state_bandpass;
    1378:	ldr	r0, [r4, #48]	; 0x30

	fcenter = setting_fcenter;
	octavemult = setting_octavemult;
	damp = setting_damp;
	inputprev = state_inputprev;
	lowpass = state_lowpass;
    137a:	ldr	r1, [r1, #44]	; 0x2c
}


void AudioFilterStateVariable::update_variable(const int16_t *in,
	const int16_t *ctl, int16_t *lp, int16_t *bp, int16_t *hp)
{
    137c:	ldr.w	sl, [sp, #56]	; 0x38
    1380:	ldr.w	r9, [sp, #60]	; 0x3c
	const int16_t *end = in + AUDIO_BLOCK_SAMPLES;
    1384:	add.w	r4, r8, #256	; 0x100
    1388:	str	r4, [sp, #0]
	inputprev = state_inputprev;
	lowpass = state_lowpass;
	bandpass = state_bandpass;
	do {
		// compute fmult using control input, fcenter and octavemult
		control = *ctl++;          // signal is always 15 fractional bits
    138a:	ldrsh.w	r6, [r2], #2
		control *= octavemult;     // octavemult range: 0 to 28671 (12 frac bits)
    138e:	ldr	r4, [sp, #8]
    1390:	mul.w	r6, r6, r4
			multiply_32x32_rshift32_rounded(x, 1358044250)) << 1);
		n = n << 1;
		#else
		// exp2 algorithm by Laurent de Soras
		// http://www.musicdsp.org/showone.php?id=106
		n = (n + 134217728) << 3;
    1394:	bic.w	r5, r6, #4160749568	; 0xf8000000
    1398:	add.w	r5, r5, #134217728	; 0x8000000
    139c:	lsls	r5, r5, #3
static inline int32_t multiply_32x32_rshift32_rounded(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_32x32_rshift32_rounded(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smmulr %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    139e:	smmulr	r5, r5, r5
    13a2:	ldr	r4, [pc, #160]	; (1444 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)+0xe8>)
    13a4:	smmulr	r5, r5, r4
		n = multiply_32x32_rshift32_rounded(n, n);
		n = multiply_32x32_rshift32_rounded(n, 715827883) << 3;
    13a8:	lsls	r5, r5, #3
		n = n + 715827882;
    13aa:	subs	r4, #1
    13ac:	asrs	r6, r6, #27
    13ae:	rsb	r6, r6, #6
    13b2:	add	r4, r5
    13b4:	asrs	r4, r6
    13b6:	ldr	r5, [sp, #4]
    13b8:	smmulr	r4, r5, r4
    13bc:	ldr	r5, [pc, #136]	; (1448 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)+0xec>)
			multiply_32x32_rshift32_rounded(
			multiply_32x32_rshift32_rounded(fmult, fmult),
			multiply_32x32_rshift32_rounded(fmult, -1383276101))) << 1;
		#endif
		// now do the state variable filter as normal, using fmult
		input = (*in++) << 12;
    13be:	ldrsh.w	ip, [r8], #2
    13c2:	cmp	r4, r5
    13c4:	it	ge
    13c6:	movge	r4, r5
		n = n + 715827882;
		#endif
		n = n >> (6 - (control >> 27)); // 4 integer control bits
		fmult = multiply_32x32_rshift32_rounded(fcenter, n);
		if (fmult > 5378279) fmult = 5378279;
		fmult = fmult << 8;
    13c8:	lsls	r4, r4, #8
			multiply_32x32_rshift32_rounded(
			multiply_32x32_rshift32_rounded(fmult, fmult),
			multiply_32x32_rshift32_rounded(fmult, -1383276101))) << 1;
		#endif
		// now do the state variable filter as normal, using fmult
		input = (*in++) << 12;
    13ca:	mov.w	ip, ip, lsl #12
    13ce:	smmulr	r6, r4, r0
		lowpass = lowpass + MULT(fmult, bandpass);
    13d2:	add.w	r6, r1, r6, lsl #2
    13d6:	smmulr	r1, fp, r0
		highpass = ((input + inputprev)>>1) - lowpass - MULT(damp, bandpass);
    13da:	add.w	lr, r7, ip
    13de:	rsb	lr, r6, lr, asr #1
    13e2:	sub.w	lr, lr, r1, lsl #2
    13e6:	smmulr	r5, r4, lr
		inputprev = input;
		bandpass = bandpass + MULT(fmult, highpass);
    13ea:	add.w	r5, r0, r5, lsl #2
    13ee:	smmulr	r1, r4, r5
		lowpasstmp = lowpass;
		bandpasstmp = bandpass;
		highpasstmp = highpass;
		lowpass = lowpass + MULT(fmult, bandpass);
    13f2:	add.w	r1, r6, r1, lsl #2
    13f6:	smmulr	r0, fp, r5
		highpass = input - lowpass - MULT(damp, bandpass);
    13fa:	rsb	r7, r1, ip
    13fe:	sub.w	r7, r7, r0, lsl #2
    1402:	smmulr	r4, r4, r7
		bandpass = bandpass + MULT(fmult, highpass);
    1406:	add.w	r0, r5, r4, lsl #2
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
    140a:	add	r6, r1
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    140c:	ssat	r6, #16, r6, asr #13
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
    1410:	add	r5, r0
    1412:	ssat	r5, #16, r5, asr #13
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
    1416:	add	lr, r7
    1418:	ssat	lr, #16, lr, asr #13
		*lp++ = lowpasstmp;
		*bp++ = bandpasstmp;
		*hp++ = highpasstmp;
	} while (in < end);
    141c:	ldr	r4, [sp, #0]
		highpass = input - lowpass - MULT(damp, bandpass);
		bandpass = bandpass + MULT(fmult, highpass);
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
		*lp++ = lowpasstmp;
    141e:	strh.w	r6, [r3], #2
		*bp++ = bandpasstmp;
		*hp++ = highpasstmp;
	} while (in < end);
    1422:	cmp	r4, r8
		bandpass = bandpass + MULT(fmult, highpass);
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
		*lp++ = lowpasstmp;
		*bp++ = bandpasstmp;
    1424:	strh.w	r5, [sl], #2
			multiply_32x32_rshift32_rounded(
			multiply_32x32_rshift32_rounded(fmult, fmult),
			multiply_32x32_rshift32_rounded(fmult, -1383276101))) << 1;
		#endif
		// now do the state variable filter as normal, using fmult
		input = (*in++) << 12;
    1428:	mov	r7, ip
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
		*lp++ = lowpasstmp;
		*bp++ = bandpasstmp;
		*hp++ = highpasstmp;
    142a:	strh.w	lr, [r9], #2
	} while (in < end);
    142e:	bne.n	138a <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)+0x2e>
	state_inputprev = inputprev;
    1430:	ldr	r2, [sp, #12]
    1432:	mov	r3, r2
    1434:	str.w	ip, [r3, #40]	; 0x28
	state_lowpass = lowpass;
    1438:	str	r1, [r2, #44]	; 0x2c
	state_bandpass = bandpass;
    143a:	str	r0, [r2, #48]	; 0x30
}
    143c:	add	sp, #20
    143e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1442:	nop
    1444:	.word	0x2aaaaaab
    1448:	.word	0x005210e7

0000144c <AudioFilterStateVariable::update()>:


void AudioFilterStateVariable::update(void)
{
    144c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *input_block=NULL, *control_block=NULL;
	audio_block_t *lowpass_block=NULL, *bandpass_block=NULL, *highpass_block=NULL;

	input_block = receiveReadOnly(0);
    1450:	movs	r1, #0
	state_bandpass = bandpass;
}


void AudioFilterStateVariable::update(void)
{
    1452:	sub	sp, #12
    1454:	mov	r4, r0
	audio_block_t *input_block=NULL, *control_block=NULL;
	audio_block_t *lowpass_block=NULL, *bandpass_block=NULL, *highpass_block=NULL;

	input_block = receiveReadOnly(0);
    1456:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
	control_block = receiveReadOnly(1);
    145a:	movs	r1, #1
void AudioFilterStateVariable::update(void)
{
	audio_block_t *input_block=NULL, *control_block=NULL;
	audio_block_t *lowpass_block=NULL, *bandpass_block=NULL, *highpass_block=NULL;

	input_block = receiveReadOnly(0);
    145c:	mov	r5, r0
	control_block = receiveReadOnly(1);
    145e:	mov	r0, r4
    1460:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
    1464:	mov	r6, r0
	if (!input_block) {
    1466:	cmp	r5, #0
    1468:	beq.n	14e4 <AudioFilterStateVariable::update()+0x98>
		if (control_block) release(control_block);
		return;
	}
	lowpass_block = allocate();
    146a:	bl	5050 <AudioStream::allocate()>
	if (!lowpass_block) {
    146e:	mov	r7, r0
    1470:	cmp	r0, #0
    1472:	beq.n	14ee <AudioFilterStateVariable::update()+0xa2>
		release(input_block);
		if (control_block) release(control_block);
		return;
	}
	bandpass_block = allocate();
    1474:	bl	5050 <AudioStream::allocate()>
	if (!bandpass_block) {
    1478:	mov	r8, r0
    147a:	cmp	r0, #0
    147c:	beq.n	1504 <AudioFilterStateVariable::update()+0xb8>
		release(input_block);
		release(lowpass_block);
		if (control_block) release(control_block);
		return;
	}
	highpass_block = allocate();
    147e:	bl	5050 <AudioStream::allocate()>
	if (!highpass_block) {
    1482:	mov	r9, r0
    1484:	cmp	r0, #0
    1486:	beq.n	152c <AudioFilterStateVariable::update()+0xe0>
		release(bandpass_block);
		if (control_block) release(control_block);
		return;
	}

	if (control_block) {
    1488:	cmp	r6, #0
    148a:	beq.n	1518 <AudioFilterStateVariable::update()+0xcc>
		update_variable(input_block->data,
    148c:	adds	r2, r0, #4
    148e:	add.w	r3, r8, #4
			 control_block->data,
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
    1492:	str	r2, [sp, #4]
    1494:	str	r3, [sp, #0]
    1496:	mov	r0, r4
    1498:	adds	r3, r7, #4
    149a:	adds	r2, r6, #4
    149c:	adds	r1, r5, #4
    149e:	bl	135c <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)>
		release(control_block);
    14a2:	mov	r0, r6
    14a4:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		update_fixed(input_block->data,
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
	}
	release(input_block);
    14a8:	mov	r0, r5
    14aa:	bl	50f8 <AudioStream::release(audio_block_struct*)>
	transmit(lowpass_block, 0);
    14ae:	movs	r2, #0
    14b0:	mov	r1, r7
    14b2:	mov	r0, r4
    14b4:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(lowpass_block);
    14b8:	mov	r0, r7
    14ba:	bl	50f8 <AudioStream::release(audio_block_struct*)>
	transmit(bandpass_block, 1);
    14be:	movs	r2, #1
    14c0:	mov	r1, r8
    14c2:	mov	r0, r4
    14c4:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(bandpass_block);
    14c8:	mov	r0, r8
    14ca:	bl	50f8 <AudioStream::release(audio_block_struct*)>
	transmit(highpass_block, 2);
    14ce:	mov	r0, r4
    14d0:	movs	r2, #2
    14d2:	mov	r1, r9
    14d4:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(highpass_block);
    14d8:	mov	r0, r9
	return;
}
    14da:	add	sp, #12
    14dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	transmit(lowpass_block, 0);
	release(lowpass_block);
	transmit(bandpass_block, 1);
	release(bandpass_block);
	transmit(highpass_block, 2);
	release(highpass_block);
    14e0:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
	audio_block_t *lowpass_block=NULL, *bandpass_block=NULL, *highpass_block=NULL;

	input_block = receiveReadOnly(0);
	control_block = receiveReadOnly(1);
	if (!input_block) {
		if (control_block) release(control_block);
    14e4:	cmp	r0, #0
    14e6:	bne.n	14da <AudioFilterStateVariable::update()+0x8e>
	transmit(bandpass_block, 1);
	release(bandpass_block);
	transmit(highpass_block, 2);
	release(highpass_block);
	return;
}
    14e8:	add	sp, #12
    14ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (control_block) release(control_block);
		return;
	}
	lowpass_block = allocate();
	if (!lowpass_block) {
		release(input_block);
    14ee:	mov	r0, r5
    14f0:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
    14f4:	cmp	r6, #0
    14f6:	beq.n	14e8 <AudioFilterStateVariable::update()+0x9c>
	highpass_block = allocate();
	if (!highpass_block) {
		release(input_block);
		release(lowpass_block);
		release(bandpass_block);
		if (control_block) release(control_block);
    14f8:	mov	r0, r6
	transmit(bandpass_block, 1);
	release(bandpass_block);
	transmit(highpass_block, 2);
	release(highpass_block);
	return;
}
    14fa:	add	sp, #12
    14fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	transmit(lowpass_block, 0);
	release(lowpass_block);
	transmit(bandpass_block, 1);
	release(bandpass_block);
	transmit(highpass_block, 2);
	release(highpass_block);
    1500:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
		return;
	}
	bandpass_block = allocate();
	if (!bandpass_block) {
		release(input_block);
    1504:	mov	r0, r5
    1506:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		release(lowpass_block);
    150a:	mov	r0, r7
    150c:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
    1510:	cmp	r6, #0
    1512:	beq.n	14e8 <AudioFilterStateVariable::update()+0x9c>
	highpass_block = allocate();
	if (!highpass_block) {
		release(input_block);
		release(lowpass_block);
		release(bandpass_block);
		if (control_block) release(control_block);
    1514:	mov	r0, r6
    1516:	b.n	14fa <AudioFilterStateVariable::update()+0xae>
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
		release(control_block);
	} else {
		update_fixed(input_block->data,
    1518:	adds	r3, r0, #4
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
    151a:	str	r3, [sp, #0]
    151c:	adds	r2, r7, #4
    151e:	add.w	r3, r8, #4
    1522:	adds	r1, r5, #4
    1524:	mov	r0, r4
    1526:	bl	12c0 <AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)>
    152a:	b.n	14a8 <AudioFilterStateVariable::update()+0x5c>
		if (control_block) release(control_block);
		return;
	}
	highpass_block = allocate();
	if (!highpass_block) {
		release(input_block);
    152c:	mov	r0, r5
    152e:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		release(lowpass_block);
    1532:	mov	r0, r7
    1534:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		release(bandpass_block);
    1538:	mov	r0, r8
    153a:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
    153e:	cmp	r6, #0
    1540:	beq.n	14e8 <AudioFilterStateVariable::update()+0x9c>
    1542:	mov	r0, r6
    1544:	b.n	14fa <AudioFilterStateVariable::update()+0xae>
    1546:	nop

00001548 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
//audio_block_t * AudioOutputI2SQuad::inputQueueArray[4];
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    1548:	ldr	r2, [pc, #8]	; (1554 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    154a:	ldr	r1, [pc, #12]	; (1558 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    154c:	ldr	r0, [pc, #12]	; (155c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    154e:	b.w	5a78 <__aeabi_atexit>
    1552:	nop
    1554:	.word	0x1fffad30
    1558:	.word	0x00000ded
    155c:	.word	0x1fffcb00

00001560 <AudioSynthWaveformDc::update()>:

#include <Arduino.h>
#include "synth_dc.h"

void AudioSynthWaveformDc::update(void)
{
    1560:	push	{r3, r4, r5, r6, r7, lr}
    1562:	mov	r5, r0
	audio_block_t *block;
	uint32_t *p, *end, val;
	int32_t count, t1, t2, t3, t4;

	block = allocate();
    1564:	bl	5050 <AudioStream::allocate()>
	if (!block) return;
    1568:	cmp	r0, #0
    156a:	beq.w	1692 <AudioSynthWaveformDc::update()+0x132>
	p = (uint32_t *)(block->data);
	end = p + AUDIO_BLOCK_SAMPLES/2;

	if (state == 0) {
    156e:	ldrb	r2, [r5, #24]
    1570:	mov	r4, r0
	uint32_t *p, *end, val;
	int32_t count, t1, t2, t3, t4;

	block = allocate();
	if (!block) return;
	p = (uint32_t *)(block->data);
    1572:	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES/2;
    1574:	add.w	r6, r0, #260	; 0x104

	if (state == 0) {
    1578:	cmp	r2, #0
    157a:	beq.n	15f0 <AudioSynthWaveformDc::update()+0x90>
			*p++ = val;
		} while (p < end);
	} else {
		// transitioning to a new DC level
		//count = (target - magnitude) / increment;
		count = substract_int32_then_divide_int32(target, magnitude, increment);
    157c:	ldr	r0, [r5, #32]
    157e:	ldr	r1, [r5, #28]
    1580:	ldr	r2, [r5, #36]	; 0x24
// computes (a - b), result saturated to 32 bit integer range
static inline int32_t substract_32_saturate(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t substract_32_saturate(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qsub %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1582:	qsub	lr, r0, r1
//get Q from PSR
static inline uint32_t get_q_psr(void) __attribute__((always_inline, unused));
static inline uint32_t get_q_psr(void)
{
  uint32_t out;
  asm ("mrs %0, APSR" : "=r" (out));
    1586:	mrs	r7, CPSR
static inline int32_t substract_int32_then_divide_int32(int32_t a, int32_t b, int32_t c) __attribute__((always_inline, unused));
static inline int32_t substract_int32_then_divide_int32(int32_t a, int32_t b, int32_t c)
{
 	int r;
 	r = substract_32_saturate(a,b);
 	if ( !get_q_psr() ) return (r/c);
    158a:	lsls	r7, r7, #4
    158c:	bmi.n	1610 <AudioSynthWaveformDc::update()+0xb0>
    158e:	sdiv	lr, lr, r2
		if (count >= AUDIO_BLOCK_SAMPLES) {
    1592:	cmp.w	lr, #127	; 0x7f
    1596:	ble.n	1642 <AudioSynthWaveformDc::update()+0xe2>
    1598:	add.w	r7, r4, #20
    159c:	b.n	15a4 <AudioSynthWaveformDc::update()+0x44>
    159e:	ldr	r1, [r5, #28]
    15a0:	ldr	r2, [r5, #36]	; 0x24
    15a2:	adds	r7, #16
			// this update will not reach the target
			do {
				magnitude += increment;
    15a4:	add	r1, r2
				t1 = magnitude;
				magnitude += increment;
    15a6:	adds	r0, r1, r2
static inline uint32_t pack_16t_16t(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16t_16t(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhtb %0, %1, %2, asr #16" : "=r" (out) : "r" (a), "r" (b));
    15a8:	pkhtb	r1, r0, r1, asr #16
				t1 = pack_16t_16t(magnitude, t1);
				magnitude += increment;
    15ac:	add	r0, r2
				t2 = magnitude;
				magnitude += increment;
    15ae:	adds	r3, r0, r2
    15b0:	pkhtb	r0, r3, r0, asr #16
				t2 = pack_16t_16t(magnitude, t2);
				magnitude += increment;
    15b4:	add	r3, r2
				t3 = magnitude;
				magnitude += increment;
    15b6:	add.w	lr, r3, r2
    15ba:	pkhtb	r3, lr, r3, asr #16
				t3 = pack_16t_16t(magnitude, t3);
				magnitude += increment;
    15be:	add	lr, r2
				t4 = magnitude;
				magnitude += increment;
    15c0:	add	r2, lr
    15c2:	str	r2, [r5, #28]
    15c4:	pkhtb	r2, r2, lr, asr #16
				t4 = pack_16t_16t(magnitude, t4);
				*p++ = t1;
				*p++ = t2;
				*p++ = t3;
				*p++ = t4;
			} while (p < end);
    15c8:	cmp	r6, r7
				t3 = pack_16t_16t(magnitude, t3);
				magnitude += increment;
				t4 = magnitude;
				magnitude += increment;
				t4 = pack_16t_16t(magnitude, t4);
				*p++ = t1;
    15ca:	str.w	r1, [r7, #-16]
				*p++ = t2;
    15ce:	str.w	r0, [r7, #-12]
				*p++ = t3;
    15d2:	str.w	r3, [r7, #-8]
				*p++ = t4;
    15d6:	str.w	r2, [r7, #-4]
			} while (p < end);
    15da:	bhi.n	159e <AudioSynthWaveformDc::update()+0x3e>
			while (p < end) {
				*p++ = val;
			}
		}
	}
	transmit(block);
    15dc:	mov	r0, r5
    15de:	mov	r1, r4
    15e0:	movs	r2, #0
    15e2:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    15e6:	mov	r0, r4
}
    15e8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				*p++ = val;
			}
		}
	}
	transmit(block);
	release(block);
    15ec:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
	p = (uint32_t *)(block->data);
	end = p + AUDIO_BLOCK_SAMPLES/2;

	if (state == 0) {
		// steady DC output, simply fill the buffer with fixed value
		val = pack_16t_16t(magnitude, magnitude);
    15f0:	ldr	r2, [r5, #28]
    15f2:	pkhtb	r2, r2, r2, asr #16
		do {
			*p++ = val;
    15f6:	str	r2, [r3, #0]
			*p++ = val;
    15f8:	str	r2, [r3, #4]
			*p++ = val;
    15fa:	str	r2, [r3, #8]
			*p++ = val;
    15fc:	str	r2, [r3, #12]
			*p++ = val;
    15fe:	str	r2, [r3, #16]
			*p++ = val;
    1600:	str	r2, [r3, #20]
			*p++ = val;
    1602:	str	r2, [r3, #24]
    1604:	adds	r3, #32
			*p++ = val;
		} while (p < end);
    1606:	cmp	r3, r6
			*p++ = val;
			*p++ = val;
			*p++ = val;
			*p++ = val;
			*p++ = val;
			*p++ = val;
    1608:	str.w	r2, [r3, #-4]
		} while (p < end);
    160c:	bcc.n	15f6 <AudioSynthWaveformDc::update()+0x96>
    160e:	b.n	15dc <AudioSynthWaveformDc::update()+0x7c>
 	clr_q_psr();
 	if ( c==0 ) r=0;
    1610:	cbnz	r2, 162a <AudioSynthWaveformDc::update()+0xca>
			if (count) {
				t1 = pack_16t_16t(target, magnitude + increment);
				*p++ = t1;
			}
			magnitude = target;
			state = 0;
    1612:	movs	r2, #0
			}
			if (count) {
				t1 = pack_16t_16t(target, magnitude + increment);
				*p++ = t1;
			}
			magnitude = target;
    1614:	str	r0, [r5, #28]
			state = 0;
    1616:	strb	r2, [r5, #24]
    1618:	pkhtb	r2, r0, r0, asr #16
			val = pack_16t_16t(magnitude, magnitude);
			while (p < end) {
    161c:	cmp	r3, r6
    161e:	bcs.n	15dc <AudioSynthWaveformDc::update()+0x7c>
				*p++ = val;
    1620:	str.w	r2, [r3], #4
				*p++ = t1;
			}
			magnitude = target;
			state = 0;
			val = pack_16t_16t(magnitude, magnitude);
			while (p < end) {
    1624:	cmp	r6, r3
    1626:	bhi.n	1620 <AudioSynthWaveformDc::update()+0xc0>
    1628:	b.n	15dc <AudioSynthWaveformDc::update()+0x7c>
 	if (__builtin_abs(c)<=1) return r;
    162a:	adds	r7, r2, #1
    162c:	cmp	r7, #2
    162e:	bls.n	1592 <AudioSynthWaveformDc::update()+0x32>
 	return (a/c)-(b/c);
    1630:	sdiv	lr, r0, r2
    1634:	sdiv	r7, r1, r2
    1638:	rsb	lr, r7, lr
		} while (p < end);
	} else {
		// transitioning to a new DC level
		//count = (target - magnitude) / increment;
		count = substract_int32_then_divide_int32(target, magnitude, increment);
		if (count >= AUDIO_BLOCK_SAMPLES) {
    163c:	cmp.w	lr, #127	; 0x7f
    1640:	bgt.n	1598 <AudioSynthWaveformDc::update()+0x38>
				*p++ = t3;
				*p++ = t4;
			} while (p < end);
		} else {
			// this update reaches the target
			while (count >= 2) {
    1642:	cmp.w	lr, #1
    1646:	ble.n	167a <AudioSynthWaveformDc::update()+0x11a>
    1648:	mov	r0, lr
    164a:	mov	r7, r3
    164c:	b.n	1652 <AudioSynthWaveformDc::update()+0xf2>
    164e:	ldr	r1, [r5, #28]
    1650:	ldr	r2, [r5, #36]	; 0x24
				count -= 2;
				magnitude += increment;
    1652:	add	r1, r2
				t1 = magnitude;
				magnitude += increment;
    1654:	add	r2, r1
    1656:	str	r2, [r5, #28]
				*p++ = t4;
			} while (p < end);
		} else {
			// this update reaches the target
			while (count >= 2) {
				count -= 2;
    1658:	subs	r0, #2
    165a:	pkhtb	r2, r2, r1, asr #16
				*p++ = t3;
				*p++ = t4;
			} while (p < end);
		} else {
			// this update reaches the target
			while (count >= 2) {
    165e:	cmp	r0, #1
				count -= 2;
				magnitude += increment;
				t1 = magnitude;
				magnitude += increment;
				t1 = pack_16t_16t(magnitude, t1);
				*p++ = t1;
    1660:	str.w	r2, [r7], #4
				*p++ = t3;
				*p++ = t4;
			} while (p < end);
		} else {
			// this update reaches the target
			while (count >= 2) {
    1664:	bgt.n	164e <AudioSynthWaveformDc::update()+0xee>
    1666:	sub.w	lr, lr, #2
    166a:	mov.w	r1, lr, lsr #1
    166e:	adds	r2, r1, #1
    1670:	ldr	r0, [r5, #32]
    1672:	sub.w	lr, lr, r1, lsl #1
    1676:	add.w	r3, r3, r2, lsl #2
				t1 = magnitude;
				magnitude += increment;
				t1 = pack_16t_16t(magnitude, t1);
				*p++ = t1;
			}
			if (count) {
    167a:	cmp.w	lr, #0
    167e:	beq.n	1612 <AudioSynthWaveformDc::update()+0xb2>
    1680:	ldr	r1, [r5, #28]
    1682:	ldr	r2, [r5, #36]	; 0x24
    1684:	add	r2, r1
    1686:	pkhtb	r2, r0, r2, asr #16
				t1 = pack_16t_16t(target, magnitude + increment);
				*p++ = t1;
    168a:	str	r2, [r3, #0]
    168c:	ldr	r0, [r5, #32]
    168e:	adds	r3, #4
    1690:	b.n	1612 <AudioSynthWaveformDc::update()+0xb2>
    1692:	pop	{r3, r4, r5, r6, r7, pc}

00001694 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    1694:	ldr	r2, [pc, #8]	; (16a0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    1696:	ldr	r1, [pc, #12]	; (16a4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    1698:	ldr	r0, [pc, #12]	; (16a8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    169a:	b.w	5a78 <__aeabi_atexit>
    169e:	nop
    16a0:	.word	0x1fffad30
    16a4:	.word	0x00000ded
    16a8:	.word	0x1fffcb08

000016ac <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    16ac:	ldr	r2, [pc, #8]	; (16b8 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    16ae:	ldr	r1, [pc, #12]	; (16bc <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    16b0:	ldr	r0, [pc, #12]	; (16c0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    16b2:	b.w	5a78 <__aeabi_atexit>
    16b6:	nop
    16b8:	.word	0x1fffad30
    16bc:	.word	0x00000ded
    16c0:	.word	0x1fffcb10

000016c4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    16c4:	ldr	r2, [pc, #8]	; (16d0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    16c6:	ldr	r1, [pc, #12]	; (16d4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    16c8:	ldr	r0, [pc, #12]	; (16d8 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    16ca:	b.w	5a78 <__aeabi_atexit>
    16ce:	nop
    16d0:	.word	0x1fffad30
    16d4:	.word	0x00000ded
    16d8:	.word	0x1fffcb18

000016dc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
};
bool AudioOutputTDM::update_responsibility = false;
static uint32_t zeros[AUDIO_BLOCK_SAMPLES/2];
DMAMEM static uint32_t tdm_tx_buffer[AUDIO_BLOCK_SAMPLES*16];
DMAChannel AudioOutputTDM::dma(false);
    16dc:	ldr	r2, [pc, #8]	; (16e8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    16de:	ldr	r1, [pc, #12]	; (16ec <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    16e0:	ldr	r0, [pc, #12]	; (16f0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    16e2:	b.w	5a78 <__aeabi_atexit>
    16e6:	nop
    16e8:	.word	0x1fffad30
    16ec:	.word	0x00000ded
    16f0:	.word	0x1fffcb20

000016f4 <AudioOutputI2S::isr()>:
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    16f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    16f8:	ldr	r3, [pc, #208]	; (17cc <AudioOutputI2S::isr()+0xd8>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    16fa:	ldr	r0, [pc, #212]	; (17d0 <AudioOutputI2S::isr()+0xdc>)
#if defined(KINETISK)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    16fc:	ldr	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    16fe:	ldr	r1, [pc, #212]	; (17d4 <AudioOutputI2S::isr()+0xe0>)
    1700:	ldr	r2, [r2, #0]
    1702:	ldrb	r3, [r3, #4]
    1704:	strb	r3, [r1, #0]
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    1706:	cmp	r2, r0
    1708:	bcs.n	175e <AudioOutputI2S::isr()+0x6a>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    170a:	ldr	r3, [pc, #204]	; (17d8 <AudioOutputI2S::isr()+0xe4>)
    170c:	ldrb	r3, [r3, #0]
    170e:	cbnz	r3, 1764 <AudioOutputI2S::isr()+0x70>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    1710:	ldr.w	sl, [pc, #212]	; 17e8 <AudioOutputI2S::isr()+0xf4>
	blockR = AudioOutputI2S::block_right_1st;
    1714:	ldr.w	r9, [pc, #212]	; 17ec <AudioOutputI2S::isr()+0xf8>
	offsetL = AudioOutputI2S::block_left_offset;
    1718:	ldr.w	r8, [pc, #212]	; 17f0 <AudioOutputI2S::isr()+0xfc>
	offsetR = AudioOutputI2S::block_right_offset;
    171c:	ldr.w	fp, [pc, #212]	; 17f4 <AudioOutputI2S::isr()+0x100>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    1720:	ldr.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    1724:	ldr.w	r7, [r9]
	offsetL = AudioOutputI2S::block_left_offset;
    1728:	ldrh.w	r4, [r8]
	offsetR = AudioOutputI2S::block_right_offset;
    172c:	ldrh.w	r5, [fp]

	if (blockL && blockR) {
    1730:	cmp	r6, #0
    1732:	beq.n	17ac <AudioOutputI2S::isr()+0xb8>
    1734:	cbz	r7, 179e <AudioOutputI2S::isr()+0xaa>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    1736:	adds	r2, r7, #4
    1738:	adds	r1, r6, #4
    173a:	add.w	r2, r2, r5, lsl #1
    173e:	add.w	r1, r1, r4, lsl #1
    1742:	bl	3344 <memcpy_tointerleaveLR>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    1746:	adds	r5, #64	; 0x40
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    1748:	adds	r4, #64	; 0x40
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
		return;
	}

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    174a:	cmp	r4, #127	; 0x7f
    174c:	bhi.n	1786 <AudioOutputI2S::isr()+0x92>
		AudioOutputI2S::block_left_offset = offsetL;
    174e:	strh.w	r4, [r8]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    1752:	cmp	r5, #127	; 0x7f
    1754:	bhi.n	176c <AudioOutputI2S::isr()+0x78>
		AudioOutputI2S::block_right_offset = offsetR;
    1756:	strh.w	r5, [fp]
    175a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
    175e:	sub.w	r0, r0, #256	; 0x100
    1762:	b.n	1710 <AudioOutputI2S::isr()+0x1c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    1764:	ldr	r3, [pc, #116]	; (17dc <AudioOutputI2S::isr()+0xe8>)
    1766:	movs	r2, #1
    1768:	str	r2, [r3, #0]
    176a:	b.n	1710 <AudioOutputI2S::isr()+0x1c>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    176c:	movs	r4, #0
		AudioStream::release(blockR);
    176e:	mov	r0, r7
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    1770:	strh.w	r4, [fp]
		AudioStream::release(blockR);
    1774:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    1778:	ldr	r3, [pc, #100]	; (17e0 <AudioOutputI2S::isr()+0xec>)
    177a:	ldr	r2, [r3, #0]
    177c:	str.w	r2, [r9]
		AudioOutputI2S::block_right_2nd = NULL;
    1780:	str	r4, [r3, #0]
    1782:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    1786:	movs	r4, #0
		AudioStream::release(blockL);
    1788:	mov	r0, r6
	}

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    178a:	strh.w	r4, [r8]
		AudioStream::release(blockL);
    178e:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    1792:	ldr	r3, [pc, #80]	; (17e4 <AudioOutputI2S::isr()+0xf0>)
    1794:	ldr	r2, [r3, #0]
    1796:	str.w	r2, [sl]
		AudioOutputI2S::block_left_2nd = NULL;
    179a:	str	r4, [r3, #0]
    179c:	b.n	1752 <AudioOutputI2S::isr()+0x5e>
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    179e:	adds	r1, r6, #4
    17a0:	add.w	r1, r1, r4, lsl #1
    17a4:	bl	3382 <memcpy_tointerleaveL>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    17a8:	adds	r4, #64	; 0x40
    17aa:	b.n	174a <AudioOutputI2S::isr()+0x56>
	} else if (blockR) {
    17ac:	cbz	r7, 17bc <AudioOutputI2S::isr()+0xc8>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    17ae:	adds	r1, r7, #4
    17b0:	add.w	r1, r1, r5, lsl #1
    17b4:	bl	33c2 <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    17b8:	adds	r5, #64	; 0x40
    17ba:	b.n	174a <AudioOutputI2S::isr()+0x56>
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    17bc:	mov	r1, r7
    17be:	mov.w	r2, #256	; 0x100
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    17c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    17c6:	b.w	606c <memset>
    17ca:	nop
    17cc:	.word	0x1fffcb2c
    17d0:	.word	0x1fffa580
    17d4:	.word	0x4000801f
    17d8:	.word	0x1fffcb44
    17dc:	.word	0xe000e208
    17e0:	.word	0x1fffcb40
    17e4:	.word	0x1fffcb48
    17e8:	.word	0x1fffcb3c
    17ec:	.word	0x1fffcb34
    17f0:	.word	0x1fffcb28
    17f4:	.word	0x1fffcb38

000017f8 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    17f8:	push	{r4, r5, r6, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    17fa:	movs	r1, #0




void AudioOutputI2S::update(void)
{
    17fc:	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    17fe:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    1802:	cbz	r0, 1826 <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    1804:	cpsid	i
		if (block_left_1st == NULL) {
    1806:	ldr	r2, [pc, #112]	; (1878 <AudioOutputI2S::update()+0x80>)
    1808:	ldr	r3, [r2, #0]
    180a:	cmp	r3, #0
    180c:	beq.n	1862 <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    180e:	ldr	r1, [pc, #108]	; (187c <AudioOutputI2S::update()+0x84>)
    1810:	ldr	r5, [r1, #0]
    1812:	cbz	r5, 1856 <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    1814:	ldr	r6, [pc, #104]	; (1880 <AudioOutputI2S::update()+0x88>)
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    1816:	str	r5, [r2, #0]
			block_left_2nd = block;
			block_left_offset = 0;
    1818:	movs	r2, #0
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
    181a:	str	r0, [r1, #0]
			block_left_offset = 0;
    181c:	strh	r2, [r6, #0]
			__enable_irq();
    181e:	cpsie	i
			release(tmp);
    1820:	mov	r0, r3
    1822:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    1826:	mov	r0, r4
    1828:	movs	r1, #1
    182a:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    182e:	cbz	r0, 1854 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    1830:	cpsid	i
		if (block_right_1st == NULL) {
    1832:	ldr	r2, [pc, #80]	; (1884 <AudioOutputI2S::update()+0x8c>)
    1834:	ldr	r3, [r2, #0]
    1836:	cbz	r3, 186c <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    1838:	ldr	r1, [pc, #76]	; (1888 <AudioOutputI2S::update()+0x90>)
    183a:	ldr	r4, [r1, #0]
    183c:	cbz	r4, 185c <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    183e:	ldr	r5, [pc, #76]	; (188c <AudioOutputI2S::update()+0x94>)
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    1840:	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    1842:	movs	r2, #0
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
    1844:	str	r0, [r1, #0]
			block_right_offset = 0;
    1846:	strh	r2, [r5, #0]
			__enable_irq();
    1848:	cpsie	i
			release(tmp);
    184a:	mov	r0, r3
		}
	}
}
    184c:	ldmia.w	sp!, {r4, r5, r6, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    1850:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
    1854:	pop	{r4, r5, r6, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    1856:	str	r0, [r1, #0]
			__enable_irq();
    1858:	cpsie	i
    185a:	b.n	1826 <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    185c:	str	r0, [r1, #0]
			__enable_irq();
    185e:	cpsie	i
    1860:	pop	{r4, r5, r6, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    1862:	ldr	r1, [pc, #28]	; (1880 <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    1864:	str	r0, [r2, #0]
			block_left_offset = 0;
    1866:	strh	r3, [r1, #0]
			__enable_irq();
    1868:	cpsie	i
    186a:	b.n	1826 <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    186c:	ldr	r1, [pc, #28]	; (188c <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    186e:	str	r0, [r2, #0]
			block_right_offset = 0;
    1870:	strh	r3, [r1, #0]
			__enable_irq();
    1872:	cpsie	i
    1874:	pop	{r4, r5, r6, pc}
    1876:	nop
    1878:	.word	0x1fffcb3c
    187c:	.word	0x1fffcb48
    1880:	.word	0x1fffcb28
    1884:	.word	0x1fffcb34
    1888:	.word	0x1fffcb40
    188c:	.word	0x1fffcb38

00001890 <AudioOutputI2S::config_i2s()>:
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1890:	ldr	r3, [pc, #160]	; (1934 <AudioOutputI2S::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    1892:	ldr	r1, [pc, #164]	; (1938 <AudioOutputI2S::config_i2s()+0xa8>)
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1894:	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    1896:	ldr	r0, [pc, #164]	; (193c <AudioOutputI2S::config_i2s()+0xac>)
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    1898:	orr.w	r2, r2, #32768	; 0x8000
    189c:	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    189e:	ldr	r2, [r1, #0]
    18a0:	orr.w	r2, r2, #2
    18a4:	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    18a6:	ldr	r2, [r3, #0]
    18a8:	orr.w	r2, r2, #2
    18ac:	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    18ae:	ldr	r3, [r0, #0]
    18b0:	cmp	r3, #0
    18b2:	blt.n	1932 <AudioOutputI2S::config_i2s()+0xa2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    18b4:	ldr	r3, [pc, #136]	; (1940 <AudioOutputI2S::config_i2s()+0xb0>)
    18b6:	ldr	r3, [r3, #0]
    18b8:	cmp	r3, #0
    18ba:	blt.n	1932 <AudioOutputI2S::config_i2s()+0xa2>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    18bc:	ldr	r2, [pc, #132]	; (1944 <AudioOutputI2S::config_i2s()+0xb4>)
    18be:	mov.w	r3, #1073741824	; 0x40000000
    18c2:	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    18c4:	ldr	r3, [r2, #0]
    18c6:	cmp	r3, #0
    18c8:	blt.n	18c4 <AudioOutputI2S::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
    18ca:	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18cc:	ldr	r4, [pc, #120]	; (1948 <AudioOutputI2S::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    18ce:	ldr	r0, [pc, #124]	; (194c <AudioOutputI2S::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    18d0:	ldr.w	lr, [pc, #168]	; 197c <AudioOutputI2S::config_i2s()+0xec>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    18d4:	ldr	r1, [pc, #120]	; (1950 <AudioOutputI2S::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE;
    18d6:	ldr	r3, [pc, #124]	; (1954 <AudioOutputI2S::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    18d8:	ldr	r2, [pc, #124]	; (1958 <AudioOutputI2S::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    18da:	ldr	r7, [pc, #128]	; (195c <AudioOutputI2S::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    18dc:	ldr	r6, [pc, #128]	; (1960 <AudioOutputI2S::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    18de:	ldr	r5, [pc, #132]	; (1964 <AudioOutputI2S::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    18e0:	movw	ip, #61694	; 0xf0fe
    18e4:	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    18e8:	movs	r4, #0
    18ea:	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    18ec:	movs	r0, #1
    18ee:	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    18f2:	ldr.w	lr, [pc, #140]	; 1980 <AudioOutputI2S::config_i2s()+0xf0>
    18f6:	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE;
    18fa:	mov.w	r1, #65536	; 0x10000
    18fe:	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    1900:	ldr	r3, [pc, #100]	; (1968 <AudioOutputI2S::config_i2s()+0xd8>)
    1902:	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    1904:	ldr.w	lr, [pc, #124]	; 1984 <AudioOutputI2S::config_i2s()+0xf4>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
	I2S0_TCR3 = I2S_TCR3_TCE;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    1908:	ldr	r2, [pc, #96]	; (196c <AudioOutputI2S::config_i2s()+0xdc>)
    190a:	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    190c:	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    190e:	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    1910:	add.w	r0, r0, #1191182336	; 0x47000000
    1914:	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    1918:	ldr	r4, [pc, #84]	; (1970 <AudioOutputI2S::config_i2s()+0xe0>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
    191a:	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    191c:	ldr	r0, [pc, #84]	; (1974 <AudioOutputI2S::config_i2s()+0xe4>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    191e:	ldr	r1, [pc, #88]	; (1978 <AudioOutputI2S::config_i2s()+0xe8>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    1920:	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    1924:	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    1928:	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    192a:	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    192c:	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    192e:	str	r3, [r1, #0]
    1930:	pop	{r4, r5, r6, r7, pc}
    1932:	bx	lr
    1934:	.word	0x4004803c
    1938:	.word	0x40048040
    193c:	.word	0x4002f000
    1940:	.word	0x4002f080
    1944:	.word	0x4002f100
    1948:	.word	0x4002f104
    194c:	.word	0x4002f060
    1950:	.word	0x4002f008
    1954:	.word	0x4002f00c
    1958:	.word	0x4002f010
    195c:	.word	0x4002f014
    1960:	.word	0x4002f0e0
    1964:	.word	0x4002f084
    1968:	.word	0x00011f1b
    196c:	.word	0x1f1f1f00
    1970:	.word	0x4004b008
    1974:	.word	0x4004b00c
    1978:	.word	0x4004b018
    197c:	.word	0x4002f004
    1980:	.word	0x07000001
    1984:	.word	0x4002f088

00001988 <AudioOutputI2S::begin()>:
bool AudioOutputI2S::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);

void AudioOutputI2S::begin(void)
{
    1988:	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    198a:	ldr	r4, [pc, #156]	; (1a28 <AudioOutputI2S::begin()+0xa0>)
#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    198c:	ldr	r6, [pc, #156]	; (1a2c <AudioOutputI2S::begin()+0xa4>)
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    198e:	mov	r0, r4
    1990:	movs	r1, #1
    1992:	bl	4b3c <DMAChannel::begin(bool)>

	block_left_1st = NULL;
    1996:	ldr	r2, [pc, #152]	; (1a30 <AudioOutputI2S::begin()+0xa8>)
	block_right_1st = NULL;
    1998:	ldr	r3, [pc, #152]	; (1a34 <AudioOutputI2S::begin()+0xac>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    199a:	movs	r5, #0
    199c:	str	r5, [r2, #0]
	block_right_1st = NULL;
    199e:	str	r5, [r3, #0]

	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
    19a0:	bl	1890 <AudioOutputI2S::config_i2s()>
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    19a4:	ldr	r3, [pc, #144]	; (1a38 <AudioOutputI2S::begin()+0xb0>)

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    19a6:	ldr	r2, [pc, #148]	; (1a3c <AudioOutputI2S::begin()+0xb4>)
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    19a8:	ldr	r1, [pc, #148]	; (1a40 <AudioOutputI2S::begin()+0xb8>)
	block_left_1st = NULL;
	block_right_1st = NULL;

	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    19aa:	mov.w	r0, #1536	; 0x600
    19ae:	str	r0, [r3, #0]

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    19b0:	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 2;
    19b2:	movs	r0, #2
	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    19b4:	str	r2, [r3, #0]
	dma.TCD->SOFF = 2;
    19b6:	strh	r0, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    19b8:	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    19ba:	str	r1, [r3, #16]
    19bc:	add.w	r2, r2, #1073741824	; 0x40000000
    19c0:	add.w	r2, r2, #135168	; 0x21000
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    19c4:	movw	r7, #257	; 0x101
    19c8:	strh	r7, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    19ca:	str	r6, [r3, #12]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    19cc:	mov.w	r1, #256	; 0x100
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    19d0:	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    19d2:	movs	r6, #141	; 0x8d
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    19d4:	strh	r1, [r3, #22]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
    19d6:	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    19d8:	strh	r1, [r3, #30]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    19da:	str	r5, [r3, #24]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    19dc:	strh	r7, [r3, #28]

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    19de:	str	r0, [r3, #8]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    19e0:	strb	r5, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    19e2:	strb	r6, [r2, #0]
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);
	update_responsibility = update_setup();
    19e4:	bl	52a4 <AudioStream::update_setup()>
    19e8:	ldrb	r2, [r4, #4]
    19ea:	ldr	r3, [pc, #88]	; (1a44 <AudioOutputI2S::begin()+0xbc>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    19ec:	ldr	r1, [pc, #88]	; (1a48 <AudioOutputI2S::begin()+0xc0>)
    19ee:	strb	r0, [r3, #0]
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    19f0:	asrs	r3, r2, #5
    19f2:	lsls	r3, r3, #2
    19f4:	mov	r7, r2
    19f6:	add.w	r3, r3, #3758096384	; 0xe0000000
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    19fa:	strb	r7, [r1, #0]
	dma.enable();

	I2S0_TCSR = I2S_TCSR_SR;
    19fc:	ldr	r5, [pc, #76]	; (1a4c <AudioOutputI2S::begin()+0xc4>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    19fe:	ldr	r6, [pc, #80]	; (1a50 <AudioOutputI2S::begin()+0xc8>)
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1a00:	ldr	r4, [pc, #80]	; (1a54 <AudioOutputI2S::begin()+0xcc>)
    1a02:	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1a06:	movs	r1, #1
    1a08:	add.w	r3, r3, #57600	; 0xe100
    1a0c:	and.w	r2, r2, #31
    1a10:	lsl.w	r2, r1, r2
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);
	update_responsibility = update_setup();
	dma.enable();

	I2S0_TCSR = I2S_TCSR_SR;
    1a14:	mov.w	r7, #16777216	; 0x1000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    1a18:	ldr	r1, [pc, #60]	; (1a58 <AudioOutputI2S::begin()+0xd0>)
    1a1a:	str	r7, [r5, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    1a1c:	str	r4, [r5, #0]
    1a1e:	str.w	r1, [r6, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    1a22:	str	r2, [r3, #0]
    1a24:	pop	{r3, r4, r5, r6, r7, pc}
    1a26:	nop
    1a28:	.word	0x1fffcb2c
    1a2c:	.word	0xfffffe00
    1a30:	.word	0x1fffcb3c
    1a34:	.word	0x1fffcb34
    1a38:	.word	0x4004b004
    1a3c:	.word	0x1fffa480
    1a40:	.word	0x4002f022
    1a44:	.word	0x1fffcb44
    1a48:	.word	0x4000801b
    1a4c:	.word	0x4002f000
    1a50:	.word	0x1fffa800
    1a54:	.word	0x90000001
    1a58:	.word	0x000016f5

00001a5c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);
    1a5c:	ldr	r2, [pc, #8]	; (1a68 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    1a5e:	ldr	r1, [pc, #12]	; (1a6c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    1a60:	ldr	r0, [pc, #12]	; (1a70 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    1a62:	b.w	5a78 <__aeabi_atexit>
    1a66:	nop
    1a68:	.word	0x1fffad30
    1a6c:	.word	0x00000ded
    1a70:	.word	0x1fffcb2c

00001a74 <AudioSynthNoiseWhite::update()>:

// Park-Miller-Carta Pseudo-Random Number Generator
// http://www.firstpr.com.au/dsp/rand31/

void AudioSynthNoiseWhite::update(void)
{
    1a74:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *block;
	uint32_t *p, *end;
	int32_t n1, n2, gain;
	uint32_t lo, hi, val1, val2;

	gain = level;
    1a78:	ldr	r5, [r0, #24]
	if (gain == 0) return;
    1a7a:	cbnz	r5, 1a80 <AudioSynthNoiseWhite::update()+0xc>
    1a7c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a80:	mov	r6, r0
	block = allocate();
    1a82:	bl	5050 <AudioStream::allocate()>
	if (!block) return;
    1a86:	mov	r4, r0
    1a88:	cmp	r0, #0
    1a8a:	beq.n	1a7c <AudioSynthNoiseWhite::update()+0x8>
	p = (uint32_t *)(block->data);
	end = p + AUDIO_BLOCK_SAMPLES/2;
	lo = seed;
    1a8c:	ldr	r3, [r6, #28]

	gain = level;
	if (gain == 0) return;
	block = allocate();
	if (!block) return;
	p = (uint32_t *)(block->data);
    1a8e:	adds	r0, #4
	end = p + AUDIO_BLOCK_SAMPLES/2;
    1a90:	add.w	r7, r4, #260	; 0x104
// computes ((a[15:0] * b[31:16])
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1a94:	movw	r1, #16807	; 0x41a7
    1a98:	smulbt	lr, r1, r3
	do {
#if defined(KINETISK)
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1a9c:	ldr.w	ip, [pc, #184]	; 1b58 <AudioSynthNoiseWhite::update()+0xe4>
	end = p + AUDIO_BLOCK_SAMPLES/2;
	lo = seed;
	do {
#if defined(KINETISK)
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
    1aa0:	uxth	r2, r3
    1aa2:	mov.w	r3, lr, lsr #15
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1aa6:	mov.w	lr, lr, lsl #16
    1aaa:	mla	r3, r1, r2, r3
    1aae:	and.w	ip, lr, ip
    1ab2:	add	r3, ip
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    1ab4:	bic.w	r2, r3, #2147483648	; 0x80000000
    1ab8:	add.w	r3, r2, r3, lsr #31
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1abc:	smulwb	lr, r5, r3
// computes ((a[15:0] * b[31:16])
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1ac0:	smulbt	ip, r1, r3
		n1 = signed_multiply_32x16b(gain, lo);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1ac4:	ldr	r2, [pc, #144]	; (1b58 <AudioSynthNoiseWhite::update()+0xe4>)
    1ac6:	mov.w	r8, ip, lsl #16
    1aca:	and.w	r2, r8, r2
    1ace:	add.w	r2, r2, ip, lsr #15
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
		n1 = signed_multiply_32x16b(gain, lo);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
    1ad2:	uxth	r3, r3
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1ad4:	mla	r3, r1, r3, r2
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    1ad8:	bic.w	r2, r3, #2147483648	; 0x80000000
    1adc:	add.w	r3, r2, r3, lsr #31
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1ae0:	smulwb	r2, r5, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    1ae4:	pkhbt	lr, lr, r2, lsl #16
// computes ((a[15:0] * b[31:16])
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1ae8:	smulbt	ip, r1, r3
		n2 = signed_multiply_32x16b(gain, lo);
		val1 = pack_16b_16b(n2, n1);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1aec:	ldr	r2, [pc, #104]	; (1b58 <AudioSynthNoiseWhite::update()+0xe4>)
    1aee:	mov.w	r8, ip, lsl #16
    1af2:	and.w	r2, r8, r2
		lo += hi >> 15;
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
		n2 = signed_multiply_32x16b(gain, lo);
		val1 = pack_16b_16b(n2, n1);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
    1af6:	uxth	r3, r3
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1af8:	add.w	r2, r2, ip, lsr #15
    1afc:	mla	r2, r1, r3, r2
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    1b00:	bic.w	r3, r2, #2147483648	; 0x80000000
    1b04:	add.w	r2, r3, r2, lsr #31
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1b08:	smulwb	ip, r5, r2
// computes ((a[15:0] * b[31:16])
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_16bx16t(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smulbt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1b0c:	smulbt	r8, r1, r2
		n1 = signed_multiply_32x16b(gain, lo);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1b10:	ldr	r3, [pc, #68]	; (1b58 <AudioSynthNoiseWhite::update()+0xe4>)
    1b12:	mov.w	r9, r8, lsl #16
    1b16:	and.w	r3, r9, r3
    1b1a:	add.w	r3, r3, r8, lsr #15
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
		n1 = signed_multiply_32x16b(gain, lo);
		hi = multiply_16bx16t(16807, lo); // 16807 * (lo >> 16)
		lo = 16807 * (lo & 0xFFFF);
    1b1e:	uxth	r2, r2
		lo += (hi & 0x7FFF) << 16;
		lo += hi >> 15;
    1b20:	mla	r2, r1, r2, r3
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
    1b24:	bic.w	r3, r2, #2147483648	; 0x80000000
    1b28:	add.w	r3, r3, r2, lsr #31
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1b2c:	smulwb	r2, r5, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    1b30:	pkhbt	r2, ip, r2, lsl #16
		n2 = signed_multiply_32x16b(gain, lo);
		val2 = pack_16b_16b(n2, n1);
		*p++ = val1;
    1b34:	str.w	lr, [r0], #8
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
		n2 = signed_multiply_32x16b(gain, lo);
		val1 = pack_16b_16b(n2, n1);
		*p++ = val1;
#endif
	} while (p < end);
    1b38:	cmp	r7, r0
		lo += hi >> 15;
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
		n2 = signed_multiply_32x16b(gain, lo);
		val2 = pack_16b_16b(n2, n1);
		*p++ = val1;
		*p++ = val2;
    1b3a:	str.w	r2, [r0, #-4]
		lo = (lo & 0x7FFFFFFF) + (lo >> 31);
		n2 = signed_multiply_32x16b(gain, lo);
		val1 = pack_16b_16b(n2, n1);
		*p++ = val1;
#endif
	} while (p < end);
    1b3e:	bhi.n	1a98 <AudioSynthNoiseWhite::update()+0x24>
	seed = lo;
	transmit(block);
    1b40:	mov	r0, r6
		n2 = signed_multiply_32x16b(gain, lo);
		val1 = pack_16b_16b(n2, n1);
		*p++ = val1;
#endif
	} while (p < end);
	seed = lo;
    1b42:	str	r3, [r6, #28]
	transmit(block);
    1b44:	mov	r1, r4
    1b46:	movs	r2, #0
    1b48:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    1b4c:	mov	r0, r4
}
    1b4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		*p++ = val1;
#endif
	} while (p < end);
	seed = lo;
	transmit(block);
	release(block);
    1b52:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
    1b56:	nop
    1b58:	.word	0x7fff0000

00001b5c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
bool AudioOutputSPDIF::update_responsibility = false;
uint32_t  AudioOutputSPDIF::vucp = VUCP_VALID;

DMAMEM static uint32_t SPDIF_tx_buffer[AUDIO_BLOCK_SAMPLES * 4]; //2 KB

DMAChannel AudioOutputSPDIF::dma(false);
    1b5c:	ldr	r2, [pc, #8]	; (1b68 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    1b5e:	ldr	r1, [pc, #12]	; (1b6c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    1b60:	ldr	r0, [pc, #12]	; (1b70 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    1b62:	b.w	5a78 <__aeabi_atexit>
    1b66:	nop
    1b68:	.word	0x1fffad30
    1b6c:	.word	0x00000ded
    1b70:	.word	0x1fffcb50

00001b74 <AudioEffectDelay::update()>:

#include <Arduino.h>
#include "effect_delay.h"

void AudioEffectDelay::update(void)
{
    1b74:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, tail, count, channel, index, prev, offset;
	const int16_t *src, *end;
	int16_t *dst;

	// grab incoming data and put it into the queue
	head = headindex;
    1b78:	ldrh	r7, [r0, #26]
	tail = tailindex;
    1b7a:	ldrh	r4, [r0, #28]
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
    1b7c:	adds	r7, #1
    1b7e:	cmp.w	r7, #832	; 0x340
    1b82:	itte	cs
    1b84:	movcs	r5, #0
    1b86:	movcs	r7, r5
    1b88:	uxthcc	r5, r7
	if (head == tail) {
    1b8a:	cmp	r7, r4

#include <Arduino.h>
#include "effect_delay.h"

void AudioEffectDelay::update(void)
{
    1b8c:	mov	r6, r0

	// grab incoming data and put it into the queue
	head = headindex;
	tail = tailindex;
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
	if (head == tail) {
    1b8e:	beq.w	1cbe <AudioEffectDelay::update()+0x14a>
		if (queue[tail] != NULL) release(queue[tail]);
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
	}
	queue[head] = receiveReadOnly();
    1b92:	movs	r1, #0
    1b94:	mov	r0, r6
    1b96:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
    1b9a:	add.w	r3, r7, #16
	//		digitalWriteFast(2, LOW);
	//	}
	//}

	// discard unneeded blocks from the queue
	if (head >= tail) {
    1b9e:	cmp	r7, r4
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
	if (head == tail) {
		if (queue[tail] != NULL) release(queue[tail]);
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
	}
	queue[head] = receiveReadOnly();
    1ba0:	str.w	r0, [r6, r3, lsl #2]
	headindex = head;
    1ba4:	strh	r5, [r6, #26]
	//		digitalWriteFast(2, LOW);
	//	}
	//}

	// discard unneeded blocks from the queue
	if (head >= tail) {
    1ba6:	bcs.w	1ce6 <AudioEffectDelay::update()+0x172>
		count = head - tail;
	} else {
		count = DELAY_QUEUE_SIZE + head - tail;
    1baa:	add.w	r5, r7, #832	; 0x340
    1bae:	subs	r3, r5, r4
	}
	if (count > maxblocks) {
    1bb0:	ldrh	r5, [r6, #30]
    1bb2:	cmp	r3, r5
    1bb4:	bls.n	1bdc <AudioEffectDelay::update()+0x68>
		count -= maxblocks;
    1bb6:	subs	r5, r3, r5
		do {
			if (queue[tail] != NULL) {
				release(queue[tail]);
				queue[tail] = NULL;
    1bb8:	mov.w	r9, #0
    1bbc:	add.w	r8, r6, r4, lsl #2
			}
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1bc0:	adds	r4, #1
		count = DELAY_QUEUE_SIZE + head - tail;
	}
	if (count > maxblocks) {
		count -= maxblocks;
		do {
			if (queue[tail] != NULL) {
    1bc2:	ldr.w	r0, [r8, #64]	; 0x40
    1bc6:	cbz	r0, 1bd0 <AudioEffectDelay::update()+0x5c>
				release(queue[tail]);
    1bc8:	bl	50f8 <AudioStream::release(audio_block_struct*)>
				queue[tail] = NULL;
    1bcc:	str.w	r9, [r8, #64]	; 0x40
			}
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1bd0:	cmp.w	r4, #832	; 0x340
    1bd4:	it	cs
    1bd6:	movcs	r4, #0
	} else {
		count = DELAY_QUEUE_SIZE + head - tail;
	}
	if (count > maxblocks) {
		count -= maxblocks;
		do {
    1bd8:	subs	r5, #1
    1bda:	bne.n	1bbc <AudioEffectDelay::update()+0x48>
		} while (--count > 0);
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    1bdc:	movs	r5, #0
				queue[tail] = NULL;
			}
			if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
		} while (--count > 0);
	}
	tailindex = tail;
    1bde:	strh	r4, [r6, #28]
    1be0:	add.w	r8, r6, #32
				while (dst < end) {
					*dst++ = *src++; // TODO: optimize
				}
			} else {
				while (dst < end) {
					*dst++ = 0;
    1be4:	mov	r4, r5
    1be6:	b.n	1c04 <AudioEffectDelay::update()+0x90>
		} else {
			index = DELAY_QUEUE_SIZE + head - index;
		}
		if (offset == 0) {
			// delay falls on the block boundary
			if (queue[index]) {
    1be8:	add.w	r9, r9, #16
    1bec:	ldr.w	r1, [r6, r9, lsl #2]
    1bf0:	cbz	r1, 1bfa <AudioEffectDelay::update()+0x86>
				transmit(queue[index], channel);
    1bf2:	uxtb	r2, r5
    1bf4:	mov	r0, r6
    1bf6:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		} while (--count > 0);
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    1bfa:	adds	r5, #1
    1bfc:	cmp	r5, #8
    1bfe:	add.w	r8, r8, #4
    1c02:	beq.n	1cba <AudioEffectDelay::update()+0x146>
		if (!(activemask & (1<<channel))) continue;
    1c04:	ldrb	r3, [r6, #24]
    1c06:	asrs	r3, r5
    1c08:	lsls	r3, r3, #31
    1c0a:	bpl.n	1bfa <AudioEffectDelay::update()+0x86>
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
    1c0c:	ldr.w	r2, [r8]
    1c10:	mov.w	r9, r2, lsr #7
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
		if (head >= index) {
    1c14:	cmp	r7, r9
			index = head - index;
		} else {
			index = DELAY_QUEUE_SIZE + head - index;
    1c16:	it	cc
    1c18:	addcc.w	r3, r7, #832	; 0x340

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
		if (!(activemask & (1<<channel))) continue;
		index =  position[channel] / AUDIO_BLOCK_SAMPLES;
		offset = position[channel] % AUDIO_BLOCK_SAMPLES;
    1c1c:	and.w	fp, r2, #127	; 0x7f
		if (head >= index) {
			index = head - index;
    1c20:	ite	cs
    1c22:	rsbcs	r9, r9, r7
		} else {
			index = DELAY_QUEUE_SIZE + head - index;
    1c26:	rsbcc	r9, r9, r3
		}
		if (offset == 0) {
    1c2a:	cmp.w	fp, #0
    1c2e:	beq.n	1be8 <AudioEffectDelay::update()+0x74>
			if (queue[index]) {
				transmit(queue[index], channel);
			}
		} else {
			// delay requires grabbing data from 2 blocks
			output = allocate();
    1c30:	bl	5050 <AudioStream::allocate()>
			if (!output) continue;
    1c34:	mov	sl, r0
    1c36:	cmp	r0, #0
    1c38:	beq.n	1bfa <AudioEffectDelay::update()+0x86>
			dst = output->data;
    1c3a:	adds	r3, r0, #4
			if (index > 0) {
    1c3c:	cmp.w	r9, #0
    1c40:	bne.n	1cea <AudioEffectDelay::update()+0x176>
				prev = index - 1;
			} else {
				prev = DELAY_QUEUE_SIZE-1;
    1c42:	movw	r2, #831	; 0x33f
			}
			if (queue[prev]) {
    1c46:	adds	r2, #16
    1c48:	ldr.w	r2, [r6, r2, lsl #2]
    1c4c:	cmp	r2, #0
    1c4e:	beq.n	1cf8 <AudioEffectDelay::update()+0x184>
				end = queue[prev]->data + AUDIO_BLOCK_SAMPLES;
    1c50:	add.w	lr, r2, #260	; 0x104
				src = end - offset;
    1c54:	sub.w	fp, lr, fp, lsl #1
				while (src < end) {
    1c58:	cmp	lr, fp
    1c5a:	bls.n	1c7c <AudioEffectDelay::update()+0x108>
    1c5c:	add.w	r1, sl, #2
    1c60:	mov	r2, fp
					*dst++ = *src++; // TODO: optimize
    1c62:	ldrsh.w	r0, [r2], #2
    1c66:	strh.w	r0, [r1, #2]!
				prev = DELAY_QUEUE_SIZE-1;
			}
			if (queue[prev]) {
				end = queue[prev]->data + AUDIO_BLOCK_SAMPLES;
				src = end - offset;
				while (src < end) {
    1c6a:	cmp	lr, r2
    1c6c:	bhi.n	1c62 <AudioEffectDelay::update()+0xee>
    1c6e:	mvn.w	r2, fp
    1c72:	add	r2, lr
    1c74:	bic.w	r2, r2, #1
    1c78:	adds	r2, #2
    1c7a:	add	r3, r2
				while (dst < end) {
					*dst++ = 0;
				}
			}
			end = output->data + AUDIO_BLOCK_SAMPLES;
			if (queue[index]) {
    1c7c:	add.w	r9, r9, #16
				end = dst + offset;
				while (dst < end) {
					*dst++ = 0;
				}
			}
			end = output->data + AUDIO_BLOCK_SAMPLES;
    1c80:	add.w	r0, sl, #260	; 0x104
			if (queue[index]) {
    1c84:	ldr.w	r2, [r6, r9, lsl #2]
    1c88:	cmp	r2, #0
    1c8a:	beq.n	1d28 <AudioEffectDelay::update()+0x1b4>
				src = queue[index]->data;
				while (dst < end) {
    1c8c:	cmp	r3, r0
					*dst++ = 0;
				}
			}
			end = output->data + AUDIO_BLOCK_SAMPLES;
			if (queue[index]) {
				src = queue[index]->data;
    1c8e:	add.w	r2, r2, #4
				while (dst < end) {
    1c92:	bcs.n	1ca0 <AudioEffectDelay::update()+0x12c>
					*dst++ = *src++; // TODO: optimize
    1c94:	ldrsh.w	r1, [r2], #2
    1c98:	strh.w	r1, [r3], #2
				}
			}
			end = output->data + AUDIO_BLOCK_SAMPLES;
			if (queue[index]) {
				src = queue[index]->data;
				while (dst < end) {
    1c9c:	cmp	r0, r3
    1c9e:	bhi.n	1c94 <AudioEffectDelay::update()+0x120>
			} else {
				while (dst < end) {
					*dst++ = 0;
				}
			}
			transmit(output, channel);
    1ca0:	uxtb	r2, r5
    1ca2:	mov	r1, sl
    1ca4:	mov	r0, r6
    1ca6:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
		} while (--count > 0);
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    1caa:	adds	r5, #1
				while (dst < end) {
					*dst++ = 0;
				}
			}
			transmit(output, channel);
			release(output);
    1cac:	mov	r0, sl
    1cae:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		} while (--count > 0);
	}
	tailindex = tail;

	// transmit the delayed outputs using queue data
	for (channel = 0; channel < 8; channel++) {
    1cb2:	cmp	r5, #8
    1cb4:	add.w	r8, r8, #4
    1cb8:	bne.n	1c04 <AudioEffectDelay::update()+0x90>
    1cba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cbe:	add.w	r8, r0, r7, lsl #2
	// grab incoming data and put it into the queue
	head = headindex;
	tail = tailindex;
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
	if (head == tail) {
		if (queue[tail] != NULL) release(queue[tail]);
    1cc2:	ldr.w	r0, [r8, #64]	; 0x40
    1cc6:	cbz	r0, 1ccc <AudioEffectDelay::update()+0x158>
    1cc8:	bl	50f8 <AudioStream::release(audio_block_struct*)>
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1ccc:	adds	r4, r7, #1
    1cce:	cmp.w	r4, #832	; 0x340
    1cd2:	bne.w	1b92 <AudioEffectDelay::update()+0x1e>
	}
	queue[head] = receiveReadOnly();
    1cd6:	movs	r1, #0
    1cd8:	mov	r0, r6
    1cda:	bl	5180 <AudioStream::receiveReadOnly(unsigned int)>
	head = headindex;
	tail = tailindex;
	if (++head >= DELAY_QUEUE_SIZE) head = 0;
	if (head == tail) {
		if (queue[tail] != NULL) release(queue[tail]);
		if (++tail >= DELAY_QUEUE_SIZE) tail = 0;
    1cde:	movs	r4, #0
	}
	queue[head] = receiveReadOnly();
    1ce0:	str.w	r0, [r8, #64]	; 0x40
	headindex = head;
    1ce4:	strh	r5, [r6, #26]
	//	}
	//}

	// discard unneeded blocks from the queue
	if (head >= tail) {
		count = head - tail;
    1ce6:	subs	r3, r7, r4
    1ce8:	b.n	1bb0 <AudioEffectDelay::update()+0x3c>
			// delay requires grabbing data from 2 blocks
			output = allocate();
			if (!output) continue;
			dst = output->data;
			if (index > 0) {
				prev = index - 1;
    1cea:	add.w	r2, r9, #4294967295
			} else {
				prev = DELAY_QUEUE_SIZE-1;
			}
			if (queue[prev]) {
    1cee:	adds	r2, #16
    1cf0:	ldr.w	r2, [r6, r2, lsl #2]
    1cf4:	cmp	r2, #0
    1cf6:	bne.n	1c50 <AudioEffectDelay::update()+0xdc>
				src = end - offset;
				while (src < end) {
					*dst++ = *src++; // TODO: optimize
				}
			} else {
				end = dst + offset;
    1cf8:	add.w	r2, r3, fp, lsl #1
				while (dst < end) {
    1cfc:	cmp	r3, r2
    1cfe:	bcs.n	1c7c <AudioEffectDelay::update()+0x108>
    1d00:	mov	r1, r3
					*dst++ = 0;
    1d02:	strh.w	r4, [r1], #2
				while (src < end) {
					*dst++ = *src++; // TODO: optimize
				}
			} else {
				end = dst + offset;
				while (dst < end) {
    1d06:	cmp	r2, r1
    1d08:	bhi.n	1d02 <AudioEffectDelay::update()+0x18e>
    1d0a:	rsb	r2, sl, r2
    1d0e:	subs	r2, #5
    1d10:	bic.w	r2, r2, #1
					*dst++ = 0;
				}
			}
			end = output->data + AUDIO_BLOCK_SAMPLES;
			if (queue[index]) {
    1d14:	add.w	r9, r9, #16
    1d18:	adds	r2, #2
    1d1a:	add	r3, r2
    1d1c:	ldr.w	r2, [r6, r9, lsl #2]
				end = dst + offset;
				while (dst < end) {
					*dst++ = 0;
				}
			}
			end = output->data + AUDIO_BLOCK_SAMPLES;
    1d20:	add.w	r0, sl, #260	; 0x104
			if (queue[index]) {
    1d24:	cmp	r2, #0
    1d26:	bne.n	1c8c <AudioEffectDelay::update()+0x118>
				src = queue[index]->data;
				while (dst < end) {
					*dst++ = *src++; // TODO: optimize
				}
			} else {
				while (dst < end) {
    1d28:	cmp	r3, r0
    1d2a:	bcs.n	1ca0 <AudioEffectDelay::update()+0x12c>
					*dst++ = 0;
    1d2c:	strh.w	r4, [r3], #2
				src = queue[index]->data;
				while (dst < end) {
					*dst++ = *src++; // TODO: optimize
				}
			} else {
				while (dst < end) {
    1d30:	cmp	r0, r3
    1d32:	bhi.n	1d2c <AudioEffectDelay::update()+0x1b8>
    1d34:	b.n	1ca0 <AudioEffectDelay::update()+0x12c>
    1d36:	nop

00001d38 <AudioSynthWaveform::update()>:
// uncomment for more accurate but more computationally expensive frequency modulation
//#define IMPROVE_EXPONENTIAL_ACCURACY


void AudioSynthWaveform::update(void)
{
    1d38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
	if (magnitude == 0) {
    1d3c:	ldr	r3, [r0, #36]	; 0x24
	audio_block_t *block;
	int16_t *bp, *end;
	int32_t val1, val2;
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;
    1d3e:	ldr	r4, [r0, #28]

	ph = phase_accumulator + phase_offset;
    1d40:	ldr	r6, [r0, #24]
// uncomment for more accurate but more computationally expensive frequency modulation
//#define IMPROVE_EXPONENTIAL_ACCURACY


void AudioSynthWaveform::update(void)
{
    1d42:	sub	sp, #20
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
	if (magnitude == 0) {
    1d44:	cbnz	r3, 1d52 <AudioSynthWaveform::update()+0x1a>
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    1d46:	add.w	r4, r6, r4, lsl #7
    1d4a:	str	r4, [r0, #24]
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
		} while (bp < end);
	}
	transmit(block, 0);
	release(block);
}
    1d4c:	add	sp, #20
    1d4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d52:	mov	r5, r0
	int32_t val1, val2;
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
    1d54:	ldr.w	r8, [r0, #32]
	if (magnitude == 0) {
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	block = allocate();
    1d58:	bl	5050 <AudioStream::allocate()>
	if (!block) {
    1d5c:	mov	r7, r0
    1d5e:	cmp	r0, #0
    1d60:	beq.w	1ff2 <AudioSynthWaveform::update()+0x2ba>
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;

	switch(tone_type) {
    1d64:	ldrsh.w	r3, [r5, #50]	; 0x32
	int32_t val1, val2;
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
    1d68:	add.w	r2, r6, r8
    1d6c:	str	r2, [sp, #0]
	block = allocate();
	if (!block) {
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;
    1d6e:	add.w	r8, r0, #4

	switch(tone_type) {
    1d72:	cmp	r3, #8
    1d74:	bhi.n	1dda <AudioSynthWaveform::update()+0xa2>
    1d76:	tbh	[pc, r3, lsl #1]
    1d7a:	.short	0x009b
    1d7c:	.word	0x010000b8
    1d80:	.word	0x00090114
    1d84:	.word	0x00db00c5
    1d88:	.word	0x005000e9
			ph += inc;
		}
		break;

	case WAVEFORM_ARBITRARY:
		if (!arbdata) {
    1d8c:	ldr	r6, [r5, #44]	; 0x2c
    1d8e:	cmp	r6, #0
    1d90:	beq.w	1fee <AudioSynthWaveform::update()+0x2b6>
    1d94:	ldr.w	ip, [r5, #36]	; 0x24
    1d98:	ldr	r1, [sp, #0]
    1d9a:	add.w	lr, r0, #260	; 0x104
    1d9e:	mov	r0, r8
			phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
			return;
		}
		// len = 256
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			index = ph >> 24;
    1da0:	lsrs	r2, r1, #24
			index2 = index + 1;
    1da2:	adds	r3, r2, #1
			if (index2 >= 256) index2 = 0;
    1da4:	cmp.w	r3, #256	; 0x100
    1da8:	ite	ne
    1daa:	lslne	r3, r3, #1
    1dac:	moveq	r3, #0
			val1 = *(arbdata + index);
			val2 = *(arbdata + index2);
			scale = (ph >> 8) & 0xFFFF;
    1dae:	ubfx	r9, r1, #8, #16
static inline int32_t multiply_32x32_rshift32(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_32x32_rshift32(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smmul %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1db2:	ldrsh	r3, [r6, r3]
    1db4:	ldrsh.w	r2, [r6, r2, lsl #1]
    1db8:	mul.w	r3, r9, r3
    1dbc:	rsb	r9, r9, #65536	; 0x10000
    1dc0:	mla	r3, r9, r2, r3
    1dc4:	smmul	r3, r3, ip
			val2 *= scale;
			val1 *= 0x10000 - scale;
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    1dc8:	strh.w	r3, [r0], #2
			release(block);
			phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
			return;
		}
		// len = 256
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1dcc:	cmp	r0, lr
			val2 = *(arbdata + index2);
			scale = (ph >> 8) & 0xFFFF;
			val2 *= scale;
			val1 *= 0x10000 - scale;
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
			ph += inc;
    1dce:	add	r1, r4
			release(block);
			phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
			return;
		}
		// len = 256
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1dd0:	bne.n	1da0 <AudioSynthWaveform::update()+0x68>
    1dd2:	ldr	r3, [sp, #0]
    1dd4:	add.w	r3, r3, r4, lsl #7
    1dd8:	str	r3, [sp, #0]
			}
			ph = newph;
		}
		break;
	}
	phase_accumulator = ph - phase_offset;
    1dda:	ldr	r4, [r5, #32]
    1ddc:	ldr	r2, [sp, #0]

	if (tone_offset) {
    1dde:	ldrsh.w	r3, [r5, #52]	; 0x34
			}
			ph = newph;
		}
		break;
	}
	phase_accumulator = ph - phase_offset;
    1de2:	subs	r4, r2, r4
    1de4:	str	r4, [r5, #24]

	if (tone_offset) {
    1de6:	cbz	r3, 1e04 <AudioSynthWaveform::update()+0xcc>
		bp = block->data;
		end = bp + AUDIO_BLOCK_SAMPLES;
    1de8:	add.w	r1, r7, #260	; 0x104
    1dec:	b.n	1df2 <AudioSynthWaveform::update()+0xba>
    1dee:	ldrsh.w	r3, [r5, #52]	; 0x34
		do {
			val1 = *bp;
    1df2:	ldrsh.w	r2, [r8]
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    1df6:	add	r3, r2
    1df8:	ssat	r3, #16, r3
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
    1dfc:	strh.w	r3, [r8], #2
		} while (bp < end);
    1e00:	cmp	r1, r8
    1e02:	bhi.n	1dee <AudioSynthWaveform::update()+0xb6>
	}
	transmit(block, 0);
    1e04:	mov	r0, r5
    1e06:	movs	r2, #0
    1e08:	mov	r1, r7
    1e0a:	bl	514c <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    1e0e:	mov	r0, r7
}
    1e10:	add	sp, #20
    1e12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			val1 = *bp;
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
		} while (bp < end);
	}
	transmit(block, 0);
	release(block);
    1e16:	b.w	50f8 <AudioStream::release(audio_block_struct*)>
		}
		break;

	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    1e1a:	ldr	r3, [r5, #40]	; 0x28
    1e1c:	str.w	r8, [sp, #8]
    1e20:	mov.w	r9, r3, lsr #1
    1e24:	lsrs	r1, r3, #16
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    1e26:	mvn.w	r2, r9
    1e2a:	str	r2, [sp, #4]
		break;

	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
    1e2c:	rsb	r3, r1, #65280	; 0xff00
		}
		break;

	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    1e30:	mov.w	sl, #4294967295
    1e34:	mov	r6, r8
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
    1e36:	adds	r3, #255	; 0xff
    1e38:	ldr.w	ip, [r5, #36]	; 0x24
    1e3c:	udiv	r3, sl, r3
    1e40:	adds	r0, #6
    1e42:	add.w	fp, r7, #262	; 0x106
	int32_t val1, val2;
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
    1e46:	ldr	r2, [sp, #0]
		}
		break;

	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    1e48:	udiv	sl, sl, r1
    1e4c:	str	r7, [sp, #12]
    1e4e:	mov	lr, r3
    1e50:	ldr.w	r8, [sp, #4]
    1e54:	b.n	1e98 <AudioSynthWaveform::update()+0x160>
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e56:	rsb	r7, r9, r2
    1e5a:	lsrs	r7, r7, #16
    1e5c:	mul.w	r7, lr, r7
    1e60:	mvn.w	r1, #2147483648	; 0x80000000
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e64:	add.w	r3, r9, r2
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e68:	subs	r1, r1, r7
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e6a:	lsrs	r3, r3, #16
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e6c:	asrs	r1, r1, #16
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e6e:	mul.w	r3, sl, r3
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e72:	mul.w	r1, ip, r1
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e76:	add.w	r3, r3, #2147483648	; 0x80000000
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    1e7a:	cmp	r8, r2
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e7c:	mov.w	r1, r1, asr #16
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e80:	mov.w	r3, r3, asr #16
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    1e84:	bls.w	1fe4 <AudioSynthWaveform::update()+0x2ac>
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1e88:	strh	r1, [r6, #0]
    1e8a:	adds	r0, #2

	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1e8c:	cmp	fp, r0
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
			}
			ph += inc;
    1e8e:	add	r2, r4
    1e90:	add.w	r6, r6, #2

	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1e94:	beq.w	1ffc <AudioSynthWaveform::update()+0x2c4>
			if (ph < pulse_width/2) {
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
    1e98:	lsrs	r3, r2, #16
    1e9a:	mul.w	r3, sl, r3
    1e9e:	lsrs	r3, r3, #16
    1ea0:	mul.w	r3, ip, r3
	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width/2) {
    1ea4:	cmp	r9, r2
				uint32_t n = (ph >> 16) * rise;
				*bp++ = ((n >> 16) * magnitude) >> 16;
    1ea6:	mov.w	r3, r3, lsr #16
	case WAVEFORM_TRIANGLE_VARIABLE:
		do {
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width/2) {
    1eaa:	bls.n	1e56 <AudioSynthWaveform::update()+0x11e>
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1eac:	strh	r3, [r6, #0]
    1eae:	b.n	1e8a <AudioSynthWaveform::update()+0x152>
    1eb0:	ldr.w	ip, [r5, #36]	; 0x24
    1eb4:	ldr	r6, [pc, #340]	; (200c <AudioSynthWaveform::update()+0x2d4>)
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;

	switch(tone_type) {
    1eb6:	ldr	r1, [sp, #0]
    1eb8:	add.w	lr, r0, #260	; 0x104
    1ebc:	mov	r0, r8
	case WAVEFORM_SINE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			index = ph >> 24;
    1ebe:	lsrs	r3, r1, #24
			val1 = AudioWaveformSine[index];
			val2 = AudioWaveformSine[index+1];
    1ec0:	adds	r2, r3, #1
static inline int32_t multiply_32x32_rshift32(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline int32_t multiply_32x32_rshift32(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smmul %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1ec2:	ldrsh.w	r9, [r6, r3, lsl #1]
    1ec6:	ldrsh.w	r2, [r6, r2, lsl #1]
			scale = (ph >> 8) & 0xFFFF;
    1eca:	ubfx	sl, r1, #8, #16
    1ece:	rsb	r3, sl, #65536	; 0x10000
    1ed2:	mul.w	r3, r9, r3
    1ed6:	mla	r3, sl, r2, r3
    1eda:	smmul	r3, r3, ip
			val2 *= scale;
			val1 *= 0x10000 - scale;
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    1ede:	strh.w	r3, [r0], #2
	}
	bp = block->data;

	switch(tone_type) {
	case WAVEFORM_SINE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1ee2:	cmp	lr, r0
			val2 = AudioWaveformSine[index+1];
			scale = (ph >> 8) & 0xFFFF;
			val2 *= scale;
			val1 *= 0x10000 - scale;
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
			ph += inc;
    1ee4:	add	r1, r4
	}
	bp = block->data;

	switch(tone_type) {
	case WAVEFORM_SINE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1ee6:	bne.n	1ebe <AudioSynthWaveform::update()+0x186>
    1ee8:	b.n	1dd2 <AudioSynthWaveform::update()+0x9a>
    1eea:	ldr	r6, [r5, #36]	; 0x24
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;

	switch(tone_type) {
    1eec:	ldr	r2, [sp, #0]
    1eee:	add.w	r0, r0, #260	; 0x104
    1ef2:	mov	r3, r8
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1ef4:	smulwt	r1, r6, r2
		}
		break;

	case WAVEFORM_SAWTOOTH:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			*bp++ = signed_multiply_32x16t(magnitude, ph);
    1ef8:	strh.w	r1, [r3], #2
			ph += inc;
		}
		break;

	case WAVEFORM_SAWTOOTH:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1efc:	cmp	r3, r0
			*bp++ = signed_multiply_32x16t(magnitude, ph);
			ph += inc;
    1efe:	add	r2, r4
			ph += inc;
		}
		break;

	case WAVEFORM_SAWTOOTH:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f00:	bne.n	1ef4 <AudioSynthWaveform::update()+0x1bc>
    1f02:	b.n	1dd2 <AudioSynthWaveform::update()+0x9a>
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    1f04:	ldr	r6, [r5, #36]	; 0x24
    1f06:	ssat	r6, #16, r6, asr #1
    1f0a:	ldr	r0, [r5, #40]	; 0x28
	int32_t val1, val2;
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
    1f0c:	ldr	r2, [sp, #0]
		}
		} while (0);
		break;

	case WAVEFORM_PULSE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
    1f0e:	sxth.w	lr, r6
    1f12:	adds	r3, r7, #6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width) {
				*bp++ = magnitude15;
			} else {
				*bp++ = -magnitude15;
    1f14:	negs	r6, r6
    1f16:	add.w	r1, r7, #262	; 0x106
		break;

	case WAVEFORM_PULSE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph < pulse_width) {
    1f1a:	cmp	r0, r2
				*bp++ = magnitude15;
    1f1c:	ite	hi
    1f1e:	strhhi.w	lr, [r3, #-2]
			} else {
				*bp++ = -magnitude15;
    1f22:	strhls.w	r6, [r3, #-2]
    1f26:	adds	r3, #2
		} while (0);
		break;

	case WAVEFORM_PULSE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f28:	cmp	r3, r1
			if (ph < pulse_width) {
				*bp++ = magnitude15;
			} else {
				*bp++ = -magnitude15;
			}
			ph += inc;
    1f2a:	add	r2, r4
		} while (0);
		break;

	case WAVEFORM_PULSE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f2c:	bne.n	1f1a <AudioSynthWaveform::update()+0x1e2>
    1f2e:	b.n	1dd2 <AudioSynthWaveform::update()+0x9a>
    1f30:	ldr	r0, [r5, #36]	; 0x24
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;

	switch(tone_type) {
    1f32:	ldr	r2, [sp, #0]
    1f34:	add.w	r6, r7, #260	; 0x104
    1f38:	mvns	r0, r0
    1f3a:	mov	r3, r8
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    1f3c:	smulwt	r1, r0, r2
		}
		break;

	case WAVEFORM_SAWTOOTH_REVERSE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			*bp++ = signed_multiply_32x16t(0xFFFFFFFFu - magnitude, ph);
    1f40:	strh.w	r1, [r3], #2
			ph += inc;
		}
		break;

	case WAVEFORM_SAWTOOTH_REVERSE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f44:	cmp	r3, r6
			*bp++ = signed_multiply_32x16t(0xFFFFFFFFu - magnitude, ph);
			ph += inc;
    1f46:	add	r2, r4
			ph += inc;
		}
		break;

	case WAVEFORM_SAWTOOTH_REVERSE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f48:	bne.n	1f3c <AudioSynthWaveform::update()+0x204>
    1f4a:	b.n	1dd2 <AudioSynthWaveform::update()+0x9a>
    1f4c:	add.w	sl, r0, #260	; 0x104
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;

	switch(tone_type) {
    1f50:	ldr	r3, [sp, #0]
    1f52:	mov	r9, r8
    1f54:	b.n	1f5e <AudioSynthWaveform::update()+0x226>
			ph += inc;
		}
		break;

	case WAVEFORM_SAMPLE_HOLD:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f56:	cmp	r9, sl
			*bp++ = sample;
			uint32_t newph = ph + inc;
    1f58:	mov	r3, r6
			ph += inc;
		}
		break;

	case WAVEFORM_SAMPLE_HOLD:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f5a:	beq.w	1dd2 <AudioSynthWaveform::update()+0x9a>
			*bp++ = sample;
    1f5e:	ldrsh.w	r2, [r5, #48]	; 0x30
    1f62:	strh.w	r2, [r9], #2
			uint32_t newph = ph + inc;
			if (newph < ph) {
    1f66:	adds	r6, r4, r3
    1f68:	bcc.n	1f56 <AudioSynthWaveform::update()+0x21e>
				sample = random(magnitude) - (magnitude >> 1);
    1f6a:	ldr	r0, [r5, #36]	; 0x24
    1f6c:	bl	4fdc <random(unsigned long)>
    1f70:	ldr	r3, [r5, #36]	; 0x24
    1f72:	sub.w	r0, r0, r3, asr #1
    1f76:	strh	r0, [r5, #48]	; 0x30
    1f78:	b.n	1f56 <AudioSynthWaveform::update()+0x21e>
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    1f7a:	ldr	r6, [r5, #36]	; 0x24
    1f7c:	ssat	r6, #16, r6, asr #1
	int32_t val1, val2;
	int16_t magnitude15;
	uint32_t i, ph, index, index2, scale;
	const uint32_t inc = phase_increment;

	ph = phase_accumulator + phase_offset;
    1f80:	ldr	r2, [sp, #0]
			ph += inc;
		}
		break;

	case WAVEFORM_SQUARE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
    1f82:	sxth	r0, r6
    1f84:	adds	r3, r7, #6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph & 0x80000000) {
				*bp++ = -magnitude15;
    1f86:	negs	r6, r6
    1f88:	add.w	r1, r7, #262	; 0x106
		break;

	case WAVEFORM_SQUARE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			if (ph & 0x80000000) {
    1f8c:	cmp	r2, #0
				*bp++ = -magnitude15;
    1f8e:	ite	lt
    1f90:	strhlt.w	r6, [r3, #-2]
			} else {
				*bp++ = magnitude15;
    1f94:	strhge.w	r0, [r3, #-2]
    1f98:	adds	r3, #2
		}
		break;

	case WAVEFORM_SQUARE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f9a:	cmp	r1, r3
			if (ph & 0x80000000) {
				*bp++ = -magnitude15;
			} else {
				*bp++ = magnitude15;
			}
			ph += inc;
    1f9c:	add	r2, r4
		}
		break;

	case WAVEFORM_SQUARE:
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1f9e:	bne.n	1f8c <AudioSynthWaveform::update()+0x254>
    1fa0:	b.n	1dd2 <AudioSynthWaveform::update()+0x9a>
    1fa2:	adds	r1, r0, #6
    1fa4:	ldr.w	ip, [r5, #36]	; 0x24
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
		return;
	}
	bp = block->data;

	switch(tone_type) {
    1fa8:	ldr	r2, [sp, #0]
    1faa:	add.w	r0, r0, #262	; 0x106
    1fae:	b.n	1fc4 <AudioSynthWaveform::update()+0x28c>
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			uint32_t phtop = ph >> 30;
			if (phtop == 1 || phtop == 2) {
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
			} else {
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
    1fb0:	mul.w	r3, ip, r3
    1fb4:	asrs	r3, r3, #16
    1fb6:	strh.w	r3, [r1, #-2]
    1fba:	adds	r1, #2
			ph += inc;
		}
		break;

	case WAVEFORM_TRIANGLE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1fbc:	cmp	r0, r1
			if (phtop == 1 || phtop == 2) {
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
			} else {
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
			}
			ph += inc;
    1fbe:	add	r2, r4
			ph += inc;
		}
		break;

	case WAVEFORM_TRIANGLE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    1fc0:	beq.w	1dd2 <AudioSynthWaveform::update()+0x9a>
			uint32_t phtop = ph >> 30;
			if (phtop == 1 || phtop == 2) {
    1fc4:	lsrs	r3, r2, #30
    1fc6:	subs	r3, #1
    1fc8:	cmp	r3, #1
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
			} else {
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
    1fca:	mov.w	r3, r2, asr #15
		break;

	case WAVEFORM_TRIANGLE:
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
			uint32_t phtop = ph >> 30;
			if (phtop == 1 || phtop == 2) {
    1fce:	bhi.n	1fb0 <AudioSynthWaveform::update()+0x278>
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    1fd0:	lsrs	r3, r2, #15
    1fd2:	rsb	r3, r3, #65280	; 0xff00
    1fd6:	adds	r3, #255	; 0xff
    1fd8:	mul.w	r3, ip, r3
    1fdc:	lsrs	r3, r3, #16
    1fde:	strh.w	r3, [r1, #-2]
    1fe2:	b.n	1fba <AudioSynthWaveform::update()+0x282>
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
			} else {
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    1fe4:	mul.w	r3, ip, r3
    1fe8:	asrs	r3, r3, #16
    1fea:	strh	r3, [r6, #0]
    1fec:	b.n	1e8a <AudioSynthWaveform::update()+0x152>
		}
		break;

	case WAVEFORM_ARBITRARY:
		if (!arbdata) {
			release(block);
    1fee:	bl	50f8 <AudioStream::release(audio_block_struct*)>
			phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    1ff2:	ldr	r3, [r5, #24]
    1ff4:	add.w	r3, r3, r4, lsl #7
    1ff8:	str	r3, [r5, #24]
			return;
    1ffa:	b.n	1d4c <AudioSynthWaveform::update()+0x14>
    1ffc:	ldr	r3, [sp, #0]
    1ffe:	ldr.w	r8, [sp, #8]
    2002:	ldr	r7, [sp, #12]
    2004:	add.w	r3, r3, r4, lsl #7
    2008:	str	r3, [sp, #0]
    200a:	b.n	1dda <AudioSynthWaveform::update()+0xa2>
    200c:	.word	0x00006658

00002010 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2010:	movs	r0, #0
    2012:	bx	lr

00002014 <TwoWire::available()>:
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
	}
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    2014:	ldrb.w	r2, [r0, #57]	; 0x39
    2018:	ldrb.w	r0, [r0, #56]	; 0x38
	}
    201c:	subs	r0, r2, r0
    201e:	bx	lr

00002020 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2020:	ldrb.w	r3, [r0, #56]	; 0x38
    2024:	ldrb.w	r2, [r0, #57]	; 0x39
    2028:	cmp	r2, r3
    202a:	bls.n	2038 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    202c:	adds	r2, r3, #1
    202e:	add	r3, r0
    2030:	strb.w	r2, [r0, #56]	; 0x38
    2034:	ldrb	r0, [r3, #24]
    2036:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2038:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    203c:	bx	lr
    203e:	nop

00002040 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2040:	ldrb.w	r3, [r0, #56]	; 0x38
    2044:	ldrb.w	r2, [r0, #57]	; 0x39
    2048:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    204a:	itte	hi
    204c:	addhi	r3, r3, r0
    204e:	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    2050:	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    2054:	bx	lr
    2056:	nop

00002058 <TwoWire::flush()>:
	virtual void flush(void) {
    2058:	bx	lr
    205a:	nop

0000205c <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    205c:	push	{r3, r4, r5, lr}
    205e:	mov	r5, r0
	if (transmitting || slave_mode) {
    2060:	ldrh.w	r0, [r0, #94]	; 0x5e
    2064:	cbz	r0, 208c <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    2066:	ldrb.w	r3, [r5, #93]	; 0x5d
    206a:	mov	r4, r2
    206c:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    2070:	cmp	r4, r2
    2072:	bhi.n	208e <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    2074:	add.w	r0, r5, #59	; 0x3b
    2078:	add	r0, r3
    207a:	mov	r2, r4
    207c:	bl	343c <memcpy>
		txBufferLength += quantity;
    2080:	ldrb.w	r3, [r5, #93]	; 0x5d
    2084:	add	r3, r4
    2086:	strb.w	r3, [r5, #93]	; 0x5d
    208a:	mov	r0, r4
		return quantity;
	}
	return 0;
}
    208c:	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    208e:	movs	r0, #1
    2090:	mov	r4, r2
    2092:	strb	r0, [r5, #4]
    2094:	b.n	2074 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    2096:	nop

00002098 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    2098:	ldrh.w	r3, [r0, #94]	; 0x5e
    209c:	cbz	r3, 20ba <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    209e:	ldrb.w	r3, [r0, #93]	; 0x5d
    20a2:	cmp	r3, #32
    20a4:	bhi.n	20b6 <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    20a6:	adds	r2, r0, r3
    20a8:	adds	r3, #1
    20aa:	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    20ae:	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    20b0:	strb.w	r1, [r2, #59]	; 0x3b
    20b4:	bx	lr
    20b6:	movs	r3, #1
    20b8:	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    20ba:	movs	r0, #0
    20bc:	bx	lr
    20be:	nop

000020c0 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    20c0:	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    20c2:	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    20c4:	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    20c8:	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    20cc:	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    20d0:	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    20d4:	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    20d8:	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    20dc:	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    20de:	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    20e0:	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    20e2:	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    20e4:	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    20e6:	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    20e8:	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    20ea:	str	r2, [r1, #0]
	port().C1 = 0;
    20ec:	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    20ee:	ldr	r2, [r0, #20]
    20f0:	ldrb.w	r3, [r0, #97]	; 0x61
    20f4:	ldr	r1, [pc, #88]	; (2150 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    20f6:	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    20f8:	add	r3, r2
    20fa:	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    20fc:	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    20fe:	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2102:	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    2104:	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2106:	and.w	r3, r3, #1792	; 0x700
    210a:	orr.w	r3, r3, #100	; 0x64
    210e:	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    2110:	ldrb.w	r3, [r0, #98]	; 0x62
    2114:	add	r3, r2
    2116:	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2118:	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    211a:	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    211e:	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    2120:	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2122:	and.w	r3, r3, #1792	; 0x700
    2126:	orr.w	r3, r3, #100	; 0x64
    212a:	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    212c:	ldr	r1, [r4, #0]
    212e:	ldr	r3, [r2, #4]
    2130:	tst	r1, r3
    2132:	beq.n	2140 <TwoWire::begin()+0x80>
    2134:	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV64; // 1.0 MHz
	}
	port().FLT = 4;
#elif F_BUS == 60000000
	if (frequency < 400000) {
		port().F = 0x2C;	// 104 kHz
    2136:	movs	r2, #44	; 0x2c
    2138:	strb	r2, [r3, #1]
    213a:	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1C; // 416 kHz
	} else {
		port().F = 0x12; // 938 kHz
	}
	port().FLT = 4;
    213c:	movs	r2, #4
    213e:	strb	r2, [r3, #6]
    2140:	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    2142:	movs	r2, #32
    2144:	strb	r2, [r3, #5]
    2146:	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    2148:	movs	r2, #128	; 0x80
    214a:	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    214c:	pop	{r4, r5}
    214e:	bx	lr
    2150:	.word	0x0000685c

00002154 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    2154:	push	{r3, r4, r5, lr}
    2156:	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    2158:	ldrb	r4, [r2, #3]
    215a:	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    215c:	lsls	r1, r4, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    215e:	mov	r5, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    2160:	bpl.n	21ac <TwoWire::isr()+0x58>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    2162:	movs	r3, #16
    2164:	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    2166:	lsls	r3, r4, #25
    2168:	bpl.n	21aa <TwoWire::isr()+0x56>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    216a:	and.w	r4, r4, #4
    216e:	and.w	r3, r4, #255	; 0xff
    2172:	cmp	r4, #0
    2174:	beq.n	222c <TwoWire::isr()+0xd8>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    2176:	ldr	r1, [pc, #264]	; (2280 <TwoWire::isr()+0x12c>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    2178:	ldr	r2, [r5, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    217a:	movs	r3, #0
    217c:	strb	r3, [r1, #0]
			txBufferLength = 0;
    217e:	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    2182:	cmp	r2, #0
    2184:	beq.n	2254 <TwoWire::isr()+0x100>
				user_onRequest();
    2186:	blx	r2
			}
			if (txBufferLength == 0) {
    2188:	ldrb.w	r3, [r5, #93]	; 0x5d
    218c:	cmp	r3, #0
    218e:	beq.n	2254 <TwoWire::isr()+0x100>
    2190:	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    2192:	movs	r2, #208	; 0xd0
    2194:	strb	r2, [r3, #2]
    2196:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    2198:	ldrb.w	r2, [r5, #59]	; 0x3b
    219c:	strb	r2, [r3, #4]
    219e:	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    21a0:	movs	r2, #1
    21a2:	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    21a6:	movs	r2, #2
    21a8:	strb	r2, [r3, #3]
    21aa:	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    21ac:	and.w	r3, r4, #64	; 0x40
    21b0:	and.w	r0, r3, #255	; 0xff
    21b4:	cmp	r3, #0
    21b6:	bne.n	216a <TwoWire::isr()+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    21b8:	ldrb	r3, [r2, #6]
    21ba:	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    21bc:	and.w	r1, r3, #96	; 0x60
    21c0:	cmp	r1, #96	; 0x60
    21c2:	beq.n	2262 <TwoWire::isr()+0x10e>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    21c4:	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    21c6:	and.w	r3, r3, #16
    21ca:	and.w	r1, r3, #255	; 0xff
    21ce:	cbz	r3, 21fe <TwoWire::isr()+0xaa>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    21d0:	ands.w	r4, r4, #1
    21d4:	bne.n	2246 <TwoWire::isr()+0xf2>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    21d6:	ldrb.w	r3, [r5, #92]	; 0x5c
    21da:	ldrb.w	r1, [r5, #93]	; 0x5d
    21de:	cmp	r1, r3
    21e0:	bls.n	227a <TwoWire::isr()+0x126>
				port().D = txBuffer[txBufferIndex++];
    21e2:	adds	r1, r3, #1
    21e4:	add	r3, r5
    21e6:	strb.w	r1, [r5, #92]	; 0x5c
    21ea:	ldrb.w	r3, [r3, #59]	; 0x3b
    21ee:	strb	r3, [r2, #4]
    21f0:	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    21f2:	movs	r2, #208	; 0xd0
    21f4:	strb	r2, [r3, #2]
    21f6:	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    21f8:	movs	r2, #2
    21fa:	strb	r2, [r3, #3]
    21fc:	b.n	21aa <TwoWire::isr()+0x56>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    21fe:	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    2202:	ldrb	r3, [r2, #6]
    2204:	orr.w	r3, r3, #32
    2208:	strb	r3, [r2, #6]
    220a:	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    220c:	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2210:	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2212:	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    2214:	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    2216:	bhi.n	21a6 <TwoWire::isr()+0x52>
    2218:	ldr	r0, [pc, #100]	; (2280 <TwoWire::isr()+0x12c>)
    221a:	ldrb	r0, [r0, #0]
    221c:	cmp	r0, #0
    221e:	beq.n	21a6 <TwoWire::isr()+0x52>
			rxBuffer[rxBufferLength++] = data;
    2220:	adds	r0, r5, r1
    2222:	adds	r1, #1
    2224:	strb.w	r1, [r5, #57]	; 0x39
    2228:	strb	r2, [r0, #24]
    222a:	b.n	21a6 <TwoWire::isr()+0x52>
    222c:	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    222e:	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2232:	movs	r3, #192	; 0xc0
    2234:	strb	r3, [r2, #2]
    2236:	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    2238:	ldr	r2, [pc, #68]	; (2280 <TwoWire::isr()+0x12c>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    223a:	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    223c:	movs	r1, #1
    223e:	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    2240:	movs	r2, #2
    2242:	strb	r2, [r3, #3]
    2244:	b.n	21aa <TwoWire::isr()+0x56>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    2246:	movs	r3, #192	; 0xc0
    2248:	strb	r3, [r2, #2]
    224a:	ldr	r3, [r5, #16]
			data = port().D;
    224c:	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    224e:	movs	r2, #2
    2250:	strb	r2, [r3, #3]
    2252:	b.n	21aa <TwoWire::isr()+0x56>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2254:	movs	r2, #1
				txBuffer[0] = 0;
    2256:	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    2258:	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    225c:	strb.w	r3, [r5, #59]	; 0x3b
    2260:	b.n	2190 <TwoWire::isr()+0x3c>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    2262:	and.w	r3, r3, #223	; 0xdf
    2266:	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    2268:	ldr	r3, [r5, #104]	; 0x68
    226a:	cbz	r3, 2276 <TwoWire::isr()+0x122>
			rxBufferIndex = 0;
    226c:	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    2270:	ldrb.w	r0, [r5, #57]	; 0x39
    2274:	blx	r3
    2276:	ldr	r2, [r5, #16]
    2278:	b.n	21c4 <TwoWire::isr()+0x70>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    227a:	strb	r4, [r2, #4]
    227c:	b.n	21f0 <TwoWire::isr()+0x9c>
    227e:	nop
    2280:	.word	0x1fffcb58

00002284 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    2284:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2288:	ldr	r7, [pc, #220]	; (2368 <L_1438_delayMicroseconds+0x18>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    228a:	ldr.w	r9, [pc, #224]	; 236c <L_1438_delayMicroseconds+0x1c>
    228e:	ldr	r3, [r7, #0]
    2290:	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    2292:	sub	sp, #8
    2294:	mov	r6, r0
    2296:	str	r3, [sp, #0]
	return ret;
    2298:	ldr.w	r8, [sp]
	bool reset=false;
    229c:	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    229e:	mov.w	r5, #300	; 0x12c
	uint8_t i2c_status(void) {
		return port().S;
    22a2:	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    22a4:	lsls	r3, r3, #26
    22a6:	bpl.n	2360 <L_1438_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22a8:	ldr	r3, [r7, #0]
    22aa:	str	r3, [sp, #4]
	return ret;
    22ac:	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    22ae:	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    22b2:	cmp	r3, #15
    22b4:	bls.n	22a2 <TwoWire::wait_idle()+0x1e>
    22b6:	cbz	r1, 22cc <TwoWire::wait_idle()+0x48>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    22b8:	cmp	r3, #16
    22ba:	beq.n	22a2 <TwoWire::wait_idle()+0x1e>
			// bus stuck busy too long
			port().C1 = 0;
    22bc:	movs	r0, #0
    22be:	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    22c0:	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    22c2:	movs	r2, #128	; 0x80
    22c4:	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    22c6:	add	sp, #8
    22c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    22cc:	ldr	r2, [r6, #20]
    22ce:	ldrb.w	r3, [r6, #97]	; 0x61
    22d2:	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    22d4:	movs	r1, #5
    22d6:	ldrb	r0, [r3, #8]
    22d8:	bl	3b10 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    22dc:	ldr	r2, [r6, #20]
    22de:	ldrb.w	r3, [r6, #97]	; 0x61
    22e2:	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    22e4:	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    22e6:	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    22ea:	mov	r0, sl
    22ec:	bl	3b10 <pinMode>
    22f0:	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    22f2:	movs	r1, #0
    22f4:	mov	r0, sl
    22f6:	bl	3b04 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    22fa:	mov	r3, r5

000022fc <L_1373_delayMicroseconds>:
    22fc:	subs	r3, #1
    22fe:	bne.n	22fc <L_1373_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    2300:	movs	r1, #1
    2302:	mov	r0, sl
    2304:	bl	3b04 <digitalWrite>
    2308:	mov	r3, r5

0000230a <L_1387_delayMicroseconds>:
    230a:	subs	r3, #1
    230c:	bne.n	230a <L_1387_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    230e:	subs	r4, #1
    2310:	bne.n	22f2 <TwoWire::wait_idle()+0x6e>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    2312:	ldr	r0, [r6, #20]
    2314:	ldrb.w	r1, [r6, #97]	; 0x61
    2318:	add	r1, r0
    231a:	mov.w	r2, #600	; 0x258
    231e:	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2320:	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    2322:	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2326:	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    2328:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    232a:	and.w	r3, r3, #1792	; 0x700
    232e:	orr.w	r3, r3, #100	; 0x64
    2332:	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    2334:	ldrb.w	r3, [r6, #98]	; 0x62
    2338:	add	r3, r0
    233a:	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    233c:	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    233e:	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2342:	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    2344:	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    2346:	and.w	r3, r3, #1792	; 0x700
    234a:	orr.w	r3, r3, #100	; 0x64
    234e:	str	r3, [r1, #0]

00002350 <L_1438_delayMicroseconds>:
    2350:	subs	r2, #1
    2352:	bne.n	2350 <L_1438_delayMicroseconds>
    2354:	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    2356:	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    2358:	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    235a:	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    235e:	bmi.n	22a8 <TwoWire::wait_idle()+0x24>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    2360:	movs	r0, #1
}
    2362:	add	sp, #8
    2364:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2368:	.word	0x1fffcdec
    236c:	.word	0x0000685c

00002370 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2370:	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    2372:	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    2374:	movs	r2, #18
    2376:	strb	r2, [r3, #3]
    2378:	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    237a:	ldrb	r3, [r2, #2]
    237c:	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2380:	sub	sp, #20
    2382:	mov	r4, r0
    2384:	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    2386:	cmp	r3, #0
    2388:	beq.n	2448 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    238a:	movs	r3, #180	; 0xb4
    238c:	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    238e:	ldr	r1, [pc, #240]	; (2480 <TwoWire::endTransmission(unsigned char)+0x110>)
    2390:	ldr	r2, [r4, #16]
    2392:	ldr	r3, [r1, #0]
    2394:	str	r3, [sp, #0]
	return ret;
    2396:	ldr	r6, [sp, #0]
    2398:	b.n	23a6 <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    239a:	ldr	r3, [r1, #0]
    239c:	str	r3, [sp, #4]
	return ret;
    239e:	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    23a0:	subs	r3, r3, r6
    23a2:	cmp	r3, #4
    23a4:	bhi.n	242c <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    23a6:	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    23a8:	and.w	r3, r3, #32
    23ac:	and.w	r0, r3, #255	; 0xff
    23b0:	cmp	r3, #0
    23b2:	beq.n	239a <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    23b4:	ldrb.w	r3, [r4, #93]	; 0x5d
    23b8:	cmp	r3, #0
    23ba:	beq.n	2420 <TwoWire::endTransmission(unsigned char)+0xb0>
    23bc:	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    23c0:	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    23c4:	add.w	r3, r4, lr
    23c8:	ldrb.w	r3, [r3, #59]	; 0x3b
    23cc:	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23ce:	ldr	r3, [r1, #0]
    23d0:	str	r3, [sp, #12]
	return ret;
    23d2:	ldr	r7, [sp, #12]
    23d4:	ldr	r0, [r4, #16]
    23d6:	b.n	23e8 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    23d8:	lsls	r3, r3, #26
    23da:	bpl.n	23f8 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23dc:	ldr	r3, [r1, #0]
    23de:	str	r3, [sp, #8]
	return ret;
    23e0:	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    23e2:	subs	r3, r3, r7
    23e4:	cmp	r3, #5
    23e6:	bhi.n	243a <TwoWire::endTransmission(unsigned char)+0xca>
    23e8:	ldrb	r3, [r0, #3]
    23ea:	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    23ec:	and.w	r2, r3, #2
    23f0:	and.w	r6, r2, #255	; 0xff
    23f4:	cmp	r2, #0
    23f6:	beq.n	23d8 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    23f8:	strb.w	ip, [r0, #3]
    23fc:	ldr	r6, [r4, #16]
    23fe:	ldrb	r3, [r6, #3]
    2400:	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    2402:	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    2404:	mov	r2, r6
    2406:	bmi.n	2464 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    2408:	lsls	r7, r3, #26
    240a:	bpl.n	2464 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    240c:	lsls	r3, r3, #31
    240e:	bmi.n	2474 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    2410:	add.w	lr, lr, #1
    2414:	ldrb.w	r3, [r4, #93]	; 0x5d
    2418:	uxtb.w	lr, lr
    241c:	cmp	r3, lr
    241e:	bhi.n	23c4 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    2420:	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    2422:	cbnz	r5, 246c <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    2424:	movs	r3, #0
    2426:	strb.w	r3, [r4, #94]	; 0x5e
    242a:	b.n	2436 <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    242c:	strb	r0, [r2, #2]
    242e:	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    2430:	movs	r2, #128	; 0x80
    2432:	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    2434:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    2436:	add	sp, #20
    2438:	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    243a:	strb	r6, [r0, #2]
    243c:	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    243e:	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    2440:	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    2442:	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    2444:	add	sp, #20
    2446:	pop	{r4, r5, r6, r7, pc}
    2448:	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    244c:	bl	2284 <TwoWire::wait_idle()>
    2450:	cbnz	r0, 2458 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    2452:	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    2454:	add	sp, #20
    2456:	pop	{r4, r5, r6, r7, pc}
    2458:	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    245a:	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    245e:	movs	r2, #176	; 0xb0
    2460:	strb	r2, [r3, #2]
    2462:	b.n	238e <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    2464:	movs	r3, #128	; 0x80
    2466:	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    2468:	movs	r0, #4
    246a:	b.n	2422 <TwoWire::endTransmission(unsigned char)+0xb2>
    246c:	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    246e:	movs	r3, #128	; 0x80
    2470:	strb	r3, [r6, #2]
    2472:	b.n	2424 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    2474:	cmp.w	lr, #0
    2478:	ite	eq
    247a:	moveq	r0, #2
    247c:	movne	r0, #3
    247e:	b.n	246e <TwoWire::endTransmission(unsigned char)+0xfe>
    2480:	.word	0x1fffcdec

00002484 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    2484:	ldr	r0, [pc, #4]	; (248c <i2c0_isr+0x8>)
    2486:	b.w	2154 <TwoWire::isr()>
    248a:	nop
    248c:	.word	0x1fffae80

00002490 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    2490:	ldr	r0, [pc, #4]	; (2498 <i2c1_isr+0x8>)
    2492:	b.w	2154 <TwoWire::isr()>
    2496:	nop
    2498:	.word	0x1fffaeec

0000249c <i2c2_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    249c:	ldr	r0, [pc, #4]	; (24a4 <i2c2_isr+0x8>)
    249e:	b.w	2154 <TwoWire::isr()>
    24a2:	nop
    24a4:	.word	0x1fffae14

000024a8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    24a8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    24aa:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    24ac:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    24ae:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    24b0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    24b2:	beq.n	24bc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    24b4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    24b8:	b.w	4c40 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    24bc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    24be:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    24c2:	bx	r3

000024c4 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    24c4:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    24c6:	ldr	r3, [pc, #280]	; (25e0 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    24c8:	ldr	r2, [pc, #280]	; (25e4 <_spi_dma_rxISR0()+0x120>)
    24ca:	ldr	r0, [r3, #56]	; 0x38
    24cc:	ldr	r4, [r3, #52]	; 0x34
    24ce:	ldrb	r1, [r0, #4]
    24d0:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    24d2:	ldr	r1, [pc, #276]	; (25e8 <_spi_dma_rxISR0()+0x124>)
    24d4:	ldrb	r2, [r4, #4]
    24d6:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    24d8:	ldr	r2, [r3, #48]	; 0x30
    24da:	ldrb	r0, [r0, #4]
    24dc:	strb	r0, [r1, #0]
    24de:	cmp	r2, #0
    24e0:	beq.n	2570 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    24e2:	ldr	r1, [r3, #4]
    24e4:	ldr	r1, [r1, #12]
    24e6:	cmp	r2, r1
    24e8:	bhi.n	2568 <_spi_dma_rxISR0()+0xa4>
    24ea:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    24ec:	ldrh	r4, [r1, #30]
    24ee:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    24f0:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    24f4:	bmi.n	25c2 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    24f6:	ubfx	r0, r0, #0, #15
    24fa:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    24fc:	ldrh	r0, [r1, #30]
    24fe:	uxth	r0, r0
    2500:	strh	r0, [r1, #22]
    2502:	ldr	r1, [r3, #56]	; 0x38
    2504:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2506:	ldrh	r0, [r1, #30]
    2508:	lsls	r0, r0, #16
    250a:	bmi.n	25b2 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    250c:	ubfx	r0, r2, #0, #15
    2510:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2512:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2514:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    2516:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    2518:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    251c:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    251e:	it	ne
    2520:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    2522:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    2524:	ldr	r1, [r3, #52]	; 0x34
    2526:	ldr	r0, [pc, #184]	; (25e0 <_spi_dma_rxISR0()+0x11c>)
    2528:	ldr	r1, [r1, #0]
    252a:	ldr	r5, [r1, #0]
    252c:	add.w	r4, r0, #44	; 0x2c
    2530:	cmp	r5, r4
    2532:	beq.n	25a2 <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2534:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2536:	ldr	r4, [r0, #12]
    2538:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    253c:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    253e:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2540:	itete	ne
    2542:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    2544:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2546:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2548:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    254a:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    254e:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2550:	str	r4, [r0, #52]	; 0x34
    2552:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2554:	ldr	r3, [pc, #148]	; (25ec <_spi_dma_rxISR0()+0x128>)
    2556:	ldrb	r1, [r1, #4]
    2558:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    255a:	ldr	r1, [pc, #132]	; (25e0 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    255c:	cbz	r2, 2564 <_spi_dma_rxISR0()+0xa0>
    255e:	ldr	r2, [r1, #52]	; 0x34
    2560:	ldrb	r2, [r2, #4]
    2562:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2564:	pop	{r4, r5, r6, r7}
    2566:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    2568:	subs	r2, r2, r1
    256a:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    256c:	movs	r2, #1
    256e:	b.n	2524 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2570:	ldr	r0, [r3, #60]	; 0x3c
    2572:	ldr	r1, [r3, #0]
    2574:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2576:	ldr	r4, [pc, #120]	; (25f0 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    2578:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    257a:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    257c:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    257e:	ldr	r5, [r5, #0]
    2580:	ldr	r6, [pc, #112]	; (25f4 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2582:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2586:	movs	r7, #3
    2588:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    258a:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    258c:	strb.w	r7, [r3, #45]	; 0x2d
    2590:	bne.n	25d2 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2592:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2594:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2596:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2598:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    259a:	beq.n	25da <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    259c:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    259e:	b.w	4c40 <EventResponder::triggerEventNotImmediate()>
    25a2:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    25a4:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    25a8:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    25aa:	orr.w	r0, r0, #2147483648	; 0x80000000
    25ae:	str	r0, [r1, #52]	; 0x34
    25b0:	b.n	2552 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    25b2:	ldrh	r4, [r1, #30]
    25b4:	ubfx	r0, r2, #0, #9
    25b8:	and.w	r4, r4, #65024	; 0xfe00
    25bc:	orrs	r0, r4
    25be:	strh	r0, [r1, #30]
    25c0:	b.n	2512 <_spi_dma_rxISR0()+0x4e>
    25c2:	ldrh	r4, [r1, #30]
    25c4:	ubfx	r0, r0, #0, #9
    25c8:	and.w	r4, r4, #65024	; 0xfe00
    25cc:	orrs	r0, r4
    25ce:	strh	r0, [r1, #30]
    25d0:	b.n	24fc <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25d2:	mov	r3, r5
    25d4:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25d6:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    25d8:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    25da:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    25dc:	pop	{r4, r5, r6, r7}
    25de:	bx	r3
    25e0:	.word	0x1fffaf58
    25e4:	.word	0x4000801f
    25e8:	.word	0x4000801c
    25ec:	.word	0x4000801b
    25f0:	.word	0xff0f0000
    25f4:	.word	0x000024a9

000025f8 <Print::flush()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
    25f8:	bx	lr
    25fa:	nop

000025fc <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
    25fc:	ldr	r3, [pc, #24]	; (2618 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    25fe:	ldr	r2, [pc, #28]	; (261c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
    2600:	str	r2, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    2602:	movs	r1, #2
    2604:	movs	r2, #0
    2606:	str	r1, [r3, #4]
    2608:	strb	r2, [r3, #2]
    260a:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    260e:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    2612:	strb.w	r2, [r3, #50]	; 0x32
    2616:	bx	lr
    2618:	.word	0x1fffcb5c
    261c:	.word	0x00006648

00002620 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    2620:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    2622:	ldr	r4, [pc, #104]	; (268c <SdVolume::cacheFlush()+0x6c>)
    2624:	ldrb	r3, [r4, #0]
    2626:	cbnz	r3, 262c <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2628:	movs	r0, #1
}
    262a:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    262c:	ldr	r5, [pc, #96]	; (2690 <SdVolume::cacheFlush()+0x70>)
    262e:	ldr	r3, [pc, #100]	; (2694 <SdVolume::cacheFlush()+0x74>)
    2630:	ldr	r0, [r5, #0]
    2632:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2634:	ldrb	r3, [r0, #0]
    2636:	cmp	r3, #254	; 0xfe
    2638:	beq.n	266a <SdVolume::cacheFlush()+0x4a>
      return (KinetisSDHC_WriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    263a:	ldr	r2, [pc, #92]	; (2698 <SdVolume::cacheFlush()+0x78>)
    263c:	bl	2ff8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    2640:	cbz	r0, 2666 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2642:	ldr	r6, [pc, #88]	; (269c <SdVolume::cacheFlush()+0x7c>)
    2644:	ldr	r1, [r6, #0]
    2646:	cbnz	r1, 2650 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    2648:	movs	r3, #0
    264a:	strb	r3, [r4, #0]
  }
  return true;
    264c:	movs	r0, #1
    264e:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2650:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2652:	ldrb	r3, [r0, #0]
    2654:	cmp	r3, #254	; 0xfe
    2656:	beq.n	2678 <SdVolume::cacheFlush()+0x58>
      return (KinetisSDHC_WriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2658:	ldr	r2, [pc, #60]	; (2698 <SdVolume::cacheFlush()+0x78>)
    265a:	bl	2ff8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
    265e:	cbz	r0, 2666 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2660:	movs	r3, #0
    2662:	str	r3, [r6, #0]
    2664:	b.n	2648 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    2666:	movs	r0, #0
    2668:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (KinetisSDHC_WriteBlock(src, block) == 0) ? true : false;
    266a:	ldr	r0, [pc, #44]	; (2698 <SdVolume::cacheFlush()+0x78>)
    266c:	bl	3274 <KinetisSDHC_WriteBlock>
    2670:	clz	r0, r0
    2674:	lsrs	r0, r0, #5
    2676:	b.n	2640 <SdVolume::cacheFlush()+0x20>
    2678:	ldr	r0, [pc, #28]	; (2698 <SdVolume::cacheFlush()+0x78>)
    267a:	bl	3274 <KinetisSDHC_WriteBlock>
    267e:	clz	r0, r0
    2682:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2684:	cmp	r0, #0
    2686:	bne.n	2660 <SdVolume::cacheFlush()+0x40>
    2688:	b.n	2666 <SdVolume::cacheFlush()+0x46>
    268a:	nop
    268c:	.word	0x1fffcdb8
    2690:	.word	0x1fffcbb4
    2694:	.word	0x1fffaf98
    2698:	.word	0x1fffcbb8
    269c:	.word	0x1fffcbb0

000026a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    26a0:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
    26a2:	ldr	r5, [pc, #72]	; (26ec <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    26a4:	ldr	r3, [r5, #0]
    26a6:	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    26a8:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
    26aa:	beq.n	26d0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
    26ac:	mov	r4, r0
    if (!cacheFlush()) return false;
    26ae:	bl	2620 <SdVolume::cacheFlush()>
    26b2:	cbnz	r0, 26b8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
    26b4:	movs	r0, #0
    26b6:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    26b8:	ldr	r3, [pc, #52]	; (26f0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
    26ba:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    26bc:	ldrb	r3, [r0, #0]
    26be:	cmp	r3, #254	; 0xfe
    26c0:	beq.n	26dc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (KinetisSDHC_ReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
    26c2:	ldr	r2, [pc, #48]	; (26f4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    26c4:	mov	r1, r4
    26c6:	bl	2e6c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
    26ca:	cmp	r0, #0
    26cc:	beq.n	26b4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    26ce:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
    26d0:	ldr	r3, [pc, #36]	; (26f8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
    26d2:	ldrb	r1, [r3, #0]
    26d4:	orrs	r1, r6
    26d6:	strb	r1, [r3, #0]
  return true;
    26d8:	movs	r0, #1
}
    26da:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (KinetisSDHC_ReadBlock(dst, block) == 0) ? true : false;
    26dc:	mov	r1, r4
    26de:	ldr	r0, [pc, #20]	; (26f4 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
    26e0:	bl	3170 <KinetisSDHC_ReadBlock>
    26e4:	clz	r0, r0
    26e8:	lsrs	r0, r0, #5
    26ea:	b.n	26ca <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
    26ec:	.word	0x1fffaf98
    26f0:	.word	0x1fffcbb4
    26f4:	.word	0x1fffcbb8
    26f8:	.word	0x1fffcdb8

000026fc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    26fc:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    26fe:	ldrb.w	r3, [r0, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2702:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2704:	cmp	r3, #16

  if (lba != cacheBlockNumber_) {
    2706:	ldr	r3, [pc, #104]	; (2770 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2708:	mov	r5, r0
    270a:	mov	r6, r1
    270c:	mov	r7, r2

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    270e:	ldr	r3, [r3, #0]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2710:	beq.n	2740 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
    2712:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
    2716:	cmp	r4, r3
    2718:	bne.n	2748 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    271a:	and.w	r6, r6, #127	; 0x7f
    271e:	ldr	r2, [pc, #84]	; (2774 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    2720:	str.w	r7, [r2, r6, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2724:	ldr	r1, [pc, #80]	; (2778 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2726:	ldrb	r0, [r5, #24]
    2728:	ldrb	r2, [r1, #0]
    272a:	cmp	r0, #1
    272c:	orr.w	r2, r2, #1
    2730:	strb	r2, [r1, #0]
    2732:	bls.n	2766 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6a>
    2734:	ldr	r1, [r5, #8]
    2736:	ldr	r2, [pc, #68]	; (277c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
    2738:	add	r3, r1
    273a:	str	r3, [r2, #0]
  return true;
    273c:	movs	r0, #1
    273e:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2740:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
    2744:	cmp	r4, r3
    2746:	beq.n	275a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x5e>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2748:	movs	r1, #0
    274a:	mov	r0, r4
    274c:	bl	26a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2750:	cbz	r0, 2768 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
  }
  // store entry
  if (fatType_ == 16) {
    2752:	ldrb.w	r3, [r5, #32]
    2756:	cmp	r3, #16
    2758:	bne.n	276a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    275a:	uxtb	r6, r6
    275c:	ldr	r2, [pc, #20]	; (2774 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
    275e:	mov	r3, r4
    2760:	strh.w	r7, [r2, r6, lsl #1]
    2764:	b.n	2724 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
    2766:	movs	r0, #1
}
    2768:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    276a:	mov	r3, r4
    276c:	b.n	271a <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
    276e:	nop
    2770:	.word	0x1fffaf98
    2774:	.word	0x1fffcbb8
    2778:	.word	0x1fffcdb8
    277c:	.word	0x1fffcbb0

00002780 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    2780:	ldr	r3, [r0, #12]
    2782:	adds	r3, #1
    2784:	cmp	r3, r1
    2786:	bcc.n	27ba <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2788:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    278a:	ldrb.w	r3, [r0, #32]
    278e:	cmp	r3, #16
  if (lba != cacheBlockNumber_) {
    2790:	ldr	r3, [pc, #84]	; (27e8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x68>)
    2792:	mov	r4, r0
    2794:	mov	r6, r2
    2796:	mov	r5, r1
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    2798:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    279a:	ldr	r3, [r3, #0]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    279c:	beq.n	27be <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
    279e:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
    27a2:	cmp	r0, r3
    27a4:	bne.n	27c6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x46>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    27a6:	and.w	r1, r5, #127	; 0x7f
    27aa:	ldr	r3, [pc, #64]	; (27ec <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    27ac:	ldr.w	r3, [r3, r1, lsl #2]
    27b0:	bic.w	r3, r3, #4026531840	; 0xf0000000
    27b4:	str	r3, [r6, #0]
    27b6:	movs	r0, #1
  }
  return true;
}
    27b8:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    27ba:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    27bc:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    27be:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
    27c2:	cmp	r0, r3
    27c4:	beq.n	27d6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x56>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    27c6:	movs	r1, #0
    27c8:	bl	26a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    27cc:	cbz	r0, 27e4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
  }
  if (fatType_ == 16) {
    27ce:	ldrb.w	r3, [r4, #32]
    27d2:	cmp	r3, #16
    27d4:	bne.n	27a6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    27d6:	uxtb	r1, r5
    27d8:	ldr	r3, [pc, #16]	; (27ec <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
    27da:	ldrh.w	r3, [r3, r1, lsl #1]
    27de:	str	r3, [r6, #0]
    27e0:	movs	r0, #1
    27e2:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    27e4:	movs	r0, #0
    27e6:	pop	{r4, r5, r6, pc}
    27e8:	.word	0x1fffaf98
    27ec:	.word	0x1fffcbb8

000027f0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    27f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    27f4:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    27f6:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    27f8:	cbz	r7, 2856 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    27fa:	adds	r7, #1

    // don't save new start location
    setStart = false;
    27fc:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2800:	ldr	r3, [r0, #12]
    2802:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2806:	cbz	r3, 284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2808:	mov	fp, r1
    280a:	mov	r6, r0
    280c:	mov	r9, r2
    280e:	mov	r4, r7
    2810:	movs	r5, #0
    2812:	b.n	2820 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2814:	mov	r4, r3
    2816:	mov	r7, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2818:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    281a:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    281c:	cmp	r3, r5
    281e:	bls.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2820:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    2822:	it	cc
    2824:	movcc	r4, #2
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2826:	mov	r1, r4
    2828:	add	r2, sp, #4
    282a:	mov	r0, r6
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    282c:	it	cc
    282e:	movcc	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2830:	bl	2780 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2834:	adds	r3, r4, #1

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2836:	subs	r1, r3, r7
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2838:	cbz	r0, 284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

    if (f != 0) {
    283a:	ldr	r2, [sp, #4]
    283c:	cmp	r2, #0
    283e:	bne.n	2814 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    2840:	cmp	fp, r1
    2842:	beq.n	2866 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x76>
    2844:	mov	r4, r3
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2846:	ldr	r3, [r6, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2848:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    284a:	cmp	r3, r5
    284c:	bhi.n	2820 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    284e:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    2850:	add	sp, #12
    2852:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    2856:	sub.w	sl, r1, #1
    285a:	clz	sl, sl

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    285e:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
    2860:	mov.w	sl, sl, lsr #5
    2864:	b.n	2800 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2866:	cmp	r4, #1
    2868:	bls.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    286a:	ldr	r3, [r6, #12]
    286c:	adds	r3, #1
    286e:	cmp	r4, r3
    2870:	bhi.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2872:	mvn.w	r2, #4026531840	; 0xf0000000
    2876:	mov	r1, r4
    2878:	mov	r0, r6
    287a:	bl	26fc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    287e:	cmp	r0, #0
    2880:	beq.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // link clusters
  while (endCluster > bgnCluster) {
    2882:	cmp	r7, r4
    2884:	bcs.n	28b0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2886:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    2888:	cmp	r4, #1
    288a:	bls.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    288c:	ldr	r3, [r6, #12]
    288e:	adds	r3, #1
    2890:	cmp	r4, r3
    2892:	bhi.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    2894:	adds	r2, r4, #1
    2896:	mov	r1, r4
    2898:	mov	r0, r6
    289a:	bl	26fc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    289e:	cmp	r0, #0
    28a0:	beq.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    28a2:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    28a4:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    28a8:	beq.n	28b0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc0>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    28aa:	cmp	r4, #1
    28ac:	bne.n	288c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9c>
    28ae:	b.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    28b0:	ldr.w	r1, [r9]
    28b4:	cbz	r1, 28ce <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xde>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    28b6:	cmp	r1, #1
    28b8:	bls.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    28ba:	ldr	r3, [r6, #12]
    28bc:	adds	r3, #1
    28be:	cmp	r1, r3
    28c0:	bhi.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    28c2:	mov	r2, r7
    28c4:	mov	r0, r6
    28c6:	bl	26fc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    28ca:	cmp	r0, #0
    28cc:	beq.n	284e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    28ce:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    28d2:	cmp.w	sl, #0
    28d6:	beq.n	28dc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xec>
    28d8:	adds	r7, #1
    28da:	str	r7, [r6, #0]

  return true;
    28dc:	movs	r0, #1
    28de:	b.n	2850 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

000028e0 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    28e0:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    28e2:	ldrsb.w	r3, [r0, #5]
    28e6:	cmp	r3, #0
    28e8:	blt.n	28f2 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    28ea:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    28ee:	b.w	2620 <SdVolume::cacheFlush()>
    28f2:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    28f4:	movs	r1, #1
    28f6:	ldr	r0, [r0, #16]
    28f8:	bl	26a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    28fc:	cbz	r0, 293e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    28fe:	ldrb	r5, [r4, #20]
    2900:	ldr	r3, [pc, #64]	; (2944 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    2902:	adds.w	r5, r3, r5, lsl #5
    2906:	beq.n	293e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2908:	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    290a:	ldr	r2, [pc, #60]	; (2948 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    290c:	cmp	r3, #1
    290e:	itt	ls
    2910:	ldrls	r3, [r4, #24]
    2912:	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2914:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    2916:	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2918:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    291a:	lsrs	r3, r3, #16
    291c:	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    291e:	cbz	r2, 292e <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4e>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2920:	add.w	r1, r5, #22
    2924:	add.w	r0, r5, #24
    2928:	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    292a:	ldrh	r3, [r5, #24]
    292c:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    292e:	ldrb	r3, [r4, #5]
    2930:	and.w	r3, r3, #127	; 0x7f
    2934:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    2936:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    293a:	b.w	2620 <SdVolume::cacheFlush()>
}
    293e:	movs	r0, #0
    2940:	pop	{r3, r4, r5, pc}
    2942:	nop
    2944:	.word	0x1fffcbb8
    2948:	.word	0x1fffcdbc

0000294c <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    294c:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    294e:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2952:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    2954:	movs	r1, #1
    2956:	ldr	r0, [r0, #32]
    2958:	bl	27f0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    295c:	cbz	r0, 2974 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    295e:	ldr	r3, [r4, #28]
    2960:	cbnz	r3, 2972 <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    2962:	ldrb	r3, [r4, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    2964:	ldr	r2, [r4, #8]
    2966:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    2968:	orn	r3, r3, #127	; 0x7f
    296c:	strb	r3, [r4, #5]
    296e:	movs	r0, #1
    2970:	pop	{r4, pc}
  }
  return true;
    2972:	movs	r0, #1
}
    2974:	pop	{r4, pc}
    2976:	nop

00002978 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    2978:	push	{r3, r4, r5, r6, r7, lr}
    297a:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    297c:	cbz	r3, 2984 <SdFile::seekSet(unsigned long)+0xc>
    297e:	ldr	r2, [r0, #24]
    2980:	cmp	r2, r1
    2982:	bcs.n	2988 <SdFile::seekSet(unsigned long)+0x10>
    2984:	movs	r0, #0
    2986:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    2988:	cmp	r3, #2
    298a:	mov	r7, r1
    298c:	mov	r5, r0
    298e:	beq.n	29c6 <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    2990:	cbz	r7, 29d4 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    2992:	ldr	r3, [r5, #32]
    2994:	ldr	r1, [r5, #12]
    2996:	ldrb	r4, [r3, #16]
    2998:	subs	r2, r1, #1
    299a:	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    299e:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    29a0:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    29a2:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    29a4:	cmp	r2, r4
    29a6:	bls.n	29cc <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    29a8:	ldr	r3, [r5, #28]
    29aa:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    29ac:	add.w	r6, r5, #8
    29b0:	b.n	29c0 <SdFile::seekSet(unsigned long)+0x48>
    29b2:	ldr	r1, [r5, #8]
    29b4:	ldr	r0, [r5, #32]
    29b6:	bl	2780 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    29ba:	subs	r4, #1
    29bc:	cmp	r0, #0
    29be:	beq.n	2984 <SdFile::seekSet(unsigned long)+0xc>
    29c0:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    29c2:	cmp	r4, #0
    29c4:	bne.n	29b2 <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    29c6:	str	r7, [r5, #12]
    return true;
    29c8:	movs	r0, #1
    29ca:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    29cc:	cmp	r1, #0
    29ce:	beq.n	29a8 <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    29d0:	subs	r4, r4, r2
    29d2:	b.n	29ac <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    29d4:	str	r7, [r5, #8]
    curPosition_ = 0;
    29d6:	str	r7, [r5, #12]
    return true;
    29d8:	movs	r0, #1
    29da:	pop	{r3, r4, r5, r6, r7, pc}

000029dc <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    29dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29e0:	mov	fp, r1

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    29e2:	ldrb	r1, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    29e4:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    29e6:	cmp	r1, #1
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    29e8:	mov	r7, r0
    29ea:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    29ec:	beq.n	29fa <SdFile::write(void const*, unsigned int)+0x1e>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    29ee:	movs	r3, #1
    29f0:	strb	r3, [r7, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    29f2:	movs	r0, #0
}
    29f4:	add	sp, #20
    29f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    29fa:	ldrb	r2, [r0, #5]
    29fc:	lsls	r1, r2, #30
    29fe:	bpl.n	29ee <SdFile::write(void const*, unsigned int)+0x12>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2a00:	lsls	r3, r2, #29
    2a02:	bpl.n	2a16 <SdFile::write(void const*, unsigned int)+0x3a>
    2a04:	ldr	r4, [r7, #12]
    2a06:	ldr	r1, [r7, #24]
    2a08:	cmp	r4, r1
    2a0a:	beq.w	2b76 <SdFile::write(void const*, unsigned int)+0x19a>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2a0e:	bl	2978 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    2a12:	cmp	r0, #0
    2a14:	beq.n	29ee <SdFile::write(void const*, unsigned int)+0x12>
  }

  while (nToWrite > 0) {
    2a16:	ldr	r3, [sp, #4]
    2a18:	ldr	r4, [r7, #12]
    2a1a:	cmp	r3, #0
    2a1c:	beq.n	2ab4 <SdFile::write(void const*, unsigned int)+0xd8>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    2a1e:	ldr.w	r9, [pc, #420]	; 2bc4 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    2a22:	ldr.w	sl, [pc, #420]	; 2bc8 <SdFile::write(void const*, unsigned int)+0x1ec>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    2a26:	ldr.w	r8, [sp, #4]
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2a2a:	ldr	r0, [r7, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2a2c:	ldrb	r6, [r0, #4]
    2a2e:	subs	r6, #1
    2a30:	and.w	r6, r6, r4, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2a34:	ands.w	r6, r6, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2a38:	ubfx	r4, r4, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    2a3c:	bne.n	2ac6 <SdFile::write(void const*, unsigned int)+0xea>
    2a3e:	cmp	r4, #0
    2a40:	bne.n	2ac6 <SdFile::write(void const*, unsigned int)+0xea>
      // start of new cluster
      if (curCluster_ == 0) {
    2a42:	ldr	r1, [r7, #8]
    2a44:	cmp	r1, #0
    2a46:	bne.n	2b30 <SdFile::write(void const*, unsigned int)+0x154>
        if (firstCluster_ == 0) {
    2a48:	ldr	r2, [r7, #28]
    2a4a:	cmp	r2, #0
    2a4c:	beq.w	2b56 <SdFile::write(void const*, unsigned int)+0x17a>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    2a50:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2a52:	rsb	r5, r4, #512	; 0x200
    2a56:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    2a58:	cmp	r5, r8
    2a5a:	bls.n	2ad2 <SdFile::write(void const*, unsigned int)+0xf6>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2a5c:	ldrb	r5, [r0, #16]
    2a5e:	ldr	r1, [r0, #20]
    2a60:	subs	r2, #2
    2a62:	lsls	r2, r5
    2a64:	add	r6, r1
    2a66:	add	r6, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    2a68:	uxth.w	r5, r8
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2a6c:	cbnz	r4, 2a76 <SdFile::write(void const*, unsigned int)+0x9a>
    2a6e:	ldr	r0, [r7, #12]
    2a70:	ldr	r2, [r7, #24]
    2a72:	cmp	r0, r2
    2a74:	bcs.n	2b16 <SdFile::write(void const*, unsigned int)+0x13a>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2a76:	mov	r0, r6
    2a78:	movs	r1, #1
    2a7a:	bl	26a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2a7e:	cmp	r0, #0
    2a80:	beq.n	29ee <SdFile::write(void const*, unsigned int)+0x12>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    2a82:	add	r4, r9
      uint8_t* end = dst + n;
    2a84:	add.w	lr, r4, r5
      while (dst != end) *dst++ = *src++;
    2a88:	cmp	r4, lr
    2a8a:	beq.n	2aa8 <SdFile::write(void const*, unsigned int)+0xcc>
    2a8c:	add.w	r1, fp, #4294967295
    2a90:	subs	r2, r4, #1
    2a92:	add.w	r6, lr, #4294967295
    2a96:	ldrb.w	r0, [r1, #1]!
    2a9a:	strb.w	r0, [r2, #1]!
    2a9e:	cmp	r6, r2
    2aa0:	bne.n	2a96 <SdFile::write(void const*, unsigned int)+0xba>
    2aa2:	rsb	r4, r4, lr
    2aa6:	add	fp, r4
    }
    nToWrite -= n;
    curPosition_ += n;
    2aa8:	ldr	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2aaa:	subs.w	r8, r8, r5
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    2aae:	add	r4, r5
    2ab0:	str	r4, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2ab2:	bne.n	2a2a <SdFile::write(void const*, unsigned int)+0x4e>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2ab4:	ldr	r3, [r7, #24]
    2ab6:	cmp	r3, r4
    2ab8:	bcs.n	2b80 <SdFile::write(void const*, unsigned int)+0x1a4>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    2aba:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2abc:	str	r4, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    2abe:	orr.w	r2, r2, #128	; 0x80
    2ac2:	strb	r2, [r7, #5]
    2ac4:	b.n	2b92 <SdFile::write(void const*, unsigned int)+0x1b6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2ac6:	rsb	r5, r4, #512	; 0x200
    2aca:	uxth	r5, r5

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    2acc:	cmp	r5, r8
    2ace:	ldr	r2, [r7, #8]
    2ad0:	bhi.n	2a5c <SdFile::write(void const*, unsigned int)+0x80>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2ad2:	ldrb	r1, [r0, #16]
    2ad4:	ldr	r0, [r0, #20]
    2ad6:	subs	r2, #2
    2ad8:	lsls	r2, r1
    2ada:	add	r6, r0
    if (n == 512) {
    2adc:	cmp.w	r5, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2ae0:	add	r6, r2
    if (n == 512) {
    2ae2:	bne.n	2a6c <SdFile::write(void const*, unsigned int)+0x90>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2ae4:	ldr.w	r2, [sl]
    2ae8:	cmp	r6, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2aea:	itt	eq
    2aec:	moveq.w	r2, #4294967295
    2af0:	streq.w	r2, [sl]
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2af4:	ldr	r2, [pc, #188]	; (2bb4 <SdFile::write(void const*, unsigned int)+0x1d8>)
    2af6:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2af8:	ldrb	r2, [r0, #0]
    2afa:	cmp	r2, #254	; 0xfe
      return (KinetisSDHC_WriteBlock(src, block) == 0) ? true : false;
    2afc:	mov	r1, r6
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    2afe:	beq.n	2b68 <SdFile::write(void const*, unsigned int)+0x18c>
      return (KinetisSDHC_WriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    2b00:	mov	r2, fp
    2b02:	bl	2ff8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2b06:	cmp	r0, #0
    2b08:	beq.w	29ee <SdFile::write(void const*, unsigned int)+0x12>
      src += 512;
    2b0c:	add.w	fp, fp, #512	; 0x200
    2b10:	mov.w	r5, #512	; 0x200
    2b14:	b.n	2aa8 <SdFile::write(void const*, unsigned int)+0xcc>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2b16:	bl	2620 <SdVolume::cacheFlush()>
    2b1a:	cmp	r0, #0
    2b1c:	beq.w	29ee <SdFile::write(void const*, unsigned int)+0x12>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2b20:	ldr	r1, [pc, #148]	; (2bb8 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    2b22:	str.w	r6, [sl]
    2b26:	ldrb	r2, [r1, #0]
    2b28:	orr.w	r2, r2, #1
    2b2c:	strb	r2, [r1, #0]
    2b2e:	b.n	2a82 <SdFile::write(void const*, unsigned int)+0xa6>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2b30:	add	r2, sp, #12
    2b32:	bl	2780 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2b36:	cmp	r0, #0
    2b38:	beq.w	29f4 <SdFile::write(void const*, unsigned int)+0x18>
        if (vol_->isEOC(next)) {
    2b3c:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2b3e:	ldr	r3, [pc, #124]	; (2bbc <SdFile::write(void const*, unsigned int)+0x1e0>)
    2b40:	ldrb.w	r5, [r0, #32]
    2b44:	ldr	r2, [sp, #12]
    2b46:	movw	r1, #65528	; 0xfff8
    2b4a:	cmp	r5, #16
    2b4c:	it	ne
    2b4e:	movne	r1, r3
    2b50:	cmp	r2, r1
    2b52:	bcc.w	2a50 <SdFile::write(void const*, unsigned int)+0x74>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2b56:	mov	r0, r7
    2b58:	bl	294c <SdFile::addCluster()>
    2b5c:	cmp	r0, #0
    2b5e:	beq.w	29ee <SdFile::write(void const*, unsigned int)+0x12>
    2b62:	ldr	r0, [r7, #32]
    2b64:	ldr	r2, [r7, #8]
    2b66:	b.n	2a52 <SdFile::write(void const*, unsigned int)+0x76>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (KinetisSDHC_WriteBlock(src, block) == 0) ? true : false;
    2b68:	mov	r0, fp
    2b6a:	bl	3274 <KinetisSDHC_WriteBlock>
    2b6e:	clz	r0, r0
    2b72:	lsrs	r0, r0, #5
    2b74:	b.n	2b06 <SdFile::write(void const*, unsigned int)+0x12a>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2b76:	ldr	r3, [sp, #4]
    2b78:	cmp	r3, #0
    2b7a:	bne.w	2a1e <SdFile::write(void const*, unsigned int)+0x42>
    2b7e:	b.n	2b92 <SdFile::write(void const*, unsigned int)+0x1b6>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    2b80:	ldr	r3, [pc, #60]	; (2bc0 <SdFile::write(void const*, unsigned int)+0x1e4>)
    2b82:	ldrb	r2, [r7, #5]
    2b84:	ldr	r3, [r3, #0]
    2b86:	cbz	r3, 2b92 <SdFile::write(void const*, unsigned int)+0x1b6>
    2b88:	ldr	r3, [sp, #4]
    2b8a:	cbz	r3, 2b92 <SdFile::write(void const*, unsigned int)+0x1b6>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2b8c:	orr.w	r2, r2, #128	; 0x80
    2b90:	strb	r2, [r7, #5]
  }

  if (flags_ & O_SYNC) {
    2b92:	lsls	r2, r2, #28
    2b94:	bpl.n	2baa <SdFile::write(void const*, unsigned int)+0x1ce>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    2b96:	ldrb	r3, [r7, #6]
    2b98:	cmp	r3, #0
    2b9a:	beq.w	29ee <SdFile::write(void const*, unsigned int)+0x12>
    2b9e:	mov	r0, r7
    2ba0:	bl	28e0 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2ba4:	cmp	r0, #0
    2ba6:	beq.w	29ee <SdFile::write(void const*, unsigned int)+0x12>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2baa:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2bac:	add	sp, #20
    2bae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb2:	nop
    2bb4:	.word	0x1fffcbb4
    2bb8:	.word	0x1fffcdb8
    2bbc:	.word	0x0ffffff8
    2bc0:	.word	0x1fffcdbc
    2bc4:	.word	0x1fffcbb8
    2bc8:	.word	0x1fffaf98

00002bcc <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2bcc:	push	{lr}
    2bce:	sub	sp, #12
    2bd0:	add	r3, sp, #8
  return write(&b, 1);
    2bd2:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2bd4:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    2bd8:	mov	r1, r3
    2bda:	bl	29dc <SdFile::write(void const*, unsigned int)>
}
    2bde:	add	sp, #12
    2be0:	ldr.w	pc, [sp], #4

00002be4 <Sd2Card::chipSelectHigh()>:
}
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    2be4:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    2be6:	movs	r1, #1
    2be8:	ldrb	r0, [r0, #0]
    2bea:	bl	3b04 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    2bee:	ldr	r2, [pc, #68]	; (2c34 <Sd2Card::chipSelectHigh()+0x50>)
    2bf0:	ldrb	r3, [r2, #0]
    2bf2:	cbz	r3, 2c26 <Sd2Card::chipSelectHigh()+0x42>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    2bf4:	ldr	r1, [pc, #64]	; (2c38 <Sd2Card::chipSelectHigh()+0x54>)
    2bf6:	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    2bf8:	movs	r4, #0
    2bfa:	mov	r0, r3
    2bfc:	strb	r4, [r2, #0]
    2bfe:	cbz	r3, 2c26 <Sd2Card::chipSelectHigh()+0x42>
			if (interruptMasksUsed & 0x01) {
    2c00:	lsls	r2, r3, #31
    2c02:	bpl.n	2c0c <Sd2Card::chipSelectHigh()+0x28>
				NVIC_ISER0 = interruptSave[0];
    2c04:	ldr	r2, [pc, #52]	; (2c3c <Sd2Card::chipSelectHigh()+0x58>)
    2c06:	ldr	r0, [r1, #28]
    2c08:	str	r0, [r2, #0]
    2c0a:	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2c0c:	lsls	r4, r3, #30
    2c0e:	bpl.n	2c18 <Sd2Card::chipSelectHigh()+0x34>
				NVIC_ISER1 = interruptSave[1];
    2c10:	ldr	r3, [pc, #44]	; (2c40 <Sd2Card::chipSelectHigh()+0x5c>)
    2c12:	ldr	r2, [r1, #32]
    2c14:	ldrb	r0, [r1, #11]
    2c16:	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2c18:	lsls	r2, r0, #29
    2c1a:	bmi.n	2c28 <Sd2Card::chipSelectHigh()+0x44>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    2c1c:	lsls	r3, r0, #28
    2c1e:	bpl.n	2c26 <Sd2Card::chipSelectHigh()+0x42>
				NVIC_ISER3 = interruptSave[3];
    2c20:	ldr	r3, [pc, #32]	; (2c44 <Sd2Card::chipSelectHigh()+0x60>)
    2c22:	ldr	r2, [r1, #40]	; 0x28
    2c24:	str	r2, [r3, #0]
    2c26:	pop	{r4, pc}
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    2c28:	ldr	r3, [pc, #28]	; (2c48 <Sd2Card::chipSelectHigh()+0x64>)
    2c2a:	ldr	r2, [r1, #36]	; 0x24
    2c2c:	ldrb	r0, [r1, #11]
    2c2e:	str	r2, [r3, #0]
    2c30:	b.n	2c1c <Sd2Card::chipSelectHigh()+0x38>
    2c32:	nop
    2c34:	.word	0x1fffcdc4
    2c38:	.word	0x1fffaf58
    2c3c:	.word	0xe000e100
    2c40:	.word	0xe000e104
    2c44:	.word	0xe000e10c
    2c48:	.word	0xe000e108

00002c4c <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    2c4c:	ldr	r3, [pc, #140]	; (2cdc <Sd2Card::chipSelectLow()+0x90>)
    2c4e:	ldrb	r2, [r3, #0]
    2c50:	cbz	r2, 2c5a <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2c52:	ldrb	r0, [r0, #0]
    2c54:	movs	r1, #0
    2c56:	b.w	3b04 <digitalWrite>
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    2c5a:	push	{r4, r5, r6}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2c5c:	ldr	r2, [pc, #128]	; (2ce0 <Sd2Card::chipSelectLow()+0x94>)
    2c5e:	ldr	r1, [pc, #132]	; (2ce4 <Sd2Card::chipSelectLow()+0x98>)
    2c60:	ldrb	r4, [r2, #11]
    2c62:	ldr	r1, [r1, #0]
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    2c64:	movs	r5, #1
    2c66:	strb	r5, [r3, #0]
    2c68:	cmp	r4, #0
    2c6a:	beq.n	2cba <Sd2Card::chipSelectLow()+0x6e>
			__disable_irq();
    2c6c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2c6e:	ldrb	r4, [r2, #11]
    2c70:	lsls	r6, r4, #31
    2c72:	mov	r3, r4
    2c74:	bpl.n	2c84 <Sd2Card::chipSelectLow()+0x38>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2c76:	ldr	r5, [pc, #112]	; (2ce8 <Sd2Card::chipSelectLow()+0x9c>)
    2c78:	ldr	r3, [r2, #12]
    2c7a:	ldr	r6, [r5, #0]
    2c7c:	ands	r3, r6
    2c7e:	str	r3, [r2, #28]
				NVIC_ICER0 = interruptSave[0];
    2c80:	str	r3, [r5, #0]
    2c82:	mov	r3, r4
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2c84:	lsls	r5, r4, #30
    2c86:	bpl.n	2c96 <Sd2Card::chipSelectLow()+0x4a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2c88:	ldr	r5, [pc, #96]	; (2cec <Sd2Card::chipSelectLow()+0xa0>)
    2c8a:	ldr	r4, [r2, #16]
    2c8c:	ldr	r6, [r5, #0]
    2c8e:	ldrb	r3, [r2, #11]
    2c90:	ands	r4, r6
    2c92:	str	r4, [r2, #32]
				NVIC_ICER1 = interruptSave[1];
    2c94:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2c96:	lsls	r4, r3, #29
    2c98:	bpl.n	2ca8 <Sd2Card::chipSelectLow()+0x5c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2c9a:	ldr	r5, [pc, #84]	; (2cf0 <Sd2Card::chipSelectLow()+0xa4>)
    2c9c:	ldr	r4, [r2, #20]
    2c9e:	ldr	r6, [r5, #0]
    2ca0:	ldrb	r3, [r2, #11]
    2ca2:	ands	r4, r6
    2ca4:	str	r4, [r2, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    2ca6:	str	r4, [r5, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    2ca8:	lsls	r3, r3, #28
    2caa:	bpl.n	2cb8 <Sd2Card::chipSelectLow()+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2cac:	ldr	r4, [pc, #68]	; (2cf4 <Sd2Card::chipSelectLow()+0xa8>)
    2cae:	ldr	r3, [r2, #24]
    2cb0:	ldr	r5, [r4, #0]
    2cb2:	ands	r3, r5
    2cb4:	str	r3, [r2, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    2cb6:	str	r3, [r4, #0]
			}
			#endif
			__enable_irq();
    2cb8:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2cba:	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    2cbc:	ldr	r2, [r3, #12]
    2cbe:	cmp	r2, r1
    2cc0:	beq.n	2cd2 <Sd2Card::chipSelectLow()+0x86>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2cc2:	ldr	r4, [pc, #52]	; (2cf8 <Sd2Card::chipSelectLow()+0xac>)
    2cc4:	str	r4, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2cc6:	ldr	r2, [pc, #52]	; (2cfc <Sd2Card::chipSelectLow()+0xb0>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    2cc8:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    2cca:	orr.w	r4, r1, #1073741824	; 0x40000000
    2cce:	str	r4, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2cd0:	str	r2, [r3, #0]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2cd2:	ldrb	r0, [r0, #0]
    2cd4:	movs	r1, #0
}
    2cd6:	pop	{r4, r5, r6}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    2cd8:	b.w	3b04 <digitalWrite>
    2cdc:	.word	0x1fffcdc4
    2ce0:	.word	0x1fffaf58
    2ce4:	.word	0x1fffcdc0
    2ce8:	.word	0xe000e180
    2cec:	.word	0xe000e184
    2cf0:	.word	0xe000e188
    2cf4:	.word	0xe000e18c
    2cf8:	.word	0x003f4001
    2cfc:	.word	0x803f0000

00002d00 <Sd2Card::waitNotBusy(unsigned int)>:
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    2d00:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d02:	ldr	r0, [pc, #72]	; (2d4c <Sd2Card::waitNotBusy(unsigned int)+0x4c>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d04:	ldr	r2, [pc, #72]	; (2d50 <Sd2Card::waitNotBusy(unsigned int)+0x50>)
    2d06:	ldr	r3, [r0, #0]
  return true;
#endif
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
    2d08:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2d0a:	mov	r6, r2
    2d0c:	str	r3, [sp, #0]
	return ret;
    2d0e:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2d10:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2d14:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d16:	ldr	r3, [r2, #0]
    2d18:	orr.w	r3, r3, #1024	; 0x400
    2d1c:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2d1e:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2d20:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2d22:	ldr	r3, [r2, #44]	; 0x2c
    2d24:	cmp	r3, #0
    2d26:	bge.n	2d22 <Sd2Card::waitNotBusy(unsigned int)+0x22>
  return SPI0_POPR;
    2d28:	ldr	r3, [r6, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    2d2a:	uxtb	r3, r3
    2d2c:	cmp	r3, #255	; 0xff
    2d2e:	beq.n	2d44 <Sd2Card::waitNotBusy(unsigned int)+0x44>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d30:	ldr	r3, [r0, #0]
    2d32:	str	r3, [sp, #4]
	return ret;
    2d34:	ldr	r3, [sp, #4]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    2d36:	subs	r3, r3, r7
    2d38:	cmp	r3, r1
    2d3a:	bcc.n	2d16 <Sd2Card::waitNotBusy(unsigned int)+0x16>
  return false;
    2d3c:	movs	r0, #0
}
    2d3e:	add	sp, #8
    2d40:	pop	{r4, r5, r6, r7}
    2d42:	bx	lr
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    2d44:	movs	r0, #1
    d = millis() - t0;
  }
  while (d < timeoutMillis);
  return false;
}
    2d46:	add	sp, #8
    2d48:	pop	{r4, r5, r6, r7}
    2d4a:	bx	lr
    2d4c:	.word	0x1fffcdec
    2d50:	.word	0x4002c000

00002d54 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    2d54:	push	{r3, r4, r5, r6, r7, lr}
    2d56:	mov	r5, r1
  // wait up to 300 ms if busy
  waitNotBusy(300);
    2d58:	mov.w	r1, #300	; 0x12c


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    2d5c:	mov	r6, r2
    2d5e:	mov	r4, r0
  // wait up to 300 ms if busy
  waitNotBusy(300);
    2d60:	bl	2d00 <Sd2Card::waitNotBusy(unsigned int)>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d64:	ldr	r3, [pc, #160]	; (2e08 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    2d66:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2d68:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d6c:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2d70:	orr.w	r1, r5, #64	; 0x40
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d74:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2d76:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2d78:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2d7a:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2d7c:	ldr	r3, [r2, #44]	; 0x2c
    2d7e:	cmp	r3, #0
    2d80:	bge.n	2d7c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x28>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d82:	ldr	r1, [pc, #132]	; (2e08 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2d84:	movs	r0, #24
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2d86:	mov.w	r7, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2d8a:	ldr	r2, [r1, #0]
    2d8c:	lsr.w	r3, r6, r0
    2d90:	orr.w	r2, r2, #1024	; 0x400
    2d94:	uxtb	r3, r3
    2d96:	str	r2, [r1, #0]
  SPI0_SR = SPI_SR_TCF;
    2d98:	str	r7, [r1, #44]	; 0x2c
  SPI0_PUSHR = b;
    2d9a:	str	r3, [r1, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2d9c:	ldr	r3, [r1, #44]	; 0x2c
    2d9e:	cmp	r3, #0
    2da0:	bge.n	2d9c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x48>
    2da2:	subs	r0, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    2da4:	cmn.w	r0, #8
    2da8:	bne.n	2d8a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    2daa:	cbz	r5, 2e02 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xae>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    2dac:	cmp	r5, #8
    2dae:	ite	eq
    2db0:	moveq	r1, #135	; 0x87
    2db2:	movne	r1, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2db4:	ldr	r3, [pc, #80]	; (2e08 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
    2db6:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2db8:	mov.w	r0, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2dbc:	orr.w	r2, r2, #1024	; 0x400
    2dc0:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2dc2:	str	r0, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2dc4:	mov	r2, r3
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2dc6:	str	r1, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2dc8:	ldr	r3, [r2, #44]	; 0x2c
    2dca:	cmp	r3, #0
    2dcc:	bge.n	2dc8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2dce:	ldr	r2, [pc, #56]	; (2e08 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>)
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2dd0:	movs	r7, #0
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2dd2:	mov	r6, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2dd4:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2dd8:	movs	r1, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2dda:	ldr	r3, [r2, #0]
    2ddc:	orr.w	r3, r3, #1024	; 0x400
    2de0:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2de2:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2de4:	str	r1, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2de6:	ldr	r3, [r2, #44]	; 0x2c
    2de8:	cmp	r3, #0
    2dea:	bge.n	2de6 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x92>
  return SPI0_POPR;
    2dec:	ldr	r3, [r6, #56]	; 0x38
    2dee:	uxtb	r0, r3
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    2df0:	lsls	r3, r3, #24
    2df2:	strb	r0, [r4, #1]
    2df4:	bmi.n	2df8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>
  return status_;
}
    2df6:	pop	{r3, r4, r5, r6, r7, pc}
    2df8:	adds	r7, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    2dfa:	cmp.w	r7, #256	; 0x100
    2dfe:	bne.n	2dda <Sd2Card::cardCommand(unsigned char, unsigned long)+0x86>
  return status_;
}
    2e00:	pop	{r3, r4, r5, r6, r7, pc}
    2e02:	movs	r1, #149	; 0x95
    2e04:	b.n	2db4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x60>
    2e06:	nop
    2e08:	.word	0x4002c000

00002e0c <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2e0c:	push	{r4, r5, r6, r7}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e0e:	ldr	r1, [pc, #84]	; (2e64 <Sd2Card::waitStartBlock()+0x58>)
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2e10:	ldr	r2, [pc, #84]	; (2e68 <Sd2Card::waitStartBlock()+0x5c>)
    2e12:	ldr	r3, [r1, #0]
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2e14:	sub	sp, #8
/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2e16:	mov	r6, r2
    2e18:	str	r3, [sp, #0]
	return ret;
    2e1a:	ldr	r7, [sp, #0]
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2e1c:	mov.w	r5, #2147483648	; 0x80000000
  SPI0_PUSHR = 0xFF;
    2e20:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2e22:	ldr	r3, [r2, #0]
    2e24:	orr.w	r3, r3, #1024	; 0x400
    2e28:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2e2a:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2e2c:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2e2e:	ldr	r3, [r2, #44]	; 0x2c
    2e30:	cmp	r3, #0
    2e32:	bge.n	2e2e <Sd2Card::waitStartBlock()+0x22>
  return SPI0_POPR;
    2e34:	ldr	r3, [r6, #56]	; 0x38
    2e36:	uxtb	r3, r3
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    2e38:	cmp	r3, #255	; 0xff
    2e3a:	strb	r3, [r0, #1]
    2e3c:	bne.n	2e54 <Sd2Card::waitStartBlock()+0x48>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e3e:	ldr	r3, [r1, #0]
    2e40:	str	r3, [sp, #4]
	return ret;
    2e42:	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    2e44:	subs	r3, r3, r7
    2e46:	cmp.w	r3, #300	; 0x12c
    2e4a:	bls.n	2e22 <Sd2Card::waitStartBlock()+0x16>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2e4c:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    2e4e:	add	sp, #8
    2e50:	pop	{r4, r5, r6, r7}
    2e52:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    2e54:	sub.w	r0, r3, #254	; 0xfe
    2e58:	clz	r0, r0
    2e5c:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    2e5e:	add	sp, #8
    2e60:	pop	{r4, r5, r6, r7}
    2e62:	bx	lr
    2e64:	.word	0x1fffcdec
    2e68:	.word	0x4002c000

00002e6c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2e6c:	push	{r3, r4, r5, r6, r7, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    2e6e:	ldrb	r3, [r0, #2]
    2e70:	cmp	r3, #3

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2e72:	mov	r6, r1
    2e74:	mov	r4, r0
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    2e76:	it	ne
    2e78:	lslne	r6, r1, #9

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    2e7a:	mov	r5, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
  chipSelectLow();
    2e7c:	bl	2c4c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    2e80:	mov	r2, r6
    2e82:	movs	r1, #17
    2e84:	mov	r0, r4
    2e86:	bl	2d54 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    2e8a:	cbnz	r0, 2e94 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    2e8c:	mov	r0, r4
    2e8e:	bl	2e0c <Sd2Card::waitStartBlock()>
    2e92:	cbnz	r0, 2e9e <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2e94:	mov	r0, r4
    2e96:	bl	2be4 <Sd2Card::chipSelectHigh()>
  return false;
    2e9a:	movs	r0, #0
}
    2e9c:	pop	{r3, r4, r5, r6, r7, pc}
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2e9e:	ldr	r3, [pc, #128]	; (2f20 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2ea0:	ldr	r1, [pc, #128]	; (2f24 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  return SPI0_POPR;
}
/** SPI receive multiple bytes */
static uint8_t spiRec(uint8_t* buf, size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2ea2:	ldr	r2, [pc, #132]	; (2f28 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    2ea4:	str	r2, [r3, #0]
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2ea6:	mov	lr, r1
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2ea8:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2eaa:	mov	r2, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2eac:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2eae:	mov	r6, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2eb0:	str	r1, [r3, #52]	; 0x34
  }
  uint8_t* limit = buf + len - 2*nf;
    2eb2:	add.w	r0, r5, #506	; 0x1fa
    2eb6:	adds	r1, r5, #2
    2eb8:	add.w	r7, r5, #508	; 0x1fc
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2ebc:	ldr	r3, [r2, #44]	; 0x2c
    2ebe:	tst.w	r3, #240	; 0xf0
    2ec2:	beq.n	2ebc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2ec4:	str.w	lr, [r6, #52]	; 0x34
    uint16_t w = SPI0_POPR;
    2ec8:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    2eca:	strb.w	r3, [r1, #-1]
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    2ece:	asrs	r3, r3, #8
    2ed0:	strb.w	r3, [r1, #-2]
    2ed4:	adds	r1, #2
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
  }
  uint8_t* limit = buf + len - 2*nf;
  while (buf < limit) {
    2ed6:	cmp	r7, r1
    2ed8:	bne.n	2ebc <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x50>
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
    2eda:	add.w	r5, r5, #512	; 0x200
  while (buf < limit) {
    2ede:	cmp	r0, r5
    2ee0:	bcs.n	2efe <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x92>
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2ee2:	ldr	r2, [pc, #60]	; (2f20 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2ee4:	mov	r6, r2
    2ee6:	ldr	r3, [r2, #44]	; 0x2c
    2ee8:	tst.w	r3, #240	; 0xf0
    2eec:	beq.n	2ee6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
    uint16_t w = SPI0_POPR;
    2eee:	ldr	r3, [r6, #56]	; 0x38
    *buf++ = w >> 8;
    2ef0:	asrs	r1, r3, #8
    2ef2:	strb.w	r1, [r0], #2
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    2ef6:	cmp	r0, r5
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    uint16_t w = SPI0_POPR;
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
    2ef8:	strb.w	r3, [r0, #-1]
    *buf++ = w >> 8;
    *buf++ = w & 0XFF;
  }
  // limit for rest of RX data
  limit += 2*nf;
  while (buf < limit) {
    2efc:	bcc.n	2ee6 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x7a>
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2efe:	ldr	r3, [pc, #32]	; (2f20 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2f00:	ldr	r1, [pc, #36]	; (2f28 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xbc>)
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2f02:	ldr	r2, [pc, #32]	; (2f24 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb8>)
  }
  return 0;
}
static void spiRecIgnore(size_t len) {
  // clear any data in RX FIFO
  SPI0_MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    2f04:	str	r1, [r3, #0]
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2f06:	mov	r1, r3
    len--;
  }
  // initial number of words to push into TX FIFO
  int nf = len/2 < SPI_INITIAL_FIFO_DEPTH ? len/2 : SPI_INITIAL_FIFO_DEPTH;
  for (int i = 0; i < nf; i++) {
    SPI0_PUSHR = SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1) | 0XFFFF;
    2f08:	str	r2, [r3, #52]	; 0x34
    SPI0_POPR;
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    2f0a:	ldr	r3, [r1, #44]	; 0x2c
    2f0c:	ldr	r2, [pc, #16]	; (2f20 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0xb4>)
    2f0e:	tst.w	r3, #240	; 0xf0
    2f12:	beq.n	2f0a <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x9e>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    2f14:	mov	r0, r4
    len -= 2;
  }
  // limit for rest of RX data
  while (nf > 0) {
    while (!(SPI0_SR & SPI_SR_RXCTR)) {}
    SPI0_POPR;
    2f16:	ldr	r3, [r2, #56]	; 0x38
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    2f18:	bl	2be4 <Sd2Card::chipSelectHigh()>
  return true;
    2f1c:	movs	r0, #1
    2f1e:	pop	{r3, r4, r5, r6, r7, pc}
    2f20:	.word	0x4002c000
    2f24:	.word	0x9000ffff
    2f28:	.word	0x801f0400

00002f2c <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    2f2c:	push	{r4, r5, r6, r7}
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2f2e:	ldr	r6, [pc, #196]	; (2ff4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2f30:	ldr	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    2f32:	mov.w	r7, #2147483648	; 0x80000000
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2f36:	orr.w	r3, r3, #1024	; 0x400
    2f3a:	str	r3, [r6, #0]
		SPI0_SR = SPI_SR_TCF;
    2f3c:	mov	r5, r7
    2f3e:	str	r7, [r6, #44]	; 0x2c
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2f40:	mov	r4, r6
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
		SPI0_SR = SPI_SR_TCF;
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2f42:	str	r1, [r6, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2f44:	mov	r3, r6
    2f46:	adds	r1, r2, #1
    2f48:	addw	r7, r2, #513	; 0x201
    2f4c:	ldr	r2, [r4, #44]	; 0x2c
    2f4e:	cmp	r2, #0
    2f50:	bge.n	2f4c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2f52:	ldr	r2, [r3, #0]
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i];
    2f54:	ldrb.w	r6, [r1, #-1]
    2f58:	orr.w	r2, r2, #1024	; 0x400
    2f5c:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    2f5e:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2f60:	str	r6, [r3, #52]	; 0x34
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2f62:	ldr	r2, [r4, #44]	; 0x2c
    2f64:	cmp	r2, #0
    2f66:	bge.n	2f62 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x36>
public:
	inline SPDRemulation & operator = (int val) __attribute__((always_inline)) {
		//serial_print("SPDR = ");
		//serial_phex(val);
		//serial_print("\n");
		SPI0_MCR |= SPI_MCR_CLR_RXF; // discard any received data
    2f68:	ldr	r2, [r3, #0]
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
    2f6a:	ldrb.w	r6, [r1], #2
    2f6e:	orr.w	r2, r2, #1024	; 0x400

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    2f72:	cmp	r7, r1
    2f74:	str	r2, [r3, #0]
		SPI0_SR = SPI_SR_TCF;
    2f76:	str	r5, [r3, #44]	; 0x2c
		//SPI0_SR = SPI_SR_EOQF;
		//SPI0_PUSHR = (val & 255) | SPI0_PUSHR_EOQ;
		SPI0_PUSHR = (val & 255);
    2f78:	str	r6, [r3, #52]	; 0x34
    2f7a:	bne.n	2f4c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		// a difference when digitalWrite is used to manually control the CS
		// pin, and perhaps it could matter at high clocks if faster register
		// access is used?  But does it really matter?  Do any SPI chips in
		// practice really perform differently if CS negates early, after the
		// final bit is clocked, but before the end of the whole clock cycle?
		if ((val & (1<<SPIF)) && (SPI0_SR & SPI_SR_TCF)) ret = (1<<SPIF);
    2f7c:	ldr	r1, [pc, #116]	; (2ff4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2f7e:	ldr	r2, [r1, #44]	; 0x2c
    2f80:	ldr	r3, [pc, #112]	; (2ff4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2f82:	cmp	r2, #0
    2f84:	bge.n	2f7e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x52>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2f86:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    2f88:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2f8c:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2f90:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2f92:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2f94:	mov	r1, r3
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2f96:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = b;
    2f98:	str	r4, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2f9a:	ldr	r3, [r1, #44]	; 0x2c
    2f9c:	ldr	r2, [pc, #84]	; (2ff4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2f9e:	cmp	r3, #0
    2fa0:	bge.n	2f9a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x6e>
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2fa2:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2fa4:	mov.w	r5, #2147483648	; 0x80000000
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2fa8:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
    2fac:	movs	r4, #255	; 0xff
    nf--;
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2fae:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = b;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2fb0:	mov	r1, r2
  }
}
/** SPI send a byte */
static void spiSend(uint8_t b) {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2fb2:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = b;
    2fb4:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2fb6:	ldr	r3, [r1, #44]	; 0x2c
    2fb8:	ldr	r2, [pc, #56]	; (2ff4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2fba:	cmp	r3, #0
    2fbc:	bge.n	2fb6 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8a>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2fbe:	ldr	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
    2fc0:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2fc4:	orr.w	r3, r3, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    2fc8:	movs	r4, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    2fca:	str	r3, [r2, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2fcc:	mov	r1, r2
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    2fce:	str	r5, [r2, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    2fd0:	str	r4, [r2, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    2fd2:	ldr	r3, [r1, #44]	; 0x2c
    2fd4:	ldr	r2, [pc, #28]	; (2ff4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc8>)
    2fd6:	cmp	r3, #0
    2fd8:	bge.n	2fd2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa6>
  return SPI0_POPR;
    2fda:	ldr	r3, [r2, #56]	; 0x38
    2fdc:	uxtb	r3, r3
    2fde:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    2fe2:	strb	r3, [r0, #1]
    2fe4:	sub.w	r0, r2, #5
    2fe8:	clz	r0, r0
    2fec:	lsrs	r0, r0, #5
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    2fee:	pop	{r4, r5, r6, r7}
    2ff0:	bx	lr
    2ff2:	nop
    2ff4:	.word	0x4002c000

00002ff8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    2ff8:	push	{r4, r5, r6, lr}
    2ffa:	mov	r4, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    2ffc:	cbz	r1, 301c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    2ffe:	ldrb	r3, [r0, #2]
    3000:	cmp	r3, #3
    3002:	mov	r5, r1
    3004:	it	ne
    3006:	lslne	r5, r1, #9
    3008:	mov	r6, r2
  chipSelectLow();
    300a:	bl	2c4c <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    300e:	mov	r2, r5
    3010:	movs	r1, #24
    3012:	mov	r0, r4
    3014:	bl	2d54 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    3018:	mov	r5, r0
    301a:	cbz	r0, 3026 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2e>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    301c:	mov	r0, r4
    301e:	bl	2be4 <Sd2Card::chipSelectHigh()>
  return false;
    3022:	movs	r0, #0
}
    3024:	pop	{r4, r5, r6, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    3026:	mov	r2, r6
    3028:	movs	r1, #254	; 0xfe
    302a:	mov	r0, r4
    302c:	bl	2f2c <Sd2Card::writeData(unsigned char, unsigned char const*)>
    3030:	cmp	r0, #0
    3032:	beq.n	301c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    3034:	mov.w	r1, #600	; 0x258
    3038:	mov	r0, r4
    303a:	bl	2d00 <Sd2Card::waitNotBusy(unsigned int)>
    303e:	cmp	r0, #0
    3040:	beq.n	301c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    3042:	mov	r2, r5
    3044:	movs	r1, #13
    3046:	mov	r0, r4
    3048:	bl	2d54 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    304c:	cmp	r0, #0
    304e:	bne.n	301c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3050:	ldr	r3, [pc, #44]	; (3080 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    3052:	ldr	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
    3054:	mov.w	r5, #2147483648	; 0x80000000
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    3058:	orr.w	r2, r2, #1024	; 0x400
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
    305c:	movs	r0, #255	; 0xff
  SPI.begin();
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
    305e:	str	r2, [r3, #0]
  SPI0_SR = SPI_SR_TCF;
  SPI0_PUSHR = 0xFF;
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3060:	mov	r1, r3
}

/** SPI receive a byte */
static  uint8_t spiRec() {
  SPI0_MCR |= SPI_MCR_CLR_RXF;
  SPI0_SR = SPI_SR_TCF;
    3062:	str	r5, [r3, #44]	; 0x2c
  SPI0_PUSHR = 0xFF;
    3064:	str	r0, [r3, #52]	; 0x34
  while (!(SPI0_SR & SPI_SR_TCF)) {}
    3066:	ldr	r3, [r1, #44]	; 0x2c
    3068:	ldr	r2, [pc, #20]	; (3080 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x88>)
    306a:	cmp	r3, #0
    306c:	bge.n	3066 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x6e>
  return SPI0_POPR;
    306e:	ldr	r3, [r2, #56]	; 0x38
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    3070:	tst.w	r3, #255	; 0xff
    3074:	bne.n	301c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x24>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    3076:	mov	r0, r4
    3078:	bl	2be4 <Sd2Card::chipSelectHigh()>
  return true;
    307c:	movs	r0, #1
    307e:	pop	{r4, r5, r6, pc}
    3080:	.word	0x4002c000

00003084 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3084:	ldr	r3, [pc, #4]	; (308c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    3086:	ldr	r2, [pc, #8]	; (3090 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    3088:	str	r2, [r3, #0]
    308a:	bx	lr
    308c:	.word	0x1fffcdc0
    3090:	.word	0x38002003

00003094 <SDHC_CMD_Do>:
// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{

    // Card removal check preparation
    SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3094:	ldr	r1, [pc, #132]	; (311c <SDHC_CMD_Do+0x88>)

    // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
    while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB))
    3096:	ldr	r2, [pc, #136]	; (3120 <SDHC_CMD_Do+0x8c>)
// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{

    // Card removal check preparation
    SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    3098:	ldr	r3, [r1, #0]
    309a:	orr.w	r3, r3, #128	; 0x80
    309e:	str	r3, [r1, #0]

    // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
    while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB))
    30a0:	mov	r1, r2
    30a2:	ldr	r3, [r2, #0]
    30a4:	lsls	r3, r3, #31
    30a6:	bmi.n	30a2 <SDHC_CMD_Do+0xe>
    30a8:	ldr	r3, [r1, #0]
    30aa:	lsls	r3, r3, #30
    30ac:	bmi.n	30a2 <SDHC_CMD_Do+0xe>
        { };

    SDHC_XFERTYP = xfertyp;
    30ae:	ldr	r3, [pc, #116]	; (3124 <SDHC_CMD_Do+0x90>)
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    30b0:	push	{r4, r5}

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
    uint32_t             result;
    uint32_t             timeout = 1<<24;
    30b2:	mov.w	r2, #16777216	; 0x1000000
    do {
        result = SDHC_IRQSTAT & mask;
    30b6:	ldr	r5, [pc, #100]	; (311c <SDHC_CMD_Do+0x88>)

    // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
    while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB))
        { };

    SDHC_XFERTYP = xfertyp;
    30b8:	str	r0, [r3, #0]
    30ba:	b.n	30be <SDHC_CMD_Do+0x2a>
    uint32_t             timeout = 1<<24;
    do {
        result = SDHC_IRQSTAT & mask;
        timeout--;
    }
    while(!result && (timeout));
    30bc:	cbz	r2, 30e8 <SDHC_CMD_Do+0x54>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
    uint32_t             result;
    uint32_t             timeout = 1<<24;
    do {
        result = SDHC_IRQSTAT & mask;
    30be:	ldr	r1, [r5, #0]
    30c0:	ldr	r3, [pc, #100]	; (3128 <SDHC_CMD_Do+0x94>)
    30c2:	ldr	r4, [pc, #88]	; (311c <SDHC_CMD_Do+0x88>)
    30c4:	ands	r3, r1
        timeout--;
    30c6:	subs	r2, #1
    }
    while(!result && (timeout));
    30c8:	cmp	r3, #0
    30ca:	beq.n	30bc <SDHC_CMD_Do+0x28>

    if (timeout)
    30cc:	cbz	r2, 30e8 <SDHC_CMD_Do+0x54>
        { };

    SDHC_XFERTYP = xfertyp;

    /* Wait for response */
    if (SDHC_WaitStatus(SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC) != SDHC_IRQSTAT_CC) {
    30ce:	cmp	r3, #1
    30d0:	bne.n	30e8 <SDHC_CMD_Do+0x54>
						SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
        return SDHC_RESULT_ERROR;
    }

    /* Check card removal */
    if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    30d2:	ldr	r3, [r4, #0]
    30d4:	tst.w	r3, #128	; 0x80
        SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    30d8:	ldr	r3, [r4, #0]
						SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
        return SDHC_RESULT_ERROR;
    }

    /* Check card removal */
    if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    30da:	beq.n	30fc <SDHC_CMD_Do+0x68>
        SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    30dc:	orr.w	r3, r3, #65537	; 0x10001
    30e0:	str	r3, [r4, #0]
        return SDHC_RESULT_NOT_READY;
    30e2:	movs	r0, #3

    SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

    return SDHC_RESULT_OK;

}
    30e4:	pop	{r4, r5}
    30e6:	bx	lr

    SDHC_XFERTYP = xfertyp;

    /* Wait for response */
    if (SDHC_WaitStatus(SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC) != SDHC_IRQSTAT_CC) {
	SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE |
    30e8:	ldr	r2, [pc, #48]	; (311c <SDHC_CMD_Do+0x88>)
    30ea:	ldr	r3, [r2, #0]
    30ec:	orr.w	r3, r3, #983040	; 0xf0000
    30f0:	orr.w	r3, r3, #1
    30f4:	str	r3, [r2, #0]
						SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
        return SDHC_RESULT_ERROR;
    30f6:	movs	r0, #1

    SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

    return SDHC_RESULT_OK;

}
    30f8:	pop	{r4, r5}
    30fa:	bx	lr
        SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
        return SDHC_RESULT_NOT_READY;
    }

    /* Get response, if available */
    if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    30fc:	ands.w	r3, r3, #65536	; 0x10000
    3100:	beq.n	310e <SDHC_CMD_Do+0x7a>
        SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    3102:	ldr	r3, [r4, #0]
    3104:	orr.w	r3, r3, #65537	; 0x10001
    3108:	str	r3, [r4, #0]
        return SDHC_RESULT_NO_RESPONSE;
    310a:	movs	r0, #5
    310c:	b.n	30f8 <SDHC_CMD_Do+0x64>
    }

    SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    310e:	ldr	r2, [r4, #0]
    3110:	orr.w	r2, r2, #1

    return SDHC_RESULT_OK;
    3114:	mov	r0, r3
    if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
        SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
        return SDHC_RESULT_NO_RESPONSE;
    }

    SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    3116:	str	r2, [r4, #0]
    3118:	b.n	30f8 <SDHC_CMD_Do+0x64>
    311a:	nop
    311c:	.word	0x400b1030
    3120:	.word	0x400b1024
    3124:	.word	0x400b100c
    3128:	.word	0x000e0001

0000312c <SDHC_CMD12_StopTransferWaitForBusy>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    312c:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    312e:	ldr	r5, [pc, #52]	; (3164 <SDHC_CMD12_StopTransferWaitForBusy+0x38>)
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
                 SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3130:	ldr	r0, [pc, #52]	; (3168 <SDHC_CMD12_StopTransferWaitForBusy+0x3c>)
  uint32_t timeOut = 100;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while(timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3132:	ldr	r6, [pc, #56]	; (316c <SDHC_CMD12_StopTransferWaitForBusy+0x40>)
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3134:	movs	r3, #0
    3136:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
                 SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3138:	bl	3094 <SDHC_CMD_Do>
    313c:	movs	r4, #99	; 0x63
    313e:	mov	r3, r0
    3140:	b.n	3150 <SDHC_CMD12_StopTransferWaitForBusy+0x24>
  uint32_t timeOut = 100;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while(timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3142:	cbnz	r3, 3158 <SDHC_CMD12_StopTransferWaitForBusy+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    3144:	str	r3, [r5, #0]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
                 SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3146:	bl	3094 <SDHC_CMD_Do>
  uint32_t timeOut = 100;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while(timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    314a:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
                 SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    314c:	mov	r3, r0
  uint32_t timeOut = 100;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while(timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    314e:	beq.n	315c <SDHC_CMD12_StopTransferWaitForBusy+0x30>
    3150:	ldr	r2, [r6, #0]

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
                 SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    3152:	ldr	r0, [pc, #20]	; (3168 <SDHC_CMD12_StopTransferWaitForBusy+0x3c>)
  uint32_t timeOut = 100;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while(timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    3154:	lsls	r2, r2, #29
    3156:	bmi.n	3142 <SDHC_CMD12_StopTransferWaitForBusy+0x16>
    3158:	mov	r0, r3
    315a:	pop	{r4, r5, r6, pc}

  if (result != SDHC_RESULT_OK)
    315c:	cmp	r0, #0
    315e:	it	eq
    3160:	moveq	r0, #5

  if(!timeOut)
    return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    3162:	pop	{r4, r5, r6, pc}
    3164:	.word	0x400b1008
    3168:	.word	0x0cdb0000
    316c:	.word	0x400b1024

00003170 <KinetisSDHC_ReadBlock>:

// read a block from disk
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int KinetisSDHC_ReadBlock(void * buff, uint32_t sector)
{
    3170:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    3172:	ldr	r3, [pc, #224]	; (3254 <KinetisSDHC_ReadBlock+0xe4>)
    3174:	ldrb	r2, [r3, #0]
    3176:	cbz	r2, 317c <KinetisSDHC_ReadBlock+0xc>
     return SDHC_RESULT_NOT_READY;
    3178:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);

  return result;
}
    317a:	pop	{r3, r4, r5, r6, r7, pc}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    317c:	ldrb	r3, [r3, #1]
    317e:	mov	r6, r0
    3180:	cbnz	r3, 3184 <KinetisSDHC_ReadBlock+0x14>
    sector *= 512;
    3182:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    3184:	ldr	r5, [pc, #208]	; (3258 <KinetisSDHC_ReadBlock+0xe8>)
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3186:	ldr	r4, [pc, #212]	; (325c <KinetisSDHC_ReadBlock+0xec>)

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3188:	ldr	r3, [pc, #212]	; (3260 <KinetisSDHC_ReadBlock+0xf0>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
                 SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
                 SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    318a:	ldr	r0, [pc, #216]	; (3264 <KinetisSDHC_ReadBlock+0xf4>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    318c:	movw	r7, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3190:	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3194:	str	r7, [r5, #0]
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    3196:	str	r1, [r4, #0]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3198:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
                 SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
                 SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    319a:	bl	3094 <SDHC_CMD_Do>
  if (result == SDHC_RESULT_OK) {
    319e:	cmp	r0, #0
    31a0:	bne.n	317a <KinetisSDHC_ReadBlock+0xa>
	(void)SDHC_CMDRSP0;
    31a2:	ldr	r3, [pc, #196]	; (3268 <KinetisSDHC_ReadBlock+0xf8>)
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
		*pData++ = SDHC_DATPORT;
    31a4:	ldr	r1, [pc, #196]	; (326c <KinetisSDHC_ReadBlock+0xfc>)
                 SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
                 SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) {
	(void)SDHC_CMDRSP0;
    31a6:	ldr	r3, [r3, #0]
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR | 
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    31a8:	adds	r4, #28
    31aa:	add.w	r2, r6, #64	; 0x40
    31ae:	add.w	r0, r6, #576	; 0x240
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    31b2:	ldr	r3, [r5, #0]
    31b4:	ldr	r7, [pc, #160]	; (3258 <KinetisSDHC_ReadBlock+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    31b6:	orr.w	r6, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    31ba:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    31be:	str	r6, [r5, #0]
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    31c0:	bne.n	3240 <KinetisSDHC_ReadBlock+0xd0>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR | 
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    31c2:	ldr	r3, [r4, #0]
    31c4:	lsls	r6, r3, #20
    31c6:	bpl.n	31c2 <KinetisSDHC_ReadBlock+0x52>
		*pData++ = SDHC_DATPORT;
    31c8:	ldr	r3, [r1, #0]
    31ca:	str.w	r3, [r2, #-64]
		*pData++ = SDHC_DATPORT;
    31ce:	ldr	r3, [r1, #0]
    31d0:	str.w	r3, [r2, #-60]
		*pData++ = SDHC_DATPORT;
    31d4:	ldr	r3, [r1, #0]
    31d6:	str.w	r3, [r2, #-56]
		*pData++ = SDHC_DATPORT;
    31da:	ldr	r3, [r1, #0]
    31dc:	str.w	r3, [r2, #-52]
		*pData++ = SDHC_DATPORT;
    31e0:	ldr	r3, [r1, #0]
    31e2:	str.w	r3, [r2, #-48]
		*pData++ = SDHC_DATPORT;
    31e6:	ldr	r3, [r1, #0]
    31e8:	str.w	r3, [r2, #-44]
		*pData++ = SDHC_DATPORT;
    31ec:	ldr	r3, [r1, #0]
    31ee:	str.w	r3, [r2, #-40]
		*pData++ = SDHC_DATPORT;
    31f2:	ldr	r3, [r1, #0]
    31f4:	str.w	r3, [r2, #-36]
		*pData++ = SDHC_DATPORT;
    31f8:	ldr	r3, [r1, #0]
    31fa:	str.w	r3, [r2, #-32]
		*pData++ = SDHC_DATPORT;
    31fe:	ldr	r3, [r1, #0]
    3200:	str.w	r3, [r2, #-28]
		*pData++ = SDHC_DATPORT;
    3204:	ldr	r3, [r1, #0]
    3206:	str.w	r3, [r2, #-24]
		*pData++ = SDHC_DATPORT;
    320a:	ldr	r3, [r1, #0]
    320c:	str.w	r3, [r2, #-20]
		*pData++ = SDHC_DATPORT;
    3210:	ldr	r3, [r1, #0]
    3212:	str.w	r3, [r2, #-16]
		*pData++ = SDHC_DATPORT;
    3216:	ldr	r3, [r1, #0]
    3218:	str.w	r3, [r2, #-12]
		*pData++ = SDHC_DATPORT;
    321c:	ldr	r3, [r1, #0]
    321e:	str.w	r3, [r2, #-8]
		*pData++ = SDHC_DATPORT;
    3222:	ldr	r3, [r1, #0]
    3224:	str.w	r3, [r2, #-4]
    3228:	adds	r2, #64	; 0x40
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    322a:	cmp	r2, r0
    322c:	bne.n	31b2 <KinetisSDHC_ReadBlock+0x42>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    322e:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    3230:	ldr	r1, [pc, #36]	; (3258 <KinetisSDHC_ReadBlock+0xe8>)
    3232:	ldr	r3, [r1, #0]
    3234:	ldr	r2, [pc, #32]	; (3258 <KinetisSDHC_ReadBlock+0xe8>)
    3236:	lsls	r3, r3, #30
    3238:	bpl.n	3232 <KinetisSDHC_ReadBlock+0xc2>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    323a:	ldr	r3, [pc, #52]	; (3270 <KinetisSDHC_ReadBlock+0x100>)
    323c:	str	r3, [r2, #0]

  return result;
    323e:	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR | 
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    3240:	orr.w	r3, r3, #7340032	; 0x700000
    3244:	orr.w	r3, r3, #32

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR | 
    3248:	str	r3, [r7, #0]
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
    324a:	bl	312c <SDHC_CMD12_StopTransferWaitForBusy>
			return SDHC_RESULT_ERROR;
    324e:	movs	r0, #1
    3250:	b.n	3230 <KinetisSDHC_ReadBlock+0xc0>
    3252:	nop
    3254:	.word	0x1fffcdc8
    3258:	.word	0x400b1030
    325c:	.word	0x400b1008
    3260:	.word	0x400b1004
    3264:	.word	0x113a0010
    3268:	.word	0x400b1010
    326c:	.word	0x400b1020
    3270:	.word	0x01000022

00003274 <KinetisSDHC_WriteBlock>:
//              count - count of sector to write
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
int KinetisSDHC_WriteBlock(const void * buff, uint32_t sector)
{
    3274:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    3276:	ldr	r3, [pc, #172]	; (3324 <KinetisSDHC_WriteBlock+0xb0>)
    3278:	ldrb	r2, [r3, #0]
    327a:	cbz	r2, 3280 <KinetisSDHC_WriteBlock+0xc>
    327c:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    327e:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    3280:	ldrb	r3, [r3, #1]
    3282:	mov	r4, r0
    3284:	cbnz	r3, 3288 <KinetisSDHC_WriteBlock+0x14>
    sector *= 512;
    3286:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    3288:	ldr	r5, [pc, #156]	; (3328 <KinetisSDHC_WriteBlock+0xb4>)
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    328a:	ldr	r6, [pc, #160]	; (332c <KinetisSDHC_WriteBlock+0xb8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    328c:	ldr	r3, [pc, #160]	; (3330 <KinetisSDHC_WriteBlock+0xbc>)

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
                 SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
                 SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    328e:	ldr	r0, [pc, #164]	; (3334 <KinetisSDHC_WriteBlock+0xc0>)

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3290:	movw	r7, #65535	; 0xffff
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    3294:	mov.w	r2, #66048	; 0x10200

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    3298:	str	r7, [r5, #0]
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    329a:	str	r1, [r6, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    329c:	str	r2, [r3, #0]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
                 SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
                 SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    329e:	bl	3094 <SDHC_CMD_Do>
  if (result == SDHC_RESULT_OK) {
    32a2:	cmp	r0, #0
    32a4:	bne.n	327e <KinetisSDHC_WriteBlock+0xa>
	(void)SDHC_CMDRSP0;
    32a6:	ldr	r3, [pc, #144]	; (3338 <KinetisSDHC_WriteBlock+0xc4>)
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
        		(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    32a8:	ldr	r1, [pc, #144]	; (333c <KinetisSDHC_WriteBlock+0xc8>)
                 SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
                 SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) {
	(void)SDHC_CMDRSP0;
    32aa:	ldr	r3, [r3, #0]
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    32ac:	mov	r6, r5
    32ae:	add.w	r7, r4, #512	; 0x200
    32b2:	ldr	r3, [r5, #0]
    32b4:	ldr	r2, [pc, #112]	; (3328 <KinetisSDHC_WriteBlock+0xb4>)
    32b6:	lsls	r0, r3, #27
    32b8:	bpl.n	32b2 <KinetisSDHC_WriteBlock+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    32ba:	ldr	r3, [r6, #0]
    32bc:	tst.w	r3, #7340032	; 0x700000
    32c0:	bne.n	32f8 <KinetisSDHC_WriteBlock+0x84>
    32c2:	add.w	r2, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
        		(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    32c6:	ldr.w	r3, [r4], #4
    32ca:	str	r3, [r1, #0]
        		SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
        		(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    32cc:	cmp	r2, r4
    32ce:	bne.n	32c6 <KinetisSDHC_WriteBlock+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    32d0:	ldr	r3, [r5, #0]
    32d2:	ldr.w	lr, [pc, #84]	; 3328 <KinetisSDHC_WriteBlock+0xb4>
    32d6:	orr.w	r3, r3, #16
    32da:	str	r3, [r5, #0]

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    32dc:	ldr	r3, [r5, #0]
    32de:	ands.w	r0, r3, #7340032	; 0x700000
    32e2:	bne.n	330c <KinetisSDHC_WriteBlock+0x98>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    32e4:	cmp	r7, r2
    32e6:	bne.n	32b2 <KinetisSDHC_WriteBlock+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    32e8:	ldr	r1, [pc, #60]	; (3328 <KinetisSDHC_WriteBlock+0xb4>)
    32ea:	ldr	r3, [r1, #0]
    32ec:	ldr	r2, [pc, #56]	; (3328 <KinetisSDHC_WriteBlock+0xb4>)
    32ee:	lsls	r3, r3, #30
    32f0:	bpl.n	32ea <KinetisSDHC_WriteBlock+0x76>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    32f2:	ldr	r3, [pc, #76]	; (3340 <KinetisSDHC_WriteBlock+0xcc>)
    32f4:	str	r3, [r2, #0]

  return result;
    32f6:	pop	{r3, r4, r5, r6, r7, pc}
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
        		SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
    32f8:	ldr	r3, [r2, #0]
    32fa:	orr.w	r3, r3, #7340032	; 0x700000
    32fe:	orr.w	r3, r3, #16
    3302:	str	r3, [r2, #0]
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
        		(void)SDHC_CMD12_StopTransferWaitForBusy();
    3304:	bl	312c <SDHC_CMD12_StopTransferWaitForBusy>
			return SDHC_RESULT_ERROR;
    3308:	movs	r0, #1
    330a:	b.n	32e8 <KinetisSDHC_WriteBlock+0x74>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
    330c:	ldr.w	r3, [lr]
    3310:	orr.w	r3, r3, #7340032	; 0x700000
    3314:	orr.w	r3, r3, #16
    3318:	str.w	r3, [lr]
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    331c:	bl	312c <SDHC_CMD12_StopTransferWaitForBusy>
			return SDHC_RESULT_ERROR;
    3320:	movs	r0, #1
    3322:	b.n	32e8 <KinetisSDHC_WriteBlock+0x74>
    3324:	.word	0x1fffcdc8
    3328:	.word	0x400b1030
    332c:	.word	0x400b1008
    3330:	.word	0x400b1004
    3334:	.word	0x183a0000
    3338:	.word	0x400b1010
    333c:	.word	0x400b1020
    3340:	.word	0x01000012

00003344 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    3344:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    3348:	add.w	lr, r0, #256	; 0x100

0000334c <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    334c:	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    3350:	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    3354:	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    3358:	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    335c:	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    3360:	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    3364:	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    3368:	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    336c:	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    3370:	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    3374:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    3378:	cmp	lr, r0
	bne .loopLR
    337a:	bne.n	334c <.loopLR>

	pop	{r4-r11,r14}	
    337c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    3380:	bx	lr

00003382 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    3382:	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    3386:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    338a:	add.w	ip, r0, #256	; 0x100
    338e:	nop

00003390 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    3390:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    3394:	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    3398:	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    339c:	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    33a0:	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    33a4:	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    33a8:	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    33ac:	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    33b0:	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    33b4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    33b8:	cmp	ip, r0
	bne .loopL
    33ba:	bne.n	3390 <.loopL>

	pop	{r4-r11}
    33bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    33c0:	bx	lr

000033c2 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    33c2:	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    33c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    33ca:	add.w	ip, r0, #256	; 0x100
    33ce:	nop

000033d0 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    33d0:	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    33d4:	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    33d8:	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    33dc:	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    33e0:	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    33e4:	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    33e8:	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    33ec:	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    33f0:	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    33f4:	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    33f8:	cmp	ip, r0
	bne .loopR
    33fa:	bne.n	33d0 <.loopR>

	pop	{r4-r11}
    33fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    3400:	bx	lr

00003402 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    3402:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    3406:	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    3408:	add.w	fp, r0, #512	; 0x200

0000340c <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    340c:	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    3410:	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    3414:	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    3418:	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    341c:	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    3420:	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    3424:	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    3428:	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    342c:	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    3430:	cmp	fp, r0
	bne .loopQuad
    3432:	bne.n	340c <.loopQuad>

	pop	{r4-r11}
    3434:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    3438:	bx	lr
    343a:	nop

0000343c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    343c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    343e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3442:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3446:	bne.n	3524 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3448:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    344a:	bcc.n	34d0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    344c:	ldr.w	r3, [r1], #4
    3450:	str.w	r3, [r0], #4
    3454:	ldr.w	r3, [r1], #4
    3458:	str.w	r3, [r0], #4
    345c:	ldr.w	r3, [r1], #4
    3460:	str.w	r3, [r0], #4
    3464:	ldr.w	r3, [r1], #4
    3468:	str.w	r3, [r0], #4
    346c:	ldr.w	r3, [r1], #4
    3470:	str.w	r3, [r0], #4
    3474:	ldr.w	r3, [r1], #4
    3478:	str.w	r3, [r0], #4
    347c:	ldr.w	r3, [r1], #4
    3480:	str.w	r3, [r0], #4
    3484:	ldr.w	r3, [r1], #4
    3488:	str.w	r3, [r0], #4
    348c:	ldr.w	r3, [r1], #4
    3490:	str.w	r3, [r0], #4
    3494:	ldr.w	r3, [r1], #4
    3498:	str.w	r3, [r0], #4
    349c:	ldr.w	r3, [r1], #4
    34a0:	str.w	r3, [r0], #4
    34a4:	ldr.w	r3, [r1], #4
    34a8:	str.w	r3, [r0], #4
    34ac:	ldr.w	r3, [r1], #4
    34b0:	str.w	r3, [r0], #4
    34b4:	ldr.w	r3, [r1], #4
    34b8:	str.w	r3, [r0], #4
    34bc:	ldr.w	r3, [r1], #4
    34c0:	str.w	r3, [r0], #4
    34c4:	ldr.w	r3, [r1], #4
    34c8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    34cc:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    34ce:	bcs.n	344c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    34d0:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    34d2:	bcc.n	34f8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    34d4:	ldr.w	r3, [r1], #4
    34d8:	str.w	r3, [r0], #4
    34dc:	ldr.w	r3, [r1], #4
    34e0:	str.w	r3, [r0], #4
    34e4:	ldr.w	r3, [r1], #4
    34e8:	str.w	r3, [r0], #4
    34ec:	ldr.w	r3, [r1], #4
    34f0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    34f4:	subs	r2, #16
	bhs	.Lmid_block_loop
    34f6:	bcs.n	34d4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    34f8:	adds	r2, #12
	blo	.Lcopy_less_than_4
    34fa:	bcc.n	3508 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    34fc:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3500:	str.w	r3, [r0], #4
	subs	r2, #4
    3504:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3506:	bcs.n	34fc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3508:	adds	r2, #4
	beq	.Ldone
    350a:	beq.n	351e <memcpy+0xe2>

	lsls	r2, r2, #31
    350c:	lsls	r2, r2, #31
	itt ne
    350e:	itt	ne
	ldrbne  r3, [r1], #1
    3510:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3514:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3518:	bcc.n	351e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    351a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    351c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    351e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3520:	bx	lr
    3522:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3524:	cmp	r2, #8
	blo	.Lbyte_copy
    3526:	bcc.n	3550 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3528:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    352a:	beq.n	3448 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    352c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3530:	beq.n	3448 <memcpy+0xc>

	rsb	r3, #4
    3532:	rsb	r3, r3, #4
	subs	r2, r3
    3536:	subs	r2, r2, r3

	lsls    r3, r3, #31
    3538:	lsls	r3, r3, #31
	itt ne
    353a:	itt	ne
	ldrbne  r3, [r1], #1
    353c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3540:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3544:	bcc.n	3448 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3546:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    354a:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    354e:	b.n	3448 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3550:	subs	r2, #4
	blo	.Lcopy_less_than_4
    3552:	bcc.n	3508 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3554:	subs	r2, #1
	ldrb    r3, [r1], #1
    3556:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    355a:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    355e:	bcs.n	3554 <memcpy+0x118>

	ldrb	r3, [r1]
    3560:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3562:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3564:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3566:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3568:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    356a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    356c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    356e:	bx	lr

00003570 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    3570:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    3572:	ldr	r5, [pc, #60]	; (35b0 <usb_serial_getchar+0x40>)
    3574:	ldr	r0, [r5, #0]
    3576:	cbz	r0, 3598 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    3578:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    357a:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    357c:	adds	r1, r0, r3
    357e:	adds	r3, #1
	if (i >= rx_packet->len) {
    3580:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    3582:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    3584:	bcs.n	358c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    3586:	strh	r3, [r0, #2]
	}
	return c;
    3588:	mov	r0, r4
}
    358a:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    358c:	bl	3d6c <usb_free>
		rx_packet = NULL;
    3590:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    3592:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    3594:	str	r3, [r5, #0]
    3596:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    3598:	ldr	r3, [pc, #24]	; (35b4 <usb_serial_getchar+0x44>)
    359a:	ldrb	r3, [r3, #0]
    359c:	cbz	r3, 35aa <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    359e:	movs	r0, #3
    35a0:	bl	3db8 <usb_rx>
    35a4:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    35a6:	cmp	r0, #0
    35a8:	bne.n	3578 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    35aa:	mov.w	r0, #4294967295
    35ae:	pop	{r3, r4, r5, pc}
    35b0:	.word	0x1fffcde4
    35b4:	.word	0x1fffced0

000035b8 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    35b8:	push	{r4, lr}
	if (!rx_packet) {
    35ba:	ldr	r4, [pc, #36]	; (35e0 <usb_serial_peekchar+0x28>)
    35bc:	ldr	r0, [r4, #0]
    35be:	cbz	r0, 35c8 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    35c0:	ldrh	r3, [r0, #2]
    35c2:	add	r0, r3
    35c4:	ldrb	r0, [r0, #8]
}
    35c6:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    35c8:	ldr	r3, [pc, #24]	; (35e4 <usb_serial_peekchar+0x2c>)
    35ca:	ldrb	r3, [r3, #0]
    35cc:	cbz	r3, 35da <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    35ce:	movs	r0, #3
    35d0:	bl	3db8 <usb_rx>
    35d4:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    35d6:	cmp	r0, #0
    35d8:	bne.n	35c0 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    35da:	mov.w	r0, #4294967295
    35de:	pop	{r4, pc}
    35e0:	.word	0x1fffcde4
    35e4:	.word	0x1fffced0

000035e8 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    35e8:	ldr	r3, [pc, #16]	; (35fc <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    35ea:	ldr	r2, [pc, #20]	; (3600 <usb_serial_available+0x18>)
    35ec:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    35ee:	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    35f0:	cbz	r3, 35fa <usb_serial_available+0x12>
    35f2:	ldrh	r2, [r3, #0]
    35f4:	ldrh	r3, [r3, #2]
    35f6:	subs	r3, r2, r3
    35f8:	add	r0, r3
	return count;
}
    35fa:	bx	lr
    35fc:	.word	0x1fffcde4
    3600:	.word	0x1fffd2c8

00003604 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    3604:	ldr	r3, [pc, #44]	; (3634 <usb_serial_flush_input+0x30>)
    3606:	ldrb	r3, [r3, #0]
    3608:	cbz	r3, 3632 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    360a:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    360c:	ldr	r4, [pc, #40]	; (3638 <usb_serial_flush_input+0x34>)
    360e:	ldr	r0, [r4, #0]
    3610:	cbz	r0, 3626 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    3612:	bl	3d6c <usb_free>
		rx_packet = NULL;
    3616:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3618:	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    361a:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    361c:	bl	3db8 <usb_rx>
		if (!rx) break;
    3620:	cbz	r0, 3630 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    3622:	bl	3d6c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    3626:	movs	r0, #3
    3628:	bl	3db8 <usb_rx>
		if (!rx) break;
    362c:	cmp	r0, #0
    362e:	bne.n	3622 <usb_serial_flush_input+0x1e>
    3630:	pop	{r4, pc}
    3632:	bx	lr
    3634:	.word	0x1fffced0
    3638:	.word	0x1fffcde4

0000363c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    363c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3640:	ldr.w	r9, [pc, #248]	; 373c <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    3644:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    3646:	movs	r2, #1
    3648:	strb.w	r2, [r9]
	while (size > 0) {
    364c:	str	r1, [sp, #4]
    364e:	cbz	r1, 36ac <usb_serial_write+0x70>
    3650:	ldr.w	r8, [pc, #236]	; 3740 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    3654:	ldr	r7, [pc, #212]	; (372c <usb_serial_write+0xf0>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3656:	ldr	r6, [sp, #4]
    3658:	mov	fp, r0
		if (!tx_packet) {
    365a:	ldr.w	r0, [r8]
    365e:	cbz	r0, 36ce <usb_serial_write+0x92>
    3660:	ldr	r5, [pc, #204]	; (3730 <usb_serial_write+0xf4>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    3662:	ldrh	r4, [r0, #2]
    3664:	rsb	r1, r4, #64	; 0x40
    3668:	cmp	r1, r6
    366a:	it	cs
    366c:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    366e:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3672:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    3674:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    3678:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    367a:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    367c:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    3680:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    3684:	cbz	r1, 369c <usb_serial_write+0x60>
    3686:	subs	r4, #1
    3688:	add	r2, r4
    368a:	add	r1, fp
    368c:	ldrb.w	r4, [fp], #1
    3690:	strb.w	r4, [r2, #1]!
    3694:	cmp	fp, r1
    3696:	bne.n	368c <usb_serial_write+0x50>
    3698:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    369c:	cmp.w	lr, #63	; 0x3f
    36a0:	bhi.n	36ba <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    36a2:	ldr	r2, [pc, #144]	; (3734 <usb_serial_write+0xf8>)
    36a4:	movs	r1, #5
    36a6:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    36a8:	cmp	r6, #0
    36aa:	bne.n	365a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    36ac:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    36ae:	movs	r3, #0
    36b0:	strb.w	r3, [r9]
	return ret;
}
    36b4:	add	sp, #12
    36b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    36ba:	movs	r2, #64	; 0x40
    36bc:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    36be:	mov	r1, r0
    36c0:	movs	r0, #4
    36c2:	bl	3ee8 <usb_tx>
			tx_packet = NULL;
    36c6:	movs	r2, #0
    36c8:	str.w	r2, [r8]
    36cc:	b.n	36a2 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    36ce:	ldrb	r2, [r7, #0]
    36d0:	cbz	r2, 371c <usb_serial_write+0xe0>
    36d2:	ldr	r4, [pc, #100]	; (3738 <usb_serial_write+0xfc>)
    36d4:	ldr	r5, [pc, #88]	; (3730 <usb_serial_write+0xf4>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    36d6:	mov.w	sl, #1
    36da:	b.n	36ec <usb_serial_write+0xb0>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    36dc:	subs	r4, #1
    36de:	beq.n	370e <usb_serial_write+0xd2>
    36e0:	ldrb	r2, [r5, #0]
    36e2:	cbnz	r2, 370e <usb_serial_write+0xd2>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    36e4:	bl	4e18 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    36e8:	ldrb	r2, [r7, #0]
    36ea:	cbz	r2, 371c <usb_serial_write+0xe0>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    36ec:	movs	r0, #4
    36ee:	bl	3df4 <usb_tx_packet_count>
    36f2:	cmp	r0, #7
    36f4:	bhi.n	36dc <usb_serial_write+0xa0>
					tx_noautoflush = 1;
    36f6:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    36fa:	bl	3d2c <usb_malloc>
    36fe:	str.w	r0, [r8]
					if (tx_packet) break;
    3702:	cmp	r0, #0
    3704:	bne.n	3662 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    3706:	ldr	r3, [pc, #52]	; (373c <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    3708:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    370a:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    370c:	bne.n	36e0 <usb_serial_write+0xa4>
					transmit_previous_timeout = 1;
    370e:	movs	r3, #1
					return -1;
    3710:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    3714:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3716:	add	sp, #12
    3718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    371c:	movs	r3, #0
					return -1;
    371e:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    3722:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    3726:	add	sp, #12
    3728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    372c:	.word	0x1fffced0
    3730:	.word	0x1fffcde0
    3734:	.word	0x1fffcdd8
    3738:	.word	0x00014821
    373c:	.word	0x1fffcdd9
    3740:	.word	0x1fffcddc

00003744 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3744:	push	{lr}
    3746:	sub	sp, #12
    3748:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    374a:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    374c:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    3750:	mov	r0, r3
    3752:	bl	363c <usb_serial_write>
}
    3756:	add	sp, #12
    3758:	ldr.w	pc, [sp], #4

0000375c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    375c:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    375e:	ldr	r5, [pc, #56]	; (3798 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3760:	ldr	r4, [pc, #56]	; (379c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    3762:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    3764:	movs	r3, #1
    3766:	strb	r3, [r4, #0]
	if (!tx_packet) {
    3768:	cbz	r0, 3776 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    376a:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    376c:	movs	r3, #0
    376e:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3770:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    3774:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3776:	ldr	r3, [pc, #40]	; (37a0 <usb_serial_write_buffer_free+0x44>)
    3778:	ldrb	r3, [r3, #0]
    377a:	cbnz	r3, 3782 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    377c:	movs	r0, #0
    377e:	strb	r0, [r4, #0]
			return 0;
    3780:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3782:	movs	r0, #4
    3784:	bl	3df4 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    3788:	cmp	r0, #7
    378a:	bhi.n	377c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    378c:	bl	3d2c <usb_malloc>
    3790:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3792:	cmp	r0, #0
    3794:	bne.n	376a <usb_serial_write_buffer_free+0xe>
    3796:	b.n	377c <usb_serial_write_buffer_free+0x20>
    3798:	.word	0x1fffcddc
    379c:	.word	0x1fffcdd9
    37a0:	.word	0x1fffced0

000037a4 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    37a4:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    37a6:	ldr	r3, [pc, #68]	; (37ec <usb_serial_flush_output+0x48>)
    37a8:	ldrb	r3, [r3, #0]
    37aa:	cbz	r3, 37d0 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    37ac:	ldr	r6, [pc, #64]	; (37f0 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    37ae:	ldr	r5, [pc, #68]	; (37f4 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    37b0:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    37b2:	movs	r7, #1
    37b4:	strb	r7, [r5, #0]
	if (tx_packet) {
    37b6:	cbz	r4, 37d2 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    37b8:	ldr	r2, [pc, #60]	; (37f8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    37ba:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    37bc:	movs	r7, #0
    37be:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    37c0:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    37c2:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    37c4:	movs	r0, #4
    37c6:	bl	3ee8 <usb_tx>
		tx_packet = NULL;
    37ca:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    37cc:	movs	r3, #0
    37ce:	strb	r3, [r5, #0]
    37d0:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    37d2:	bl	3d2c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    37d6:	ldr	r3, [pc, #32]	; (37f8 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    37d8:	cbz	r0, 37e6 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    37da:	mov	r1, r0
    37dc:	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    37de:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    37e0:	bl	3ee8 <usb_tx>
    37e4:	b.n	37cc <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    37e6:	strb	r7, [r3, #0]
    37e8:	b.n	37cc <usb_serial_flush_output+0x28>
    37ea:	nop
    37ec:	.word	0x1fffced0
    37f0:	.word	0x1fffcddc
    37f4:	.word	0x1fffcdd9
    37f8:	.word	0x1fffcdd8

000037fc <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    37fc:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    37fe:	ldr	r3, [pc, #56]	; (3838 <usb_serial_flush_callback+0x3c>)
    3800:	ldrb	r3, [r3, #0]
    3802:	cbnz	r3, 3822 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    3804:	ldr	r4, [pc, #52]	; (383c <usb_serial_flush_callback+0x40>)
    3806:	ldr	r1, [r4, #0]
    3808:	cbz	r1, 3824 <usb_serial_flush_callback+0x28>
    380a:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    380e:	ldrh	r3, [r1, #2]
    3810:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3812:	movs	r0, #4
    3814:	bl	3ee8 <usb_tx>
		tx_packet = NULL;
    3818:	str	r5, [r4, #0]
    381a:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    381c:	ldr	r3, [pc, #32]	; (3840 <usb_serial_flush_callback+0x44>)
    381e:	movs	r2, #1
    3820:	strb	r2, [r3, #0]
    3822:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    3824:	bl	3d2c <usb_malloc>
		if (tx) {
    3828:	cmp	r0, #0
    382a:	beq.n	381c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    382c:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    382e:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    3832:	movs	r0, #4
    3834:	b.w	3ee8 <usb_tx>
    3838:	.word	0x1fffcdd9
    383c:	.word	0x1fffcddc
    3840:	.word	0x1fffcdd8

00003844 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    3844:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3846:	ldr	r0, [pc, #164]	; (38ec <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3848:	ldr	r2, [pc, #164]	; (38f0 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    384a:	ldr	r3, [pc, #168]	; (38f4 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    384c:	ldr	r5, [pc, #168]	; (38f8 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    384e:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3850:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3852:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    3854:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    3856:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3858:	ldr	r4, [pc, #160]	; (38fc <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    385a:	cmp	r3, #8
    385c:	beq.n	38c0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    385e:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    3860:	ldr	r0, [pc, #156]	; (3900 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3862:	ldr	r1, [pc, #160]	; (3904 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    3864:	beq.n	38d6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    3866:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    3868:	ite	eq
    386a:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    386c:	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    386e:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    3870:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    3872:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    3874:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    3876:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    3878:	ldr	r3, [pc, #140]	; (3908 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    387a:	ldr	r1, [pc, #144]	; (390c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    387c:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    387e:	ldr	r2, [pc, #144]	; (3910 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    3880:	cbz	r3, 38b2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    3882:	movs	r3, #1
    3884:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    3886:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    3888:	ldr	r3, [pc, #136]	; (3914 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    388a:	ldr	r1, [pc, #140]	; (3918 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    388c:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    388e:	ldr	r2, [pc, #140]	; (391c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    3890:	cmp	r3, #1
    3892:	bls.n	38e2 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    3894:	cmp	r3, #4
    3896:	bls.n	38b8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    3898:	cmp	r3, #8
    389a:	bls.n	38da <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    389c:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    389e:	ite	ls
    38a0:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    38a2:	movhi	r3, #135	; 0x87
    38a4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    38a6:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    38a8:	ldr	r3, [pc, #116]	; (3920 <analog_init+0xdc>)
    38aa:	movs	r2, #1
    38ac:	strb	r2, [r3, #0]
}
    38ae:	pop	{r4, r5}
    38b0:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    38b2:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    38b4:	str	r3, [r2, #0]
    38b6:	b.n	3888 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    38b8:	movs	r3, #132	; 0x84
    38ba:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    38bc:	str	r3, [r2, #0]
    38be:	b.n	38a8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    38c0:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    38c4:	ldr	r1, [pc, #60]	; (3904 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    38c6:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    38c8:	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    38ca:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    38cc:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    38ce:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    38d0:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    38d2:	str	r3, [r1, #0]
    38d4:	b.n	3878 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    38d6:	movs	r2, #57	; 0x39
    38d8:	b.n	38ca <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    38da:	movs	r3, #133	; 0x85
    38dc:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    38de:	str	r3, [r2, #0]
    38e0:	b.n	38a8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    38e2:	movs	r3, #128	; 0x80
    38e4:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    38e6:	str	r3, [r2, #0]
    38e8:	b.n	38a8 <analog_init+0x64>
    38ea:	nop
    38ec:	.word	0x40074000
    38f0:	.word	0x40074001
    38f4:	.word	0x1fffaf9c
    38f8:	.word	0x4003b008
    38fc:	.word	0x4003b00c
    3900:	.word	0x400bb008
    3904:	.word	0x400bb00c
    3908:	.word	0x1fffcdea
    390c:	.word	0x4003b020
    3910:	.word	0x400bb020
    3914:	.word	0x1fffaf9d
    3918:	.word	0x4003b024
    391c:	.word	0x400bb024
    3920:	.word	0x1fffcde9

00003924 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    3924:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    3926:	ldr	r4, [pc, #64]	; (3968 <fault_isr+0x44>)
    3928:	b.n	393c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    392a:	ldr	r3, [r4, #0]
    392c:	lsls	r1, r3, #21
    392e:	bmi.n	394c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3930:	ldr	r3, [r4, #0]
    3932:	lsls	r2, r3, #20
    3934:	bmi.n	3956 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    3936:	ldr	r3, [r4, #0]
    3938:	lsls	r3, r3, #19
    393a:	bmi.n	3960 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    393c:	ldr	r3, [r4, #0]
    393e:	lsls	r0, r3, #13
    3940:	bpl.n	392a <fault_isr+0x6>
    3942:	bl	3f6c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    3946:	ldr	r3, [r4, #0]
    3948:	lsls	r1, r3, #21
    394a:	bpl.n	3930 <fault_isr+0xc>
    394c:	bl	5698 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    3950:	ldr	r3, [r4, #0]
    3952:	lsls	r2, r3, #20
    3954:	bpl.n	3936 <fault_isr+0x12>
    3956:	bl	5474 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    395a:	ldr	r3, [r4, #0]
    395c:	lsls	r3, r3, #19
    395e:	bpl.n	393c <fault_isr+0x18>
    3960:	bl	5998 <uart2_status_isr>
    3964:	b.n	393c <fault_isr+0x18>
    3966:	nop
    3968:	.word	0x40048034

0000396c <unused_isr>:
	}
}

void unused_isr(void)
{
    396c:	push	{r3, lr}
	fault_isr();
    396e:	bl	3924 <fault_isr>
    3972:	nop

00003974 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    3974:	ldr	r3, [pc, #4]	; (397c <startup_early_hook+0x8>)
    3976:	movs	r2, #16
    3978:	strh	r2, [r3, #0]
    397a:	bx	lr
    397c:	.word	0x40052000

00003980 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    3980:	bx	lr
    3982:	nop

00003984 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    3984:	ldr	r1, [pc, #36]	; (39ac <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    3986:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    3988:	ldr	r3, [r1, #0]
	if (incr != 0) {
    398a:	cbz	r0, 399a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    398c:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    398e:	add	r0, r3
    3990:	sub.w	r2, r2, #8192	; 0x2000
    3994:	cmp	r0, r2
    3996:	bcs.n	399e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    3998:	str	r0, [r1, #0]
	}
	return prev;
    399a:	mov	r0, r3
}
    399c:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    399e:	bl	5a90 <__errno>
    39a2:	movs	r3, #12
    39a4:	str	r3, [r0, #0]
			return (void *)-1;
    39a6:	mov.w	r0, #4294967295
    39aa:	pop	{r3, pc}
    39ac:	.word	0x1fffafa0

000039b0 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    39b0:	b.n	39b0 <__cxa_pure_virtual>
    39b2:	nop

000039b4 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    39b4:	ldr	r2, [pc, #32]	; (39d8 <kinetis_hsrun_disable+0x24>)
    39b6:	ldrb	r3, [r2, #0]
    39b8:	cmp	r3, #128	; 0x80
    39ba:	beq.n	39c0 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    39bc:	movs	r0, #0
}
    39be:	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    39c0:	ldr	r1, [pc, #24]	; (39dc <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    39c2:	ldr	r3, [pc, #28]	; (39e0 <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    39c4:	ldr	r0, [pc, #28]	; (39e4 <kinetis_hsrun_disable+0x30>)
    39c6:	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    39c8:	movs	r1, #0
    39ca:	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    39cc:	ldrb	r3, [r2, #0]
    39ce:	cmp	r3, #128	; 0x80
    39d0:	beq.n	39cc <kinetis_hsrun_disable+0x18>
		return 1;
    39d2:	movs	r0, #1
    39d4:	bx	lr
    39d6:	nop
    39d8:	.word	0x4007e003
    39dc:	.word	0x40048044
    39e0:	.word	0x4007e001
    39e4:	.word	0x22280000

000039e8 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    39e8:	ldr	r2, [pc, #36]	; (3a10 <kinetis_hsrun_enable+0x28>)
    39ea:	ldrb	r3, [r2, #0]
    39ec:	cmp	r3, #1
    39ee:	beq.n	39f4 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    39f0:	movs	r0, #0
}
    39f2:	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    39f4:	add.w	r3, r3, #1073741824	; 0x40000000
    39f8:	add.w	r3, r3, #516096	; 0x7e000
    39fc:	movs	r1, #96	; 0x60
    39fe:	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    3a00:	ldrb	r3, [r2, #0]
    3a02:	cmp	r3, #128	; 0x80
    3a04:	bne.n	3a00 <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    3a06:	ldr	r3, [pc, #12]	; (3a14 <kinetis_hsrun_enable+0x2c>)
    3a08:	ldr	r2, [pc, #12]	; (3a18 <kinetis_hsrun_enable+0x30>)
    3a0a:	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    3a0c:	movs	r0, #1
    3a0e:	bx	lr
    3a10:	.word	0x4007e003
    3a14:	.word	0x40048044
    3a18:	.word	0x02060000

00003a1c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    3a1c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    3a1e:	ldr	r3, [pc, #68]	; (3a64 <digitalWrite.part.1+0x48>)
    3a20:	ldr.w	r2, [r3, r0, lsl #3]
    3a24:	ldrb.w	r4, [r2, #640]	; 0x280
    3a28:	cbz	r4, 3a38 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    3a2a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    3a2c:	cbz	r1, 3a4e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    3a2e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3a32:	ldr.w	r4, [sp], #4
    3a36:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    3a38:	add.w	r3, r3, r0, lsl #3
    3a3c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3a3e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    3a40:	cbnz	r1, 3a58 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    3a42:	bic.w	r2, r2, #2
    3a46:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3a48:	ldr.w	r4, [sp], #4
    3a4c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    3a4e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3a52:	ldr.w	r4, [sp], #4
    3a56:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    3a58:	orr.w	r2, r2, #3
    3a5c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    3a5e:	ldr.w	r4, [sp], #4
    3a62:	bx	lr
    3a64:	.word	0x0000685c

00003a68 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    3a68:	ldr	r2, [pc, #112]	; (3adc <pinMode.part.2+0x74>)
    3a6a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3a6e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    3a70:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3a72:	beq.n	3a98 <pinMode.part.2+0x30>
    3a74:	cmp	r1, #4
    3a76:	beq.n	3ab0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    3a78:	ldr.w	r0, [r2, r0, lsl #3]
    3a7c:	movs	r2, #0
    3a7e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    3a82:	cbz	r1, 3a90 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    3a84:	cmp	r1, #2
    3a86:	beq.n	3aca <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    3a88:	cmp	r1, #3
    3a8a:	beq.n	3ad2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    3a8c:	str	r2, [r3, #0]
    3a8e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    3a90:	mov.w	r2, #256	; 0x100
    3a94:	str	r2, [r3, #0]
    3a96:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3a98:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3a9c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3aa0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3aa4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    3aa6:	ldr	r2, [r3, #0]
    3aa8:	bic.w	r2, r2, #32
    3aac:	str	r2, [r3, #0]
    3aae:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3ab0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3ab4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    3ab8:	movs	r0, #1
    3aba:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    3abe:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    3ac0:	ldr	r2, [r3, #0]
    3ac2:	orr.w	r2, r2, #32
    3ac6:	str	r2, [r3, #0]
    3ac8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    3aca:	movw	r2, #259	; 0x103
    3ace:	str	r2, [r3, #0]
    3ad0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    3ad2:	mov.w	r2, #258	; 0x102
    3ad6:	str	r2, [r3, #0]
    3ad8:	bx	lr
    3ada:	nop
    3adc:	.word	0x0000685c

00003ae0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    3ae0:	push	{r4, r5}
	RTC_SR = 0;
    3ae2:	ldr	r3, [pc, #20]	; (3af8 <rtc_set+0x18>)
	RTC_TPR = 0;
    3ae4:	ldr	r5, [pc, #20]	; (3afc <rtc_set+0x1c>)
	RTC_TSR = t;
    3ae6:	ldr	r4, [pc, #24]	; (3b00 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3ae8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    3aea:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    3aec:	str	r2, [r3, #0]
	RTC_TPR = 0;
    3aee:	str	r2, [r5, #0]
	RTC_TSR = t;
    3af0:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    3af2:	str	r1, [r3, #0]
}
    3af4:	pop	{r4, r5}
    3af6:	bx	lr
    3af8:	.word	0x4003d014
    3afc:	.word	0x4003d004
    3b00:	.word	0x4003d000

00003b04 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3b04:	cmp	r0, #63	; 0x3f
    3b06:	bhi.n	3b0c <digitalWrite+0x8>
    3b08:	b.w	3a1c <digitalWrite.part.1>
    3b0c:	bx	lr
    3b0e:	nop

00003b10 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    3b10:	cmp	r0, #63	; 0x3f
    3b12:	bhi.n	3b18 <pinMode+0x8>
    3b14:	b.w	3a68 <pinMode.part.2>
    3b18:	bx	lr
    3b1a:	nop

00003b1c <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    3b1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3b20:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3b22:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    3b24:	ldr	r7, [pc, #136]	; (3bb0 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3b26:	ldr	r3, [pc, #140]	; (3bb4 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3b28:	ldr	r2, [pc, #140]	; (3bb8 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3b2a:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    3b2c:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3b2e:	ldr	r2, [r2, #0]
	__enable_irq();
    3b30:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3b32:	lsls	r2, r2, #5
    3b34:	bpl.n	3b3c <delay+0x20>
    3b36:	cmp	r3, #50	; 0x32
    3b38:	it	hi
    3b3a:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    3b3c:	cbz	r5, 3bac <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3b3e:	rsb	r3, r3, #179200	; 0x2bc00
    3b42:	addw	r3, r3, #799	; 0x31f
    3b46:	ldr	r6, [pc, #116]	; (3bbc <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    3b48:	ldr.w	r9, [pc, #104]	; 3bb4 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3b4c:	ldr.w	r8, [pc, #104]	; 3bb8 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    3b50:	lsrs	r3, r3, #2
    3b52:	mov.w	r2, #1000	; 0x3e8
    3b56:	umull	r1, r3, r6, r3
    3b5a:	mul.w	r4, r2, r4
    3b5e:	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    3b62:	cpsid	i
	current = SYST_CVR;
    3b64:	ldr.w	r1, [r9]
	count = systick_millis_count;
    3b68:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    3b6a:	ldr.w	lr, [r8]
	__enable_irq();
    3b6e:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3b70:	rsb	r3, r1, #179200	; 0x2bc00
    3b74:	addw	r3, r3, #799	; 0x31f
    3b78:	lsrs	r3, r3, #2
    3b7a:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3b7e:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3b82:	rsb	r3, r4, r3, lsr #2
    3b86:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    3b8a:	beq.n	3b92 <delay+0x76>
    3b8c:	cmp	r1, #50	; 0x32
    3b8e:	it	hi
    3b90:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    3b92:	mla	r3, r0, r2, r3
    3b96:	cmp.w	r3, #1000	; 0x3e8
    3b9a:	bcc.n	3ba6 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    3b9c:	subs	r5, #1
    3b9e:	beq.n	3bac <delay+0x90>
				start += 1000;
    3ba0:	add.w	r4, r4, #1000	; 0x3e8
    3ba4:	b.n	3b62 <delay+0x46>
			}
			yield();
    3ba6:	bl	4e18 <yield>
		}
    3baa:	b.n	3b62 <delay+0x46>
    3bac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3bb0:	.word	0x1fffcdec
    3bb4:	.word	0xe000e018
    3bb8:	.word	0xe000ed04
    3bbc:	.word	0x16c16c17

00003bc0 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    3bc0:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3bc2:	ldr	r3, [pc, #312]	; (3cfc <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3bc4:	ldr	r0, [pc, #312]	; (3d00 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    3bc6:	ldr.w	ip, [pc, #348]	; 3d24 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    3bca:	ldr	r4, [pc, #312]	; (3d04 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    3bcc:	ldr	r1, [pc, #312]	; (3d08 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3bce:	ldr.w	lr, [pc, #344]	; 3d28 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    3bd2:	ldr	r6, [pc, #312]	; (3d0c <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    3bd4:	ldr	r5, [pc, #312]	; (3d10 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    3bd6:	ldr	r7, [pc, #316]	; (3d14 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    3bd8:	mov.w	r2, #134217728	; 0x8000000
    3bdc:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    3bde:	mov.w	r2, #268435456	; 0x10000000
    3be2:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    3be4:	mov.w	r2, #536870912	; 0x20000000
    3be8:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    3bea:	mov.w	r2, #1073741824	; 0x40000000
    3bee:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    3bf0:	mov.w	r2, #2147483648	; 0x80000000
    3bf4:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    3bf6:	movs	r2, #0
    3bf8:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3bfa:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    3bfc:	movw	r0, #61439	; 0xefff
    3c00:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    3c04:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    3c08:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    3c0a:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    3c0e:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    3c10:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    3c12:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3c14:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    3c18:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    3c1a:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    3c1e:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    3c20:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    3c24:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    3c26:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    3c2a:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3c2e:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    3c32:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    3c36:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    3c3a:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    3c3c:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    3c40:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    3c42:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    3c44:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    3c46:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    3c4a:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    3c4c:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    3c4e:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3c50:	ldr	r4, [pc, #196]	; (3d18 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    3c52:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    3c54:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3c56:	movs	r1, #9
    3c58:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    3c5a:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    3c5e:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    3c62:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    3c64:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    3c66:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    3c68:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    3c6a:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    3c6c:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3c6e:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3c72:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    3c76:	add.w	r7, r7, #520192	; 0x7f000
    3c7a:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    3c7c:	addw	r4, r4, #2044	; 0x7fc
    3c80:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    3c82:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    3c84:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    3c86:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3c88:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    3c8c:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    3c8e:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    3c92:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    3c96:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3c98:	sub.w	r4, r4, #460800	; 0x70800
    3c9c:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    3ca0:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    3ca2:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    3ca4:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3ca8:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    3caa:	ldr	r0, [pc, #112]	; (3d1c <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    3cac:	orr.w	r1, r1, #512	; 0x200
    3cb0:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    3cb2:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    3cb4:	ldr	r4, [pc, #104]	; (3d20 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    3cb6:	add.w	lr, lr, #65280	; 0xff00
    3cba:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    3cbe:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    3cc2:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    3cc6:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    3cca:	orr.w	r1, r1, #33554432	; 0x2000000
    3cce:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    3cd0:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    3cd4:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    3cd8:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    3cda:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    3cdc:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    3cde:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    3ce0:	str	r2, [r4, #0]
#endif
	analog_init();
    3ce2:	bl	3844 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    3ce6:	movs	r0, #25
    3ce8:	bl	3b1c <delay>
	usb_init();
    3cec:	bl	4a3c <usb_init>
	delay(275);
    3cf0:	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    3cf4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    3cf8:	b.w	3b1c <delay>
    3cfc:	.word	0xe000e104
    3d00:	.word	0x40038004
    3d04:	.word	0x40038014
    3d08:	.word	0x4003801c
    3d0c:	.word	0x40038024
    3d10:	.word	0x4003802c
    3d14:	.word	0x40038034
    3d18:	.word	0x40038000
    3d1c:	.word	0x40048004
    3d20:	.word	0x400c9000
    3d24:	.word	0x40038008
    3d28:	.word	0x4003800c

00003d2c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    3d2c:	cpsid	i
	avail = usb_buffer_available;
    3d2e:	ldr	r0, [pc, #52]	; (3d64 <usb_malloc+0x38>)
    3d30:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    3d32:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    3d36:	cmp	r3, #11
    3d38:	bgt.n	3d5c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    3d3a:	mov.w	r1, #2147483648	; 0x80000000
    3d3e:	lsrs	r1, r3
    3d40:	bic.w	r2, r2, r1
    3d44:	str	r2, [r0, #0]
	__enable_irq();
    3d46:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    3d48:	ldr	r0, [pc, #28]	; (3d68 <usb_malloc+0x3c>)
    3d4a:	add.w	r3, r3, r3, lsl #3
    3d4e:	lsls	r3, r3, #3
    3d50:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    3d52:	movs	r1, #0
    3d54:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    3d56:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    3d58:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    3d5a:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    3d5c:	cpsie	i
		return NULL;
    3d5e:	movs	r0, #0
    3d60:	bx	lr
    3d62:	nop
    3d64:	.word	0x1fffafa4
    3d68:	.word	0x1fffa9d0

00003d6c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    3d6c:	ldr	r3, [pc, #52]	; (3da4 <usb_free+0x38>)
    3d6e:	ldr	r2, [pc, #56]	; (3da8 <usb_free+0x3c>)
    3d70:	subs	r3, r0, r3
    3d72:	umull	r2, r3, r2, r3
    3d76:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    3d78:	cmp	r3, #11
    3d7a:	bhi.n	3d96 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3d7c:	ldr	r2, [pc, #44]	; (3dac <usb_free+0x40>)
    3d7e:	ldrb	r2, [r2, #0]
    3d80:	cbnz	r2, 3d98 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    3d82:	cpsid	i
	usb_buffer_available |= mask;
    3d84:	ldr	r0, [pc, #40]	; (3db0 <usb_free+0x44>)
    3d86:	mov.w	r1, #2147483648	; 0x80000000
    3d8a:	ldr	r2, [r0, #0]
    3d8c:	lsr.w	r3, r1, r3
    3d90:	orrs	r2, r3
    3d92:	str	r2, [r0, #0]
	__enable_irq();
    3d94:	cpsie	i
    3d96:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    3d98:	ldr	r2, [pc, #24]	; (3db4 <usb_free+0x48>)
    3d9a:	ldrb	r2, [r2, #0]
    3d9c:	cmp	r2, #0
    3d9e:	beq.n	3d82 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    3da0:	b.w	3e20 <usb_rx_memory>
    3da4:	.word	0x1fffa9d0
    3da8:	.word	0x38e38e39
    3dac:	.word	0x1fffcec5
    3db0:	.word	0x1fffafa4
    3db4:	.word	0x1fffced0

00003db8 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    3db8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3dba:	cmp	r3, #3
    3dbc:	bhi.n	3de8 <usb_rx+0x30>
	__disable_irq();
    3dbe:	cpsid	i
	ret = rx_first[endpoint];
    3dc0:	ldr	r1, [pc, #40]	; (3dec <usb_rx+0x34>)
    3dc2:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    3dc6:	cbz	r0, 3de4 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    3dc8:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3dca:	ldr	r4, [pc, #36]	; (3df0 <usb_rx+0x38>)
    3dcc:	ldrh	r5, [r0, #0]
    3dce:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    3dd2:	ldr	r6, [r0, #4]
    3dd4:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    3dd8:	subs	r2, r2, r5
    3dda:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    3dde:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3de0:	pop	{r4, r5, r6}
    3de2:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    3de4:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    3de6:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    3de8:	movs	r0, #0
    3dea:	bx	lr
    3dec:	.word	0x1fffce48
    3df0:	.word	0x1fffd2c8

00003df4 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    3df4:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3df6:	cmp	r0, #3
    3df8:	bhi.n	3e12 <usb_tx_packet_count+0x1e>
	__disable_irq();
    3dfa:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    3dfc:	ldr	r3, [pc, #28]	; (3e1c <usb_tx_packet_count+0x28>)
    3dfe:	ldr.w	r3, [r3, r0, lsl #2]
    3e02:	cbz	r3, 3e16 <usb_tx_packet_count+0x22>
    3e04:	movs	r0, #0
    3e06:	ldr	r3, [r3, #4]
    3e08:	adds	r0, #1
    3e0a:	cmp	r3, #0
    3e0c:	bne.n	3e06 <usb_tx_packet_count+0x12>
	__enable_irq();
    3e0e:	cpsie	i
	return count;
    3e10:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    3e12:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    3e14:	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    3e16:	mov	r0, r3
    3e18:	b.n	3e0e <usb_tx_packet_count+0x1a>
    3e1a:	nop
    3e1c:	.word	0x1fffce9c

00003e20 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    3e20:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    3e22:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3e24:	ldr	r2, [pc, #172]	; (3ed4 <usb_rx_memory+0xb4>)
    3e26:	ldrb	r3, [r2, #0]
    3e28:	lsls	r5, r3, #28
    3e2a:	bpl.n	3e3a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3e2c:	ldr	r3, [pc, #168]	; (3ed8 <usb_rx_memory+0xb8>)
    3e2e:	ldr	r1, [r3, #32]
    3e30:	cmp	r1, #0
    3e32:	beq.n	3ea2 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3e34:	ldr	r1, [r3, #40]	; 0x28
    3e36:	cmp	r1, #0
    3e38:	beq.n	3ebe <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3e3a:	ldrb	r3, [r2, #1]
    3e3c:	lsls	r4, r3, #28
    3e3e:	bpl.n	3e4e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3e40:	ldr	r3, [pc, #148]	; (3ed8 <usb_rx_memory+0xb8>)
    3e42:	ldr	r1, [r3, #64]	; 0x40
    3e44:	cmp	r1, #0
    3e46:	beq.n	3ec6 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3e48:	ldr	r1, [r3, #72]	; 0x48
    3e4a:	cmp	r1, #0
    3e4c:	beq.n	3ec2 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3e4e:	ldrb	r3, [r2, #2]
    3e50:	lsls	r1, r3, #28
    3e52:	bpl.n	3e60 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3e54:	ldr	r3, [pc, #128]	; (3ed8 <usb_rx_memory+0xb8>)
    3e56:	ldr	r1, [r3, #96]	; 0x60
    3e58:	cmp	r1, #0
    3e5a:	beq.n	3eca <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3e5c:	ldr	r1, [r3, #104]	; 0x68
    3e5e:	cbz	r1, 3e84 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    3e60:	ldrb	r3, [r2, #3]
    3e62:	lsls	r3, r3, #28
    3e64:	bpl.n	3e76 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    3e66:	ldr	r3, [pc, #112]	; (3ed8 <usb_rx_memory+0xb8>)
    3e68:	ldr.w	r2, [r3, #128]	; 0x80
    3e6c:	cbz	r2, 3ece <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3e6e:	ldr.w	r2, [r3, #136]	; 0x88
    3e72:	movs	r1, #17
    3e74:	cbz	r2, 3e86 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    3e76:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    3e78:	ldr	r3, [pc, #96]	; (3edc <usb_rx_memory+0xbc>)
    3e7a:	movs	r2, #0
    3e7c:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    3e7e:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    3e80:	b.w	3d6c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3e84:	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3e86:	ldr	r4, [pc, #84]	; (3edc <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e88:	ldr	r5, [pc, #84]	; (3ee0 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    3e8a:	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    3e8c:	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3e90:	add.w	r3, r3, r1, lsl #3
    3e94:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3e96:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    3e98:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    3e9a:	strb	r2, [r4, #0]
				__enable_irq();
    3e9c:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    3e9e:	pop	{r4, r5}
    3ea0:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3ea2:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3ea4:	ldr	r4, [pc, #52]	; (3edc <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3ea6:	ldr	r5, [pc, #60]	; (3ee4 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    3ea8:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    3eaa:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3eae:	add.w	r3, r3, r2, lsl #3
    3eb2:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3eb4:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    3eb6:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    3eb8:	strb	r2, [r4, #0]
				__enable_irq();
    3eba:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    3ebc:	b.n	3e9e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    3ebe:	movs	r1, #5
    3ec0:	b.n	3e86 <usb_rx_memory+0x66>
    3ec2:	movs	r1, #9
    3ec4:	b.n	3e86 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    3ec6:	movs	r2, #8
    3ec8:	b.n	3ea4 <usb_rx_memory+0x84>
    3eca:	movs	r2, #12
    3ecc:	b.n	3ea4 <usb_rx_memory+0x84>
    3ece:	movs	r2, #16
    3ed0:	b.n	3ea4 <usb_rx_memory+0x84>
    3ed2:	nop
    3ed4:	.word	0x00006a88
    3ed8:	.word	0x1fff0000
    3edc:	.word	0x1fffcec5
    3ee0:	.word	0x004000c8
    3ee4:	.word	0x00400088

00003ee8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    3ee8:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    3eea:	cmp	r3, #3
    3eec:	bhi.n	3f2a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3eee:	ldr	r2, [pc, #108]	; (3f5c <usb_tx+0x74>)
    3ef0:	lsls	r0, r0, #5
    3ef2:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    3ef6:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    3ef8:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    3efa:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    3efc:	ldr	r4, [pc, #96]	; (3f60 <usb_tx+0x78>)
    3efe:	ldrb	r2, [r4, r3]
    3f00:	cmp	r2, #3
    3f02:	bhi.n	3f3c <usb_tx+0x54>
    3f04:	tbb	[pc, r2]
    3f08:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    3f0c:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3f0e:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    3f10:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3f12:	tst.w	r0, #8
    3f16:	ite	ne
    3f18:	movne	r3, #200	; 0xc8
    3f1a:	moveq	r3, #136	; 0x88
    3f1c:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3f20:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    3f22:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    3f24:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    3f26:	cpsie	i
}
    3f28:	pop	{r4, r5}
    3f2a:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    3f2c:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    3f2e:	movs	r2, #2
		break;
    3f30:	b.n	3f0e <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    3f32:	movs	r2, #5
    3f34:	b.n	3f0e <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    3f36:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    3f38:	movs	r2, #4
		break;
    3f3a:	b.n	3f0e <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    3f3c:	ldr	r2, [pc, #36]	; (3f64 <usb_tx+0x7c>)
    3f3e:	ldr.w	r0, [r2, r3, lsl #2]
    3f42:	cbz	r0, 3f54 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    3f44:	ldr	r2, [pc, #32]	; (3f68 <usb_tx+0x80>)
    3f46:	ldr.w	r0, [r2, r3, lsl #2]
    3f4a:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    3f4c:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    3f50:	cpsie	i
		return;
    3f52:	b.n	3f28 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    3f54:	str.w	r1, [r2, r3, lsl #2]
    3f58:	ldr	r2, [pc, #12]	; (3f68 <usb_tx+0x80>)
    3f5a:	b.n	3f4c <usb_tx+0x64>
    3f5c:	.word	0x1fff0000
    3f60:	.word	0x1fffced4
    3f64:	.word	0x1fffce9c
    3f68:	.word	0x1fffceac

00003f6c <usb_isr>:
}



void usb_isr(void)
{
    3f6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    3f70:	ldr.w	fp, [pc, #780]	; 4280 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    3f74:	ldr.w	sl, [pc, #780]	; 4284 <usb_isr+0x318>
}



void usb_isr(void)
{
    3f78:	sub	sp, #28
    3f7a:	b.n	4006 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    3f7c:	ldr	r7, [pc, #684]	; (422c <usb_isr+0x2c0>)
    3f7e:	mov.w	r8, r3, lsr #2
    3f82:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3f86:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3f88:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3f8c:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    3f90:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    3f92:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    3f96:	and.w	r4, r3, #255	; 0xff
    3f9a:	cmp	r3, #0
    3f9c:	bne.w	41a4 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    3fa0:	ldr.w	r3, [r7, r8, lsl #3]
    3fa4:	lsrs	r3, r3, #16
    3fa6:	uxth	r1, r3
    3fa8:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    3fac:	cmp	r3, #0
    3fae:	beq.w	4192 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    3fb2:	ldr	r3, [pc, #636]	; (4230 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    3fb4:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    3fb8:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    3fbc:	ldr.w	r2, [r3, r6, lsl #2]
    3fc0:	cmp	r2, #0
    3fc2:	beq.w	4550 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    3fc6:	ldr	r5, [pc, #620]	; (4234 <usb_isr+0x2c8>)
    3fc8:	ldr.w	r3, [r5, r6, lsl #2]
    3fcc:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    3fce:	ldr	r4, [pc, #616]	; (4238 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    3fd0:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    3fd4:	ldrh.w	r3, [r4, r6, lsl #1]
    3fd8:	add	r1, r3
    3fda:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    3fde:	bl	3d2c <usb_malloc>
					if (packet) {
    3fe2:	cmp	r0, #0
    3fe4:	beq.w	4542 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    3fe8:	ldr	r2, [pc, #592]	; (423c <usb_isr+0x2d0>)
    3fea:	ldr	r3, [pc, #596]	; (4240 <usb_isr+0x2d4>)
    3fec:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3ff0:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    3ff4:	it	ne
    3ff6:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    3ff8:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    3ffc:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    4000:	movs	r3, #8
    4002:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4006:	ldrb.w	r4, [fp]
    400a:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    400c:	lsls	r1, r4, #29
    400e:	bpl.n	4046 <usb_isr+0xda>
		if (usb_configuration) {
    4010:	ldr	r3, [pc, #560]	; (4244 <usb_isr+0x2d8>)
    4012:	ldrb	r3, [r3, #0]
    4014:	cbz	r3, 4040 <usb_isr+0xd4>
			t = usb_reboot_timer;
    4016:	ldr	r1, [pc, #560]	; (4248 <usb_isr+0x2dc>)
    4018:	ldrb	r2, [r1, #0]
			if (t) {
    401a:	and.w	r3, r2, #255	; 0xff
    401e:	cbz	r2, 402a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    4020:	subs	r3, #1
    4022:	uxtb	r3, r3
    4024:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    4026:	cbnz	r3, 402a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    4028:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    402a:	ldr	r1, [pc, #544]	; (424c <usb_isr+0x2e0>)
    402c:	ldrb	r2, [r1, #0]
			if (t) {
    402e:	and.w	r3, r2, #255	; 0xff
    4032:	cbz	r2, 4040 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    4034:	subs	r3, #1
    4036:	uxtb	r3, r3
    4038:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    403a:	cmp	r3, #0
    403c:	beq.w	44ee <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    4040:	movs	r3, #4
    4042:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    4046:	and.w	r3, r4, #8
    404a:	and.w	r2, r3, #255	; 0xff
    404e:	cmp	r3, #0
    4050:	beq.w	41ec <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    4054:	ldrb.w	r3, [sl]
    4058:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    405a:	lsrs	r6, r3, #4
    405c:	bne.n	3f7c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    405e:	lsrs	r4, r3, #2
    4060:	ldr.w	r9, [pc, #456]	; 422c <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4064:	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4068:	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    406c:	ubfx	r2, r2, #2, #4
    4070:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    4072:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4074:	cmp	r2, #12
    4076:	bhi.w	418a <usb_isr+0x21e>
    407a:	tbb	[pc, r2]
    407e:	.short	0x7c7c
    4080:	.word	0x86868686
    4084:	.word	0x86478686
    4088:	.short	0x8686
    408a:	.byte	0x07
    408b:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    408c:	ldr	r0, [r1, #0]
    408e:	ldr	r5, [pc, #448]	; (4250 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    4090:	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4092:	ldr	r7, [pc, #448]	; (4254 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4094:	ldr	r6, [pc, #448]	; (4258 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4096:	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4098:	uxth	r1, r0
    409a:	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    409e:	ldr	r3, [pc, #412]	; (423c <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    40a0:	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    40a2:	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    40a6:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    40a8:	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    40aa:	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    40ae:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    40b0:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    40b4:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    40b8:	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    40bc:	ldr	r4, [pc, #364]	; (422c <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    40be:	bhi.w	4288 <usb_isr+0x31c>
    40c2:	cmp.w	r1, #1664	; 0x680
    40c6:	bcs.w	4756 <usb_isr+0x7ea>
    40ca:	cmp.w	r1, #258	; 0x102
    40ce:	beq.w	46ca <usb_isr+0x75e>
    40d2:	bhi.w	45f0 <usb_isr+0x684>
    40d6:	cmp	r1, #128	; 0x80
    40d8:	beq.w	47ca <usb_isr+0x85e>
    40dc:	cmp	r1, #130	; 0x82
    40de:	bne.w	46d6 <usb_isr+0x76a>
    40e2:	ldrh	r1, [r5, #4]
    40e4:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    40e8:	cmp	r1, #4
    40ea:	bhi.w	46d6 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    40ee:	ldr	r0, [pc, #364]	; (425c <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    40f0:	ldr	r4, [pc, #364]	; (4260 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    40f2:	lsls	r1, r1, #2
    40f4:	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    40f6:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    40f8:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    40fa:	ldrb	r2, [r0, #0]
    40fc:	lsls	r3, r2, #30
    40fe:	bpl.w	49b2 <usb_isr+0xa46>
    4102:	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    4106:	mov.w	lr, #2
    410a:	b.n	4792 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    410c:	ldr	r7, [pc, #324]	; (4254 <usb_isr+0x2e8>)
    410e:	ldr	r2, [r7, #0]
		if (data) {
    4110:	cbz	r2, 4160 <usb_isr+0x1f4>
			size = ep0_tx_len;
    4112:	ldr	r3, [pc, #336]	; (4264 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4114:	ldr	r6, [pc, #320]	; (4258 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4116:	ldr	r1, [pc, #336]	; (4268 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    4118:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    411a:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    411c:	ldrb	r5, [r1, #0]
    411e:	cmp	r0, #64	; 0x40
    4120:	mov	lr, r0
    4122:	orr.w	r8, r5, #2
    4126:	it	cs
    4128:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    412c:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    412e:	eor.w	r4, r4, #1
    4132:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4134:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4138:	ite	eq
    413a:	moveq	r4, #136	; 0x88
    413c:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    413e:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4142:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4144:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4148:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    414c:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    414e:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4150:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4154:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4156:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4158:	cmp	r0, #0
    415a:	beq.w	43e8 <usb_isr+0x47c>
    415e:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4160:	ldr	r3, [pc, #236]	; (4250 <usb_isr+0x2e4>)
    4162:	ldrh	r2, [r3, #0]
    4164:	cmp.w	r2, #1280	; 0x500
    4168:	bne.n	418a <usb_isr+0x21e>
			setup.bRequest = 0;
    416a:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    416c:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    416e:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4170:	ldr	r3, [pc, #248]	; (426c <usb_isr+0x300>)
    4172:	strb	r2, [r3, #0]
    4174:	b.n	418a <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4176:	ldr	r2, [pc, #216]	; (4250 <usb_isr+0x2e4>)
    4178:	ldrh	r0, [r2, #0]
    417a:	movw	r2, #8225	; 0x2021
    417e:	cmp	r0, r2
    4180:	beq.w	43f2 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4184:	ldr	r2, [pc, #180]	; (423c <usb_isr+0x2d0>)
    4186:	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    418a:	ldr	r2, [pc, #228]	; (4270 <usb_isr+0x304>)
    418c:	movs	r3, #1
    418e:	strb	r3, [r2, #0]
    4190:	b.n	4000 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4192:	ldr	r2, [pc, #168]	; (423c <usb_isr+0x2d0>)
    4194:	ldr	r3, [pc, #168]	; (4240 <usb_isr+0x2d4>)
    4196:	tst.w	r9, #8
    419a:	it	ne
    419c:	movne	r3, r2
    419e:	str.w	r3, [r7, r8, lsl #3]
    41a2:	b.n	4000 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    41a4:	bl	3d6c <usb_free>
				packet = tx_first[endpoint];
    41a8:	ldr	r2, [pc, #200]	; (4274 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    41aa:	ldr	r1, [pc, #204]	; (4278 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    41ac:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    41b0:	cmp	r3, #0
    41b2:	beq.w	4558 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    41b6:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    41b8:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    41ba:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    41be:	add.w	r2, r3, #8
    41c2:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    41c6:	cmp	r4, #3
    41c8:	bhi.n	41d6 <usb_isr+0x26a>
    41ca:	tbb	[pc, r4]
    41ce:	.short	0x022c
    41d0:	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    41d2:	movs	r2, #2
    41d4:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    41d6:	ldrh	r2, [r3, #0]
    41d8:	tst.w	r9, #8
    41dc:	ite	eq
    41de:	moveq	r3, #136	; 0x88
    41e0:	movne	r3, #200	; 0xc8
    41e2:	orr.w	r3, r3, r2, lsl #16
    41e6:	str.w	r3, [r7, r8, lsl #3]
    41ea:	b.n	4000 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    41ec:	lsls	r0, r4, #31
    41ee:	bmi.w	44f4 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    41f2:	lsls	r1, r4, #24
    41f4:	bmi.w	45dc <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    41f8:	lsls	r2, r4, #30
    41fa:	bpl.n	420a <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    41fc:	ldr	r2, [pc, #124]	; (427c <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    41fe:	ldr	r1, [pc, #128]	; (4280 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4200:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4202:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    4204:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    4206:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    4208:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    420a:	lsls	r3, r4, #27
    420c:	bpl.n	4214 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    420e:	ldr	r3, [pc, #112]	; (4280 <usb_isr+0x314>)
    4210:	movs	r2, #16
    4212:	strb	r2, [r3, #0]
	}

}
    4214:	add	sp, #28
    4216:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    421a:	movs	r2, #4
    421c:	strb	r2, [r1, r6]
						break;
    421e:	b.n	41d6 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    4220:	movs	r2, #5
    4222:	strb	r2, [r1, r6]
						break;
    4224:	b.n	41d6 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    4226:	movs	r2, #3
    4228:	strb	r2, [r1, r6]
						break;
    422a:	b.n	41d6 <usb_isr+0x26a>
    422c:	.word	0x1fff0000
    4230:	.word	0x1fffce48
    4234:	.word	0x1fffcdf4
    4238:	.word	0x1fffd2c8
    423c:	.word	0x004000c8
    4240:	.word	0x00400088
    4244:	.word	0x1fffced0
    4248:	.word	0x1fffce59
    424c:	.word	0x1fffcdd8
    4250:	.word	0x1fffcebc
    4254:	.word	0x1fffcdf0
    4258:	.word	0x1fffce58
    425c:	.word	0x400720c0
    4260:	.word	0x1fffcec8
    4264:	.word	0x1fffce04
    4268:	.word	0x1fffcec4
    426c:	.word	0x40072098
    4270:	.word	0x40072094
    4274:	.word	0x1fffce9c
    4278:	.word	0x1fffced4
    427c:	.word	0x40072088
    4280:	.word	0x40072080
    4284:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4288:	movw	r0, #8225	; 0x2021
    428c:	cmp	r1, r0
    428e:	beq.w	44e6 <usb_isr+0x57a>
    4292:	bhi.w	4446 <usb_isr+0x4da>
    4296:	cmp.w	r1, #2176	; 0x880
    429a:	beq.w	478a <usb_isr+0x81e>
    429e:	cmp.w	r1, #2304	; 0x900
    42a2:	bne.w	46d6 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    42a6:	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    42a8:	ldr	r1, [pc, #716]	; (4578 <usb_isr+0x60c>)
    42aa:	ldrb	r0, [r5, #2]
    42ac:	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    42ae:	lsls	r2, r2, #24
    42b0:	bmi.w	4928 <usb_isr+0x9bc>
    42b4:	ldr.w	r2, [r9, #40]	; 0x28
    42b8:	ldr	r1, [pc, #704]	; (457c <usb_isr+0x610>)
    42ba:	lsls	r3, r2, #24
    42bc:	bmi.w	48d8 <usb_isr+0x96c>
    42c0:	ldr.w	r2, [r9, #48]	; 0x30
    42c4:	ldr	r1, [pc, #692]	; (457c <usb_isr+0x610>)
    42c6:	lsls	r5, r2, #24
    42c8:	bmi.w	48ce <usb_isr+0x962>
    42cc:	ldr.w	r2, [r9, #56]	; 0x38
    42d0:	ldr	r1, [pc, #680]	; (457c <usb_isr+0x610>)
    42d2:	lsls	r4, r2, #24
    42d4:	bmi.w	48c4 <usb_isr+0x958>
    42d8:	ldr.w	r2, [r9, #64]	; 0x40
    42dc:	ldr	r1, [pc, #668]	; (457c <usb_isr+0x610>)
    42de:	lsls	r0, r2, #24
    42e0:	bmi.w	4978 <usb_isr+0xa0c>
    42e4:	ldr.w	r2, [r9, #72]	; 0x48
    42e8:	ldr	r1, [pc, #656]	; (457c <usb_isr+0x610>)
    42ea:	lsls	r2, r2, #24
    42ec:	bmi.w	496e <usb_isr+0xa02>
    42f0:	ldr.w	r2, [r9, #80]	; 0x50
    42f4:	ldr	r1, [pc, #644]	; (457c <usb_isr+0x610>)
    42f6:	lsls	r3, r2, #24
    42f8:	bmi.w	4964 <usb_isr+0x9f8>
    42fc:	ldr.w	r2, [r9, #88]	; 0x58
    4300:	ldr	r1, [pc, #632]	; (457c <usb_isr+0x610>)
    4302:	lsls	r5, r2, #24
    4304:	bmi.w	495a <usb_isr+0x9ee>
    4308:	ldr.w	r2, [r9, #96]	; 0x60
    430c:	ldr	r1, [pc, #620]	; (457c <usb_isr+0x610>)
    430e:	lsls	r4, r2, #24
    4310:	bmi.w	4950 <usb_isr+0x9e4>
    4314:	ldr.w	r2, [r9, #104]	; 0x68
    4318:	ldr	r1, [pc, #608]	; (457c <usb_isr+0x610>)
    431a:	lsls	r0, r2, #24
    431c:	bmi.w	4946 <usb_isr+0x9da>
    4320:	ldr.w	r2, [r9, #112]	; 0x70
    4324:	ldr	r1, [pc, #596]	; (457c <usb_isr+0x610>)
    4326:	lsls	r2, r2, #24
    4328:	bmi.w	493c <usb_isr+0x9d0>
    432c:	ldr.w	r2, [r9, #120]	; 0x78
    4330:	ldr	r1, [pc, #584]	; (457c <usb_isr+0x610>)
    4332:	lsls	r3, r2, #24
    4334:	bmi.w	4932 <usb_isr+0x9c6>
    4338:	ldr.w	r2, [r9, #128]	; 0x80
    433c:	ldr	r1, [pc, #572]	; (457c <usb_isr+0x610>)
    433e:	lsls	r5, r2, #24
    4340:	bmi.w	49a6 <usb_isr+0xa3a>
    4344:	ldr.w	r2, [r9, #136]	; 0x88
    4348:	ldr	r1, [pc, #560]	; (457c <usb_isr+0x610>)
    434a:	lsls	r4, r2, #24
    434c:	bmi.w	499a <usb_isr+0xa2e>
    4350:	ldr.w	r2, [r9, #144]	; 0x90
    4354:	ldr	r1, [pc, #548]	; (457c <usb_isr+0x610>)
    4356:	lsls	r0, r2, #24
    4358:	bmi.w	498e <usb_isr+0xa22>
    435c:	ldr.w	r2, [r9, #152]	; 0x98
    4360:	ldr	r1, [pc, #536]	; (457c <usb_isr+0x610>)
    4362:	lsls	r2, r2, #24
    4364:	bmi.w	4982 <usb_isr+0xa16>
    4368:	ldr	r0, [pc, #532]	; (4580 <usb_isr+0x614>)
    436a:	ldr	r2, [pc, #536]	; (4584 <usb_isr+0x618>)
    436c:	ldr	r1, [pc, #536]	; (4588 <usb_isr+0x61c>)
    436e:	str	r0, [sp, #4]
    4370:	ldr	r0, [pc, #536]	; (458c <usb_isr+0x620>)
    4372:	ldr	r5, [pc, #540]	; (4590 <usb_isr+0x624>)
    4374:	ldr	r4, [pc, #540]	; (4594 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    4376:	str	r7, [sp, #16]
}



void usb_isr(void)
{
    4378:	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    437a:	str	r6, [sp, #20]
    437c:	str	r5, [sp, #8]
    437e:	mov	r8, r0
    4380:	mov	r7, r1
    4382:	mov	r6, r2
    4384:	mov	r5, r3
    4386:	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    4388:	ldr	r0, [r6, #0]
			while (p) {
    438a:	cbz	r0, 4398 <usb_isr+0x42c>
				n = p->next;
    438c:	ldr	r4, [r0, #4]
				usb_free(p);
    438e:	bl	3d6c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    4392:	mov	r0, r4
    4394:	cmp	r4, #0
    4396:	bne.n	438c <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    4398:	movs	r3, #0
    439a:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    439c:	ldr	r3, [sp, #8]
			p = tx_first[i];
    439e:	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    43a0:	mov	r2, r3
    43a2:	movs	r3, #0
    43a4:	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    43a8:	cbz	r0, 43b6 <usb_isr+0x44a>
				n = p->next;
    43aa:	ldr	r4, [r0, #4]
				usb_free(p);
    43ac:	bl	3d6c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    43b0:	mov	r0, r4
    43b2:	cmp	r4, #0
    43b4:	bne.n	43aa <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    43b6:	movs	r2, #0
    43b8:	str	r2, [r7, #0]
			tx_last[i] = NULL;
    43ba:	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    43bc:	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    43c0:	mov	r1, r2
    43c2:	movs	r2, #0
    43c4:	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    43c8:	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    43ca:	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    43cc:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    43ce:	mov.w	r1, #0
    43d2:	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    43d6:	cmp	r3, #3
    43d8:	bhi.w	4632 <usb_isr+0x6c6>
    43dc:	tbh	[pc, r3, lsl #1]
    43e0:	.word	0x01250170
    43e4:	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    43e8:	cmp.w	lr, #64	; 0x40
    43ec:	it	ne
    43ee:	movne	r2, #0
    43f0:	b.n	415e <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    43f2:	ldr	r2, [pc, #420]	; (4598 <usb_isr+0x62c>)
    43f4:	ldrb	r5, [r1, #0]
    43f6:	ldrb	r0, [r1, #1]
    43f8:	strb	r5, [r2, #0]
    43fa:	strb	r0, [r2, #1]
    43fc:	ldrb	r5, [r1, #2]
    43fe:	ldrb	r0, [r1, #3]
    4400:	strb	r5, [r2, #2]
    4402:	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4404:	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    4406:	ldrb	r5, [r1, #4]
    4408:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    440a:	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    440c:	ldrb	r5, [r1, #5]
    440e:	ldrb	r1, [r1, #6]
    4410:	strb	r5, [r2, #5]
    4412:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    4414:	beq.w	474e <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4418:	ldr	r1, [pc, #384]	; (459c <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    441a:	ldr	r6, [pc, #388]	; (45a0 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    441c:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    441e:	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4420:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4424:	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4426:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    442a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    442c:	ite	eq
    442e:	moveq	r1, #136	; 0x88
    4430:	movne	r1, #200	; 0xc8
    4432:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4436:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    443a:	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    443e:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    4440:	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4442:	str	r1, [r2, #4]
    4444:	b.n	4184 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4446:	movw	r0, #8737	; 0x2221
    444a:	cmp	r1, r0
    444c:	bne.w	47e6 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4450:	ldr	r3, [pc, #336]	; (45a4 <usb_isr+0x638>)
    4452:	ldr	r4, [pc, #340]	; (45a8 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    4454:	ldr	r1, [pc, #340]	; (45ac <usb_isr+0x640>)
    4456:	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4458:	ldr	r5, [r3, #0]
    445a:	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    445c:	str.w	lr, [sp, #4]
    4460:	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4462:	movs	r0, #0
    4464:	str	r0, [sp, #8]
    4466:	mov	r8, r0
    4468:	mov	ip, r0
    446a:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    446c:	ldr	r1, [pc, #300]	; (459c <usb_isr+0x630>)
    446e:	ldrb	r5, [r1, #0]
    4470:	orr.w	lr, r5, #2
    4474:	add.w	r3, r9, lr, lsl #3
    4478:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    447a:	ldr	r3, [sp, #4]
    447c:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    447e:	ldr	r3, [sp, #12]
    4480:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4482:	ite	eq
    4484:	moveq	r4, #136	; 0x88
    4486:	movne	r4, #200	; 0xc8
    4488:	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    448c:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4490:	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    4494:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    4496:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4498:	ldr.w	lr, [pc, #224]	; 457c <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    449c:	ldr	r3, [pc, #256]	; (45a0 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    449e:	ldr.w	r8, [pc, #252]	; 459c <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    44a2:	cmp	r0, #0
    44a4:	bne.w	46e4 <usb_isr+0x778>
    44a8:	cmp.w	ip, #64	; 0x40
    44ac:	bne.n	44e6 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    44ae:	orr.w	ip, r4, #2
    44b2:	add.w	r3, r9, ip, lsl #3
    44b6:	ldr	r4, [sp, #8]
    44b8:	ldr.w	lr, [pc, #192]	; 457c <usb_isr+0x610>
    44bc:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    44be:	cmp	r2, #0
    44c0:	bne.w	4710 <usb_isr+0x7a4>
    44c4:	lsls	r2, r0, #16
    44c6:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    44ca:	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    44ce:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    44d2:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    44d4:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    44d6:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    44d8:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    44da:	cmp	r0, #64	; 0x40
    44dc:	bne.n	44e6 <usb_isr+0x57a>
    44de:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    44e0:	ldr	r2, [pc, #204]	; (45b0 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    44e2:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    44e4:	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    44e6:	ldr	r2, [pc, #204]	; (45b4 <usb_isr+0x648>)
    44e8:	movs	r3, #1
    44ea:	strb	r3, [r2, #0]
    44ec:	b.n	418a <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    44ee:	bl	37fc <usb_serial_flush_callback>
    44f2:	b.n	4040 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    44f4:	ldr	r3, [pc, #132]	; (457c <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    44f6:	ldr	r0, [pc, #188]	; (45b4 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    44f8:	ldr	r1, [pc, #160]	; (459c <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    44fa:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    44fc:	mov.w	lr, #2
    4500:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4504:	ldr	r7, [pc, #176]	; (45b8 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    4506:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    4508:	ldr	r1, [pc, #176]	; (45bc <usb_isr+0x650>)
    450a:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    450c:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    450e:	ldr	r6, [pc, #176]	; (45c0 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    4510:	ldr	r5, [pc, #176]	; (45c4 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4512:	ldr	r4, [pc, #180]	; (45c8 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    4514:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    4516:	movs	r1, #13
    4518:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    451a:	movs	r1, #255	; 0xff
    451c:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    451e:	ldr.w	lr, [pc, #184]	; 45d8 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    4522:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    4524:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4526:	ldr	r5, [pc, #164]	; (45cc <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    4528:	ldr	r2, [pc, #164]	; (45d0 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    452a:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    452e:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4530:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    4532:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    4536:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    4538:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    453a:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    453c:	add	sp, #28
    453e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    4542:	ldr	r2, [pc, #144]	; (45d4 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    4544:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    4548:	ldrb	r3, [r2, #0]
    454a:	adds	r3, #1
    454c:	strb	r3, [r2, #0]
    454e:	b.n	4000 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    4550:	str.w	r0, [r3, r6, lsl #2]
    4554:	ldr	r5, [pc, #56]	; (4590 <usb_isr+0x624>)
    4556:	b.n	3fce <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    4558:	ldrb	r3, [r1, r6]
    455a:	cmp	r3, #3
    455c:	bhi.w	4740 <usb_isr+0x7d4>
    4560:	add	r2, pc, #4	; (adr r2, 4568 <usb_isr+0x5fc>)
    4562:	ldr.w	pc, [r2, r3, lsl #2]
    4566:	nop
    4568:	.word	0x00004001
    456c:	.word	0x00004001
    4570:	.word	0x00004625
    4574:	.word	0x0000461f
    4578:	.word	0x1fffced0
    457c:	.word	0x1fff0000
    4580:	.word	0x1fffceac
    4584:	.word	0x1fffce48
    4588:	.word	0x1fffce9c
    458c:	.word	0x1fffced4
    4590:	.word	0x1fffcdf4
    4594:	.word	0x1fffd2c8
    4598:	.word	0x1fffd2bc
    459c:	.word	0x1fffcec4
    45a0:	.word	0x1fffce58
    45a4:	.word	0x1fffcdec
    45a8:	.word	0x1fffd2c4
    45ac:	.word	0x1fffcde8
    45b0:	.word	0x1fffce04
    45b4:	.word	0x40072094
    45b8:	.word	0x400720c0
    45bc:	.word	0x00400088
    45c0:	.word	0x40072088
    45c4:	.word	0x40072080
    45c8:	.word	0x40072098
    45cc:	.word	0x1fffce08
    45d0:	.word	0x1fffce5c
    45d4:	.word	0x1fffcec5
    45d8:	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    45dc:	ldr	r1, [pc, #772]	; (48e4 <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    45de:	ldr	r3, [pc, #776]	; (48e8 <usb_isr+0x97c>)
    45e0:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    45e2:	movs	r0, #13
    45e4:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    45e6:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    45e8:	lsls	r2, r4, #30
    45ea:	bpl.w	420a <usb_isr+0x29e>
    45ee:	b.n	41fc <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    45f0:	movw	r2, #770	; 0x302
    45f4:	cmp	r1, r2
    45f6:	bne.w	47d6 <usb_isr+0x86a>
    45fa:	ldrh	r1, [r5, #4]
    45fc:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    4600:	cmp	r1, #4
    4602:	bhi.n	46d6 <usb_isr+0x76a>
    4604:	ldrh	r2, [r5, #2]
    4606:	cmp	r2, #0
    4608:	bne.n	46d6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    460a:	ldr	r0, [pc, #728]	; (48e4 <usb_isr+0x978>)
    460c:	str.w	lr, [sp, #4]
    4610:	lsls	r1, r1, #2
    4612:	add	r0, r1
    4614:	ldrb	r1, [r0, #0]
    4616:	orr.w	r1, r1, #2
    461a:	strb	r1, [r0, #0]
    461c:	b.n	4462 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    461e:	movs	r3, #1
    4620:	strb	r3, [r1, r6]
						break;
    4622:	b.n	4000 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    4624:	movs	r3, #0
    4626:	strb	r3, [r1, r6]
						break;
    4628:	b.n	4000 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    462a:	mov.w	r3, #1
    462e:	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    4632:	adds	r5, #1
    4634:	cmp	r5, #4
    4636:	add.w	r6, r6, #4
    463a:	add.w	r7, r7, #4
    463e:	add.w	r8, r8, #1
    4642:	bne.w	4388 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4646:	ldr	r4, [pc, #676]	; (48ec <usb_isr+0x980>)
			*reg = epconf;
    4648:	ldr	r3, [pc, #676]	; (48f0 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    464a:	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    464c:	ldr	r5, [pc, #676]	; (48f4 <usb_isr+0x988>)
    464e:	ldr	r7, [sp, #16]
    4650:	ldr	r6, [sp, #20]
    4652:	movs	r1, #0
    4654:	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4656:	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4658:	lsls	r3, r2, #28
    465a:	bmi.w	4868 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    465e:	ldrb	r2, [r4, #1]
			*reg = epconf;
    4660:	ldr	r1, [pc, #660]	; (48f8 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4662:	ldr.w	r8, [pc, #672]	; 4904 <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    4666:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4668:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    466a:	mov.w	r1, #0
    466e:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    4672:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4676:	bmi.w	483a <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    467a:	ldr	r1, [pc, #640]	; (48fc <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    467c:	ldrb	r2, [r4, #2]
			*reg = epconf;
    467e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4680:	movs	r1, #0
    4682:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    4686:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    468a:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    468c:	ldr.w	r8, [pc, #628]	; 4904 <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    4690:	bmi.w	4896 <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    4694:	ldrb	r2, [r4, #3]
			*reg = epconf;
    4696:	ldr	r1, [pc, #616]	; (4900 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    4698:	ldr	r4, [pc, #616]	; (4904 <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    469a:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    469c:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    469e:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    46a0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    46a4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    46a8:	bmi.w	480c <usb_isr+0x8a0>
    46ac:	ldrb	r3, [r6, #0]
    46ae:	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    46b0:	movs	r1, #0
    46b2:	eor.w	r2, r3, #1
    46b6:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    46ba:	str.w	r1, [r9, #152]	; 0x98
    46be:	b.n	4462 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    46c0:	mov.w	r3, #0
    46c4:	strb.w	r3, [r8]
    46c8:	b.n	4632 <usb_isr+0x6c6>
    46ca:	ldrh	r1, [r5, #4]
    46cc:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    46d0:	cmp	r1, #4
    46d2:	bls.w	47f0 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    46d6:	ldr	r2, [pc, #524]	; (48e4 <usb_isr+0x978>)
    46d8:	movs	r3, #15
    46da:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    46dc:	ldr	r2, [pc, #552]	; (4908 <usb_isr+0x99c>)
    46de:	movs	r3, #1
    46e0:	strb	r3, [r2, #0]
    46e2:	b.n	418a <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    46e4:	cmp	r0, #64	; 0x40
    46e6:	bls.w	44ae <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    46ea:	orr.w	r4, r4, #2
    46ee:	add.w	r1, lr, r4, lsl #3
    46f2:	ldr	r6, [sp, #8]
    46f4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    46f6:	cbz	r2, 4728 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    46f8:	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    46fc:	ldr	r2, [pc, #524]	; (490c <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    46fe:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4700:	mov	r3, r6
    4702:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4704:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4708:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    470a:	str.w	r2, [lr, r4, lsl #3]
    470e:	b.n	44e0 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    4710:	ldrb.w	r3, [sp, #4]
    4714:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4716:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4718:	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    471a:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    471c:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4720:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4722:	str.w	r2, [lr, ip, lsl #3]
    4726:	b.n	44da <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    4728:	ldrb.w	r1, [sp, #4]
    472c:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    472e:	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4730:	ldr	r2, [pc, #476]	; (4910 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4732:	strb.w	r5, [r8]
    4736:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    4738:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    473a:	str.w	r2, [lr, r4, lsl #3]
    473e:	b.n	44e0 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    4740:	tst.w	r9, #8
    4744:	ite	eq
    4746:	moveq	r3, #2
    4748:	movne	r3, #3
    474a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    474c:	b.n	4000 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    474e:	ldr	r2, [pc, #452]	; (4914 <usb_isr+0x9a8>)
    4750:	movs	r1, #15
    4752:	strb	r1, [r2, #0]
    4754:	b.n	4418 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    4756:	ldr	r2, [pc, #448]	; (4918 <usb_isr+0x9ac>)
    4758:	ldr	r4, [r2, #4]
    475a:	cmp	r4, #0
    475c:	beq.n	46d6 <usb_isr+0x76a>
    475e:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4760:	ldrh.w	lr, [r5, #4]
    4764:	b.n	476e <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    4766:	adds	r2, #12
			if (list->addr == NULL) break;
    4768:	ldr	r4, [r2, #4]
    476a:	cmp	r4, #0
    476c:	beq.n	46d6 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    476e:	ldrh	r3, [r2, #0]
    4770:	cmp	r3, r0
    4772:	bne.n	4766 <usb_isr+0x7fa>
    4774:	ldrh	r3, [r2, #2]
    4776:	cmp	r3, lr
    4778:	bne.n	4766 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    477a:	lsrs	r0, r0, #8
    477c:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    477e:	ite	eq
    4780:	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    4784:	ldrhne.w	lr, [r2, #8]
    4788:	b.n	4792 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    478a:	ldr	r2, [pc, #400]	; (491c <usb_isr+0x9b0>)
    478c:	ldr	r4, [pc, #400]	; (4920 <usb_isr+0x9b4>)
    478e:	ldrb	r2, [r2, #0]
    4790:	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4792:	ldrh	r0, [r5, #6]
    4794:	cmp	r0, lr
    4796:	bcs.w	4a18 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    479a:	ldr	r1, [pc, #392]	; (4924 <usb_isr+0x9b8>)
    479c:	ldrb	r5, [r1, #0]
    479e:	cmp	r0, #64	; 0x40
    47a0:	mov	ip, r0
    47a2:	orr.w	lr, r5, #2
    47a6:	it	cs
    47a8:	movcs.w	ip, #64	; 0x40
    47ac:	add.w	r3, r4, ip
    47b0:	add.w	r2, r9, lr, lsl #3
    47b4:	str	r3, [sp, #8]
    47b6:	movs	r3, #1
    47b8:	str	r4, [r2, #4]
    47ba:	rsb	r0, ip, r0
    47be:	mov.w	r8, ip, lsl #16
    47c2:	movs	r2, #0
    47c4:	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    47c6:	movs	r4, #200	; 0xc8
    47c8:	b.n	4488 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    47ca:	ldr	r4, [pc, #340]	; (4920 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    47cc:	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    47d0:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    47d2:	strb	r2, [r4, #1]
    47d4:	b.n	4792 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    47d6:	cmp.w	r1, #1280	; 0x500
    47da:	bne.w	46d6 <usb_isr+0x76a>
    47de:	movs	r3, #1
    47e0:	movs	r2, #0
    47e2:	str	r3, [sp, #4]
    47e4:	b.n	4462 <usb_isr+0x4f6>
    47e6:	movw	r2, #8993	; 0x2321
    47ea:	cmp	r1, r2
    47ec:	beq.n	47de <usb_isr+0x872>
    47ee:	b.n	46d6 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    47f0:	ldrh	r2, [r5, #2]
    47f2:	cmp	r2, #0
    47f4:	bne.w	46d6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    47f8:	ldr	r0, [pc, #232]	; (48e4 <usb_isr+0x978>)
    47fa:	str.w	lr, [sp, #4]
    47fe:	lsls	r1, r1, #2
    4800:	add	r0, r1
    4802:	ldrb	r1, [r0, #0]
    4804:	bic.w	r1, r1, #2
    4808:	strb	r1, [r0, #0]
    480a:	b.n	4462 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    480c:	bl	3d2c <usb_malloc>
				if (p) {
    4810:	cmp	r0, #0
    4812:	beq.w	49f4 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    4816:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4818:	ldr	r2, [pc, #244]	; (4910 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    481a:	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    481e:	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4822:	bl	3d2c <usb_malloc>
				if (p) {
    4826:	cmp	r0, #0
    4828:	beq.w	49e8 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    482c:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    482e:	ldr	r2, [pc, #220]	; (490c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    4830:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4834:	str.w	r2, [r9, #136]	; 0x88
    4838:	b.n	46ac <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    483a:	bl	3d2c <usb_malloc>
				if (p) {
    483e:	cmp	r0, #0
    4840:	beq.w	49c4 <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    4844:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4846:	ldr	r2, [pc, #200]	; (4910 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4848:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    484c:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    4850:	bl	3d2c <usb_malloc>
				if (p) {
    4854:	cmp	r0, #0
    4856:	beq.w	49b8 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    485a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    485c:	ldr	r2, [pc, #172]	; (490c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    485e:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4862:	str.w	r2, [r9, #72]	; 0x48
    4866:	b.n	467a <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4868:	bl	3d2c <usb_malloc>
				if (p) {
    486c:	cmp	r0, #0
    486e:	beq.w	4a0c <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    4872:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4874:	ldr	r2, [pc, #152]	; (4910 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    4876:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    487a:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    487e:	bl	3d2c <usb_malloc>
				if (p) {
    4882:	cmp	r0, #0
    4884:	beq.w	4a00 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    4888:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    488a:	ldr	r2, [pc, #128]	; (490c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    488c:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4890:	str.w	r2, [r9, #40]	; 0x28
    4894:	b.n	465e <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    4896:	bl	3d2c <usb_malloc>
				if (p) {
    489a:	cmp	r0, #0
    489c:	beq.w	49dc <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    48a0:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    48a2:	ldr	r2, [pc, #108]	; (4910 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    48a4:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    48a8:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    48ac:	bl	3d2c <usb_malloc>
				if (p) {
    48b0:	cmp	r0, #0
    48b2:	beq.w	49d0 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    48b6:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    48b8:	ldr	r2, [pc, #80]	; (490c <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    48ba:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    48be:	str.w	r2, [r9, #104]	; 0x68
    48c2:	b.n	4694 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    48c4:	ldr	r0, [r1, #60]	; 0x3c
    48c6:	subs	r0, #8
    48c8:	bl	3d6c <usb_free>
    48cc:	b.n	42d8 <usb_isr+0x36c>
    48ce:	ldr	r0, [r1, #52]	; 0x34
    48d0:	subs	r0, #8
    48d2:	bl	3d6c <usb_free>
    48d6:	b.n	42cc <usb_isr+0x360>
    48d8:	ldr	r0, [r1, #44]	; 0x2c
    48da:	subs	r0, #8
    48dc:	bl	3d6c <usb_free>
    48e0:	b.n	42c0 <usb_isr+0x354>
    48e2:	nop
    48e4:	.word	0x400720c0
    48e8:	.word	0x40072080
    48ec:	.word	0x00006a88
    48f0:	.word	0x400720c4
    48f4:	.word	0x1fffcec5
    48f8:	.word	0x400720c8
    48fc:	.word	0x400720cc
    4900:	.word	0x400720d0
    4904:	.word	0x1fff0000
    4908:	.word	0x40072094
    490c:	.word	0x004000c8
    4910:	.word	0x00400088
    4914:	.word	0x1fffce59
    4918:	.word	0x00006a8c
    491c:	.word	0x1fffced0
    4920:	.word	0x1fffcec8
    4924:	.word	0x1fffcec4
    4928:	ldr	r0, [r4, #36]	; 0x24
    492a:	subs	r0, #8
    492c:	bl	3d6c <usb_free>
    4930:	b.n	42b4 <usb_isr+0x348>
    4932:	ldr	r0, [r1, #124]	; 0x7c
    4934:	subs	r0, #8
    4936:	bl	3d6c <usb_free>
    493a:	b.n	4338 <usb_isr+0x3cc>
    493c:	ldr	r0, [r1, #116]	; 0x74
    493e:	subs	r0, #8
    4940:	bl	3d6c <usb_free>
    4944:	b.n	432c <usb_isr+0x3c0>
    4946:	ldr	r0, [r1, #108]	; 0x6c
    4948:	subs	r0, #8
    494a:	bl	3d6c <usb_free>
    494e:	b.n	4320 <usb_isr+0x3b4>
    4950:	ldr	r0, [r1, #100]	; 0x64
    4952:	subs	r0, #8
    4954:	bl	3d6c <usb_free>
    4958:	b.n	4314 <usb_isr+0x3a8>
    495a:	ldr	r0, [r1, #92]	; 0x5c
    495c:	subs	r0, #8
    495e:	bl	3d6c <usb_free>
    4962:	b.n	4308 <usb_isr+0x39c>
    4964:	ldr	r0, [r1, #84]	; 0x54
    4966:	subs	r0, #8
    4968:	bl	3d6c <usb_free>
    496c:	b.n	42fc <usb_isr+0x390>
    496e:	ldr	r0, [r1, #76]	; 0x4c
    4970:	subs	r0, #8
    4972:	bl	3d6c <usb_free>
    4976:	b.n	42f0 <usb_isr+0x384>
    4978:	ldr	r0, [r1, #68]	; 0x44
    497a:	subs	r0, #8
    497c:	bl	3d6c <usb_free>
    4980:	b.n	42e4 <usb_isr+0x378>
    4982:	ldr.w	r0, [r1, #156]	; 0x9c
    4986:	subs	r0, #8
    4988:	bl	3d6c <usb_free>
    498c:	b.n	4368 <usb_isr+0x3fc>
    498e:	ldr.w	r0, [r1, #148]	; 0x94
    4992:	subs	r0, #8
    4994:	bl	3d6c <usb_free>
    4998:	b.n	435c <usb_isr+0x3f0>
    499a:	ldr.w	r0, [r1, #140]	; 0x8c
    499e:	subs	r0, #8
    49a0:	bl	3d6c <usb_free>
    49a4:	b.n	4350 <usb_isr+0x3e4>
    49a6:	ldr.w	r0, [r1, #132]	; 0x84
    49aa:	subs	r0, #8
    49ac:	bl	3d6c <usb_free>
    49b0:	b.n	4344 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    49b2:	mov.w	lr, #2
    49b6:	b.n	4792 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    49b8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    49ba:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    49be:	adds	r2, #1
    49c0:	strb	r2, [r5, #0]
    49c2:	b.n	467a <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    49c4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    49c6:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    49ca:	adds	r2, #1
    49cc:	strb	r2, [r5, #0]
    49ce:	b.n	4850 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    49d0:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    49d2:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    49d6:	adds	r2, #1
    49d8:	strb	r2, [r5, #0]
    49da:	b.n	4694 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    49dc:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    49de:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    49e2:	adds	r2, #1
    49e4:	strb	r2, [r5, #0]
    49e6:	b.n	48ac <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    49e8:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    49ea:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    49ee:	adds	r2, #1
    49f0:	strb	r2, [r5, #0]
    49f2:	b.n	46ac <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    49f4:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    49f6:	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    49fa:	adds	r2, #1
    49fc:	strb	r2, [r5, #0]
    49fe:	b.n	4822 <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    4a00:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    4a02:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    4a06:	adds	r2, #1
    4a08:	strb	r2, [r5, #0]
    4a0a:	b.n	465e <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    4a0c:	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    4a0e:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    4a12:	adds	r2, #1
    4a14:	strb	r2, [r5, #0]
    4a16:	b.n	487e <usb_isr+0x912>
    4a18:	cmp.w	lr, #64	; 0x40
    4a1c:	mov	ip, lr
    4a1e:	it	cs
    4a20:	movcs.w	ip, #64	; 0x40
    4a24:	add.w	r3, r4, ip
    4a28:	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    4a2a:	movs	r3, #1
    4a2c:	rsb	r0, ip, lr
    4a30:	mov.w	r8, ip, lsl #16
    4a34:	movs	r2, #0
    4a36:	str	r3, [sp, #4]
    4a38:	b.n	446c <usb_isr+0x500>
    4a3a:	nop

00004a3c <usb_init>:
}



void usb_init(void)
{
    4a3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    4a40:	bl	58a8 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4a44:	ldr	r4, [pc, #196]	; (4b0c <usb_init+0xd0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a46:	ldr	r3, [pc, #200]	; (4b10 <usb_init+0xd4>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    4a48:	ldr	r0, [pc, #200]	; (4b14 <usb_init+0xd8>)
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4a4a:	ldr.w	r8, [pc, #228]	; 4b30 <usb_init+0xf4>
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4a4e:	ldr	r6, [pc, #200]	; (4b18 <usb_init+0xdc>)
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4a50:	ldr.w	ip, [pc, #224]	; 4b34 <usb_init+0xf8>
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4a54:	ldr	r7, [pc, #196]	; (4b1c <usb_init+0xe0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4a56:	ldr	r5, [pc, #200]	; (4b20 <usb_init+0xe4>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4a58:	ldr.w	lr, [pc, #220]	; 4b38 <usb_init+0xfc>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a5c:	movs	r2, #0
    4a5e:	str	r2, [r3, #0]
		table[i].addr = 0;
    4a60:	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a62:	str	r2, [r3, #8]
		table[i].addr = 0;
    4a64:	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a66:	str	r2, [r3, #16]
		table[i].addr = 0;
    4a68:	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a6a:	str	r2, [r3, #24]
		table[i].addr = 0;
    4a6c:	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a6e:	str	r2, [r3, #32]
		table[i].addr = 0;
    4a70:	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a72:	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    4a74:	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a76:	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    4a78:	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a7a:	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    4a7c:	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a7e:	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    4a80:	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a82:	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    4a84:	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a86:	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    4a88:	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a8a:	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    4a8c:	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a8e:	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    4a90:	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a92:	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    4a94:	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a96:	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    4a98:	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a9a:	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    4a9c:	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    4a9e:	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4aa2:	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    4aa4:	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    4aa8:	orr.w	r1, r1, #262144	; 0x40000
    4aac:	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    4aae:	ldr	r1, [r0, #0]
    4ab0:	orr.w	r1, r1, #50331648	; 0x3000000
    4ab4:	str	r1, [r0, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    4ab6:	movs	r1, #3
    4ab8:	strb.w	r1, [r8]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4abc:	movs	r0, #160	; 0xa0
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4abe:	ubfx	r1, r3, #8, #8
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    4ac2:	strb.w	r0, [ip]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    4ac6:	add.w	r4, r4, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    4aca:	strb	r1, [r6, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4acc:	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4ad0:	ldr	r1, [pc, #80]	; (4b24 <usb_init+0xe8>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    4ad2:	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    4ad4:	lsrs	r3, r3, #24
    4ad6:	strb	r3, [r5, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    4ad8:	adds	r4, #204	; 0xcc
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    4ada:	movs	r3, #255	; 0xff
    4adc:	strb.w	r3, [lr]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4ae0:	ldr	r5, [pc, #68]	; (4b28 <usb_init+0xec>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    4ae2:	strb.w	r3, [ip, #-184]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4ae6:	ldr	r0, [pc, #68]	; (4b2c <usb_init+0xf0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    4ae8:	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    4aea:	movs	r3, #1
    4aec:	strb.w	r3, [r6, #-8]
	USB0_USBCTRL = 0;
    4af0:	strb	r2, [r4, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4af2:	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4af4:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4af8:	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    4afa:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    4afe:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    4b00:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    4b02:	strb.w	r2, [r1, #248]	; 0xf8
    4b06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b0a:	nop
    4b0c:	.word	0x40048034
    4b10:	.word	0x1fff0000
    4b14:	.word	0x4000d800
    4b18:	.word	0x4007209c
    4b1c:	.word	0x400720b0
    4b20:	.word	0x400720b4
    4b24:	.word	0x40072010
    4b28:	.word	0xe000e435
    4b2c:	.word	0xe000e104
    4b30:	.word	0x40072144
    4b34:	.word	0x40072140
    4b38:	.word	0x40072080

00004b3c <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    4b3c:	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    4b3e:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    4b40:	cbnz	r1, 4b6a <DMAChannel::begin(bool)+0x2e>
    4b42:	ldr	r2, [r0, #0]
    4b44:	cbz	r2, 4b6a <DMAChannel::begin(bool)+0x2e>
    4b46:	ldrb	r3, [r0, #4]
    4b48:	cmp	r3, #15
    4b4a:	bhi.n	4b6a <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    4b4c:	ldr	r4, [pc, #160]	; (4bf0 <DMAChannel::begin(bool)+0xb4>)
    4b4e:	ldrh	r1, [r4, #0]
    4b50:	asr.w	r5, r1, r3
    4b54:	lsls	r5, r5, #31
    4b56:	bpl.n	4b6e <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    4b58:	add.w	r3, r3, #33554432	; 0x2000000
    4b5c:	add.w	r3, r3, #1152	; 0x480
    4b60:	cmp.w	r2, r3, lsl #5
    4b64:	bne.n	4b6e <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    4b66:	cpsie	i
		return;
    4b68:	pop	{r4, r5, r6, r7, pc}
    4b6a:	ldr	r4, [pc, #132]	; (4bf0 <DMAChannel::begin(bool)+0xb4>)
    4b6c:	ldrh	r1, [r4, #0]
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    4b6e:	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    4b70:	asr.w	r2, r1, r3
    4b74:	ands.w	r2, r2, #1
    4b78:	beq.n	4b8a <DMAChannel::begin(bool)+0x4e>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    4b7a:	adds	r3, #1
    4b7c:	cmp	r3, #16
    4b7e:	bne.n	4b70 <DMAChannel::begin(bool)+0x34>
			__enable_irq();
    4b80:	cpsie	i
			TCD = (TCD_t *)0;
    4b82:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    4b84:	strb	r3, [r0, #4]
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    4b86:	str	r2, [r0, #0]
    4b88:	pop	{r4, r5, r6, r7, pc}
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    4b8a:	movs	r5, #1
    4b8c:	lsls	r5, r3
    4b8e:	orrs	r1, r5
    4b90:	strh	r1, [r4, #0]
			__enable_irq();
    4b92:	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    4b94:	ldr	r6, [pc, #92]	; (4bf4 <DMAChannel::begin(bool)+0xb8>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    4b96:	ldr	r5, [pc, #96]	; (4bf8 <DMAChannel::begin(bool)+0xbc>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    4b98:	ldr	r7, [pc, #96]	; (4bfc <DMAChannel::begin(bool)+0xc0>)
#endif
	DMA_CERQ = ch;
    4b9a:	ldr.w	lr, [pc, #104]	; 4c04 <DMAChannel::begin(bool)+0xc8>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    4b9e:	uxtb	r1, r3
    4ba0:	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    4ba2:	ldr	r4, [r6, #0]
    4ba4:	orr.w	r4, r4, #2
    4ba8:	str	r4, [r6, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    4baa:	ldr	r4, [r5, #0]
    4bac:	orr.w	r4, r4, #2
    4bb0:	str	r4, [r5, #0]
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    4bb2:	sub.w	r6, r6, #262144	; 0x40000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    4bb6:	movw	r4, #1154	; 0x482
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    4bba:	sub.w	r5, r5, #262144	; 0x40000
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4bbe:	add.w	r3, r3, #33554432	; 0x2000000
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    4bc2:	str	r4, [r7, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4bc4:	add.w	r3, r3, #1152	; 0x480
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    4bc8:	subs	r6, #34	; 0x22
	DMA_CEEI = ch;
    4bca:	subs	r5, #36	; 0x24
	DMA_CINT = ch;
    4bcc:	ldr	r4, [pc, #48]	; (4c00 <DMAChannel::begin(bool)+0xc4>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    4bce:	strb.w	r1, [lr]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4bd2:	lsls	r3, r3, #5
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    4bd4:	strb	r1, [r6, #0]
	DMA_CEEI = ch;
    4bd6:	strb	r1, [r5, #0]
	DMA_CINT = ch;
    4bd8:	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    4bda:	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    4bdc:	str	r2, [r3, #0]
	*p++ = 0;
    4bde:	str	r2, [r3, #4]
	*p++ = 0;
    4be0:	str	r2, [r3, #8]
	*p++ = 0;
    4be2:	str	r2, [r3, #12]
	*p++ = 0;
    4be4:	str	r2, [r3, #16]
	*p++ = 0;
    4be6:	str	r2, [r3, #20]
	*p++ = 0;
    4be8:	str	r2, [r3, #24]
	*p++ = 0;
    4bea:	str	r2, [r3, #28]
    4bec:	pop	{r4, r5, r6, r7, pc}
    4bee:	nop
    4bf0:	.word	0x1fffced8
    4bf4:	.word	0x40048040
    4bf8:	.word	0x4004803c
    4bfc:	.word	0x40008000
    4c00:	.word	0x4000801f
    4c04:	.word	0x4000801a

00004c08 <DMAChannel::release()>:
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    4c08:	ldrb	r3, [r0, #4]
    4c0a:	cmp	r3, #15
    4c0c:	bhi.n	4c34 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    4c0e:	ldr	r2, [pc, #40]	; (4c38 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    4c10:	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    4c12:	strb	r3, [r2, #0]
	__disable_irq();
    4c14:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    4c16:	ldr	r1, [pc, #36]	; (4c3c <DMAChannel::release()+0x34>)
    4c18:	ldrb	r4, [r0, #4]
    4c1a:	ldrh	r2, [r1, #0]
    4c1c:	movs	r3, #1
    4c1e:	lsls	r3, r4
    4c20:	bic.w	r3, r2, r3
    4c24:	strh	r3, [r1, #0]
	__enable_irq();
    4c26:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    4c28:	movs	r2, #16
	TCD = (TCD_t *)0;
    4c2a:	movs	r3, #0
}
    4c2c:	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    4c30:	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    4c32:	str	r3, [r0, #0]
}
    4c34:	bx	lr
    4c36:	nop
    4c38:	.word	0x4000801a
    4c3c:	.word	0x1fffced8

00004c40 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    4c40:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4c42:	mrs	r2, PRIMASK
		__disable_irq();
    4c46:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    4c48:	ldrb	r3, [r0, #29]
    4c4a:	cbnz	r3, 4c5a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4c4c:	ldrb	r1, [r0, #28]
    4c4e:	cmp	r1, #1
    4c50:	beq.n	4c64 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4c52:	cmp	r1, #3
    4c54:	beq.n	4c78 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    4c56:	movs	r3, #1
    4c58:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4c5a:	cbnz	r2, 4c5e <EventResponder::triggerEventNotImmediate()+0x1e>
    4c5c:	cpsie	i
	}
	enableInterrupts(irq);
}
    4c5e:	ldr.w	r4, [sp], #4
    4c62:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4c64:	ldr	r4, [pc, #68]	; (4cac <EventResponder::triggerEventNotImmediate()+0x6c>)
    4c66:	ldr	r1, [r4, #0]
    4c68:	cbz	r1, 4c94 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4c6a:	ldr	r1, [pc, #68]	; (4cb0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4c6c:	str	r3, [r0, #20]
				_prev = lastYield;
    4c6e:	ldr	r3, [r1, #0]
    4c70:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    4c72:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    4c74:	str	r0, [r3, #20]
    4c76:	b.n	4c56 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    4c78:	ldr	r4, [pc, #56]	; (4cb4 <EventResponder::triggerEventNotImmediate()+0x74>)
    4c7a:	ldr	r1, [r4, #0]
    4c7c:	cbz	r1, 4ca0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4c7e:	ldr	r1, [pc, #56]	; (4cb8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4c80:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4c82:	ldr	r3, [r1, #0]
    4c84:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    4c86:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    4c88:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    4c8a:	ldr	r3, [pc, #48]	; (4cbc <EventResponder::triggerEventNotImmediate()+0x7c>)
    4c8c:	mov.w	r1, #268435456	; 0x10000000
    4c90:	str	r1, [r3, #0]
    4c92:	b.n	4c56 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4c94:	ldr	r3, [pc, #24]	; (4cb0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    4c96:	str	r1, [r0, #20]
				_prev = nullptr;
    4c98:	str	r1, [r0, #24]
				firstYield = this;
    4c9a:	str	r0, [r4, #0]
				lastYield = this;
    4c9c:	str	r0, [r3, #0]
    4c9e:	b.n	4c56 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4ca0:	ldr	r3, [pc, #20]	; (4cb8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4ca2:	str	r1, [r0, #20]
				_prev = nullptr;
    4ca4:	str	r1, [r0, #24]
				firstInterrupt = this;
    4ca6:	str	r0, [r4, #0]
				lastInterrupt = this;
    4ca8:	str	r0, [r3, #0]
    4caa:	b.n	4c8a <EventResponder::triggerEventNotImmediate()+0x4a>
    4cac:	.word	0x1fffceec
    4cb0:	.word	0x1fffcee8
    4cb4:	.word	0x1fffcedc
    4cb8:	.word	0x1fffcee0
    4cbc:	.word	0xe000ed04

00004cc0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    4cc0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4cc2:	mrs	r2, PRIMASK
		__disable_irq();
    4cc6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4cc8:	ldr	r4, [pc, #48]	; (4cfc <EventResponder::runFromInterrupt()+0x3c>)
    4cca:	ldr	r0, [r4, #0]
		if (first) {
    4ccc:	cbz	r0, 4cf0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4cce:	ldr	r6, [pc, #48]	; (4d00 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    4cd0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    4cd2:	ldr	r3, [r0, #20]
    4cd4:	str	r3, [r4, #0]
			if (firstInterrupt) {
    4cd6:	cbz	r3, 4cf6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    4cd8:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4cda:	cbnz	r2, 4cde <EventResponder::runFromInterrupt()+0x1e>
    4cdc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    4cde:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4ce0:	ldr	r3, [r0, #8]
    4ce2:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ce4:	mrs	r2, PRIMASK
		__disable_irq();
    4ce8:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    4cea:	ldr	r0, [r4, #0]
		if (first) {
    4cec:	cmp	r0, #0
    4cee:	bne.n	4cd2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4cf0:	cbnz	r2, 4cf4 <EventResponder::runFromInterrupt()+0x34>
    4cf2:	cpsie	i
    4cf4:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    4cf6:	str	r3, [r6, #0]
    4cf8:	b.n	4cda <EventResponder::runFromInterrupt()+0x1a>
    4cfa:	nop
    4cfc:	.word	0x1fffcedc
    4d00:	.word	0x1fffcee0

00004d04 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    4d04:	b.w	4cc0 <EventResponder::runFromInterrupt()>

00004d08 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    4d08:	ldr	r2, [pc, #96]	; (4d6c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    4d0a:	push	{r4, r5}
	if (listActive == nullptr) {
    4d0c:	ldr	r4, [r2, #0]
    4d0e:	cmp	r4, #0
    4d10:	beq.n	4d62 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    4d12:	ldr	r3, [r0, #0]
    4d14:	ldr	r1, [r4, #0]
    4d16:	cmp	r3, r1
    4d18:	bcs.n	4d38 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4d1a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    4d1c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    4d1e:	str	r4, [r0, #8]
		_prev = nullptr;
    4d20:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    4d22:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    4d24:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    4d26:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    4d28:	movs	r3, #2
    4d2a:	strb	r3, [r0, #20]
}
    4d2c:	pop	{r4, r5}
    4d2e:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    4d30:	ldr	r1, [r2, #0]
    4d32:	cmp	r3, r1
    4d34:	mov	r4, r2
    4d36:	bcc.n	4d4a <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4d38:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    4d3a:	subs	r3, r3, r1
    4d3c:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    4d3e:	cmp	r2, #0
    4d40:	bne.n	4d30 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    4d42:	str	r2, [r0, #8]
		_prev = timer;
    4d44:	str	r4, [r0, #12]
		timer->_next = this;
    4d46:	str	r0, [r4, #8]
    4d48:	b.n	4d28 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    4d4a:	ldr	r2, [r2, #12]
    4d4c:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    4d4e:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    4d50:	str	r0, [r4, #12]
				_prev->_next = this;
    4d52:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    4d54:	subs	r3, r1, r3
				_state = TimerActive;
    4d56:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    4d58:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    4d5a:	str	r3, [r4, #0]
				_state = TimerActive;
    4d5c:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    4d5e:	pop	{r4, r5}
    4d60:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    4d62:	str	r4, [r0, #8]
		_prev = nullptr;
    4d64:	str	r4, [r0, #12]
		listActive = this;
    4d66:	str	r0, [r2, #0]
    4d68:	b.n	4d28 <MillisTimer::addToActiveList()+0x20>
    4d6a:	nop
    4d6c:	.word	0x1fffcee4

00004d70 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    4d70:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    4d72:	ldr	r6, [pc, #136]	; (4dfc <MillisTimer::runFromTimer()+0x8c>)
    4d74:	ldr	r4, [r6, #0]
	while (timer) {
    4d76:	cbz	r4, 4dc4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4d78:	ldr	r3, [r4, #0]
    4d7a:	cmp	r3, #0
    4d7c:	bne.n	4df4 <MillisTimer::runFromTimer()+0x84>
    4d7e:	ldr	r7, [pc, #128]	; (4e00 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    4d80:	mov	r5, r3
    4d82:	b.n	4d8e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    4d84:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4d86:	cbz	r4, 4dc4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    4d88:	ldr	r3, [r4, #0]
    4d8a:	cmp	r3, #0
    4d8c:	bne.n	4df4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    4d8e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    4d90:	cbz	r3, 4d94 <MillisTimer::runFromTimer()+0x24>
    4d92:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    4d94:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    4d96:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4d98:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    4d9a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4d9c:	ldr	r3, [r3, #0]
    4d9e:	cmp	r3, r7
    4da0:	bne.n	4de6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    4da2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    4da4:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    4da6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    4da8:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    4daa:	beq.n	4dee <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    4dac:	bl	4c40 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    4db0:	ldr	r3, [r4, #4]
    4db2:	cmp	r3, #0
    4db4:	beq.n	4d84 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    4db6:	str	r3, [r4, #0]
				timer->addToActiveList();
    4db8:	mov	r0, r4
    4dba:	bl	4d08 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    4dbe:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    4dc0:	cmp	r4, #0
    4dc2:	bne.n	4d88 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4dc4:	mrs	r3, PRIMASK
		__disable_irq();
    4dc8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4dca:	ldr	r2, [pc, #56]	; (4e04 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4dcc:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    4dce:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    4dd0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    4dd2:	cbnz	r3, 4dd6 <MillisTimer::runFromTimer()+0x66>
    4dd4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    4dd6:	cbz	r0, 4de4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    4dd8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    4dda:	bl	4d08 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    4dde:	mov	r0, r4
    4de0:	cmp	r0, #0
    4de2:	bne.n	4dd8 <MillisTimer::runFromTimer()+0x68>
    4de4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    4de6:	mov	r2, r4
    4de8:	movs	r1, #0
    4dea:	blx	r3
    4dec:	b.n	4db0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    4dee:	ldr	r3, [r0, #8]
    4df0:	blx	r3
    4df2:	b.n	4db0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    4df4:	subs	r3, #1
    4df6:	str	r3, [r4, #0]
			break;
    4df8:	b.n	4dc4 <MillisTimer::runFromTimer()+0x54>
    4dfa:	nop
    4dfc:	.word	0x1fffcee4
    4e00:	.word	0x000024a9
    4e04:	.word	0x1fffcef4

00004e08 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    4e08:	ldr	r2, [pc, #8]	; (4e14 <systick_isr+0xc>)
    4e0a:	ldr	r3, [r2, #0]
    4e0c:	adds	r3, #1
    4e0e:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    4e10:	b.w	4d70 <MillisTimer::runFromTimer()>
    4e14:	.word	0x1fffcdec

00004e18 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4e18:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    4e1a:	ldr	r4, [pc, #176]	; (4ecc <yield+0xb4>)
    4e1c:	ldrb	r3, [r4, #0]
    4e1e:	cbz	r3, 4e22 <yield+0xa>
    4e20:	pop	{r3, r4, r5, pc}
	running = 1;
    4e22:	movs	r3, #1
    4e24:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4e26:	bl	35e8 <usb_serial_available>
	if (Serial.available()) serialEvent();
    4e2a:	cmp	r0, #0
    4e2c:	bne.n	4eb4 <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    4e2e:	bl	5678 <serial_available>
	if (Serial1.available()) serialEvent1();
    4e32:	cmp	r0, #0
    4e34:	bne.n	4eae <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    4e36:	bl	5454 <serial2_available>
	if (Serial2.available()) serialEvent2();
    4e3a:	cmp	r0, #0
    4e3c:	bne.n	4ea8 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    4e3e:	bl	5978 <serial3_available>
	if (Serial3.available()) serialEvent3();
    4e42:	cbnz	r0, 4ea2 <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    4e44:	bl	5580 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4e48:	cbnz	r0, 4e9c <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    4e4a:	bl	535c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4e4e:	cbnz	r0, 4e96 <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    4e50:	bl	57a4 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4e54:	cbnz	r0, 4e90 <yield+0x78>
#endif
	running = 0;
    4e56:	movs	r3, #0
    4e58:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4e5a:	mrs	r3, IPSR
		if (ipsr != 0) return;
    4e5e:	cmp	r3, #0
    4e60:	bne.n	4e20 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4e62:	mrs	r1, PRIMASK
		__disable_irq();
    4e66:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    4e68:	ldr	r3, [pc, #100]	; (4ed0 <yield+0xb8>)
    4e6a:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4e6c:	cbz	r0, 4eba <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4e6e:	ldr	r4, [pc, #100]	; (4ed4 <yield+0xbc>)
    4e70:	ldrb	r2, [r4, #0]
    4e72:	cbnz	r2, 4eba <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    4e74:	ldr	r5, [r0, #20]
    4e76:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    4e78:	movs	r3, #1
    4e7a:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    4e7c:	cbz	r5, 4ec2 <yield+0xaa>
			firstYield->_prev = nullptr;
    4e7e:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4e80:	cbnz	r1, 4e84 <yield+0x6c>
    4e82:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4e84:	movs	r5, #0
    4e86:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4e88:	ldr	r3, [r0, #8]
    4e8a:	blx	r3
		runningFromYield = false;
    4e8c:	strb	r5, [r4, #0]
    4e8e:	b.n	4e20 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    4e90:	bl	5358 <serialEvent6()>
    4e94:	b.n	4e56 <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    4e96:	bl	4edc <serialEvent5()>
    4e9a:	b.n	4e50 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    4e9c:	bl	4f58 <serialEvent4()>
    4ea0:	b.n	4e4a <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    4ea2:	bl	5a74 <serialEvent3()>
    4ea6:	b.n	4e44 <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    4ea8:	bl	4f54 <serialEvent2()>
    4eac:	b.n	4e3e <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    4eae:	bl	5a70 <serialEvent1()>
    4eb2:	b.n	4e36 <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    4eb4:	bl	4f08 <serialEvent()>
    4eb8:	b.n	4e2e <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4eba:	cmp	r1, #0
    4ebc:	bne.n	4e20 <yield+0x8>
    4ebe:	cpsie	i
    4ec0:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    4ec2:	ldr	r3, [pc, #20]	; (4ed8 <yield+0xc0>)
    4ec4:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4ec6:	cmp	r1, #0
    4ec8:	bne.n	4e84 <yield+0x6c>
    4eca:	b.n	4e82 <yield+0x6a>
    4ecc:	.word	0x1fffcef8
    4ed0:	.word	0x1fffceec
    4ed4:	.word	0x1fffcef0
    4ed8:	.word	0x1fffcee8

00004edc <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    4edc:	bx	lr
    4ede:	nop

00004ee0 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    4ee0:	b.w	3604 <usb_serial_flush_input>

00004ee4 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4ee4:	b.w	35b8 <usb_serial_peekchar>

00004ee8 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4ee8:	b.w	3570 <usb_serial_getchar>

00004eec <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4eec:	b.w	35e8 <usb_serial_available>

00004ef0 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4ef0:	b.w	37a4 <usb_serial_flush_output>

00004ef4 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4ef4:	b.w	375c <usb_serial_write_buffer_free>

00004ef8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4ef8:	mov	r0, r1
    4efa:	mov	r1, r2
    4efc:	b.w	363c <usb_serial_write>

00004f00 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4f00:	mov	r0, r1
    4f02:	b.w	3744 <usb_serial_putchar>
    4f06:	nop

00004f08 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    4f08:	bx	lr
    4f0a:	nop

00004f0c <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    4f0c:	push	{r3, r4, r5, r6, r7, lr}
	size_t count = 0;
	while (size--) count += write(*buffer++);
    4f0e:	cbz	r2, 4f2e <Print::write(unsigned char const*, unsigned int)+0x22>
    4f10:	mov	r6, r0
    4f12:	mov	r7, r1
    4f14:	mov	r4, r2
    4f16:	movs	r5, #0
    4f18:	ldr	r3, [r6, #0]
    4f1a:	ldrb.w	r1, [r7], #1
    4f1e:	ldr	r3, [r3, #0]
    4f20:	mov	r0, r6
    4f22:	blx	r3
    4f24:	subs	r4, #1
    4f26:	add	r5, r0
    4f28:	bne.n	4f18 <Print::write(unsigned char const*, unsigned int)+0xc>
	return count;
}
    4f2a:	mov	r0, r5
    4f2c:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	size_t count = 0;
    4f2e:	mov	r5, r2
    4f30:	b.n	4f2a <Print::write(unsigned char const*, unsigned int)+0x1e>
    4f32:	nop

00004f34 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4f34:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    4f36:	ldr	r2, [pc, #24]	; (4f50 <Print::println()+0x1c>)
	return write(buf, 2);
    4f38:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4f3a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    4f3c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4f3e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4f40:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4f42:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    4f46:	movs	r2, #2
    4f48:	blx	r3
}
    4f4a:	add	sp, #12
    4f4c:	ldr.w	pc, [sp], #4
    4f50:	.word	0x00006a84

00004f54 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    4f54:	bx	lr
    4f56:	nop

00004f58 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    4f58:	bx	lr
    4f5a:	nop

00004f5c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4f5c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4f5e:	bl	4cc <setup>
	while (1) {
		loop();
    4f62:	bl	5d4 <loop>
		yield();
    4f66:	bl	4e18 <yield>
    4f6a:	b.n	4f62 <main+0x6>

00004f6c <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    4f6c:	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    4f6e:	ldr	r5, [pc, #88]	; (4fc8 <random(unsigned long) [clone .part.0]+0x5c>)
    4f70:	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    4f72:	cbz	r2, 4fb8 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    4f74:	ldr	r1, [pc, #84]	; (4fcc <random(unsigned long) [clone .part.0]+0x60>)
    4f76:	ldr	r3, [pc, #88]	; (4fd0 <random(unsigned long) [clone .part.0]+0x64>)
    4f78:	ldr.w	lr, [pc, #92]	; 4fd8 <random(unsigned long) [clone .part.0]+0x6c>
    4f7c:	smull	r6, r7, r2, r1
    4f80:	smull	r1, r4, r1, r2
    4f84:	asrs	r6, r2, #31
    4f86:	adds	r1, r2, r7
    4f88:	add	r4, r2
    4f8a:	rsb	r1, r6, r1, asr #16
    4f8e:	rsb	r4, r6, r4, asr #16
    4f92:	mul.w	r4, r3, r4
    4f96:	mls	r2, lr, r1, r2
    4f9a:	movw	r3, #16807	; 0x41a7
    4f9e:	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    4fa2:	cmp	r3, #0
    4fa4:	bge.n	4fac <random(unsigned long) [clone .part.0]+0x40>
    4fa6:	add.w	r3, r3, #2147483648	; 0x80000000
    4faa:	subs	r3, #1
    4fac:	udiv	r2, r3, r0
	seed = x;
    4fb0:	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    4fb2:	mls	r0, r0, r2, r3
    4fb6:	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    4fb8:	ldr	r3, [pc, #24]	; (4fd4 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    4fba:	str	r3, [r5, #0]
    4fbc:	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    4fc0:	mls	r0, r0, r2, r3
    4fc4:	pop	{r4, r5, r6, r7, pc}
    4fc6:	nop
    4fc8:	.word	0x1fffcefc
    4fcc:	.word	0x834e0b5f
    4fd0:	.word	0xfffff4ec
    4fd4:	.word	0x1f0cce42
    4fd8:	.word	0x0001f31d

00004fdc <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
    4fdc:	cbz	r0, 4fe2 <random(unsigned long)+0x6>
    4fde:	b.w	4f6c <random(unsigned long) [clone .part.0]>
	return random() % howbig;
}
    4fe2:	bx	lr

00004fe4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    4fe4:	cmp.w	r1, #896	; 0x380
    4fe8:	push	{r4, r5, r6, r7}
    4fea:	it	cs
    4fec:	movcs.w	r1, #896	; 0x380
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    4ff0:	cpsid	i
	memory_pool = data;
    4ff2:	ldr	r2, [pc, #76]	; (5040 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    4ff4:	ldr	r4, [pc, #76]	; (5044 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)
    4ff6:	ldr	r3, [pc, #80]	; (5048 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    4ff8:	str	r0, [r2, #0]
	memory_pool_first_mask = 0;
    4ffa:	movs	r2, #0
    4ffc:	strh	r2, [r4, #0]
    4ffe:	add.w	r4, r3, #112	; 0x70
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
    5002:	str.w	r2, [r3, #4]!
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
    5006:	cmp	r3, r4
    5008:	bne.n	5002 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x1e>
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    500a:	cbz	r1, 503a <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
    500c:	ldr	r6, [pc, #60]	; (504c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>)
    500e:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    5010:	movs	r7, #1
    5012:	lsrs	r5, r3, #5
    5014:	and.w	r4, r3, #31
    5018:	ldr.w	r2, [r6, r5, lsl #2]
    501c:	lsl.w	r4, r7, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    5020:	adds	r3, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    5022:	orrs	r2, r4
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    5024:	cmp	r3, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    5026:	str.w	r2, [r6, r5, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    502a:	bne.n	5012 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    502c:	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    502e:	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    5030:	adds	r3, #1
    5032:	cmp	r3, r1
    5034:	add.w	r0, r0, #260	; 0x104
    5038:	bne.n	502e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4a>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    503a:	cpsie	i

}
    503c:	pop	{r4, r5, r6, r7}
    503e:	bx	lr
    5040:	.word	0x1fffcf08
    5044:	.word	0x1fffcf82
    5048:	.word	0x1fffcf0c
    504c:	.word	0x1fffcf10

00005050 <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    5050:	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    5052:	cpsid	i
	index = memory_pool_first_mask;
    5054:	ldr	r7, [pc, #140]	; (50e4 <AudioStream::allocate()+0x94>)
	p += index;
    5056:	ldr	r6, [pc, #144]	; (50e8 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    5058:	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    505a:	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    505e:	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    5062:	cmp	r0, r3
    5064:	bcs.n	508c <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    5066:	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    506a:	cbnz	r1, 5094 <AudioStream::allocate()+0x44>
    506c:	adds	r2, r0, #4
    506e:	add.w	r5, r6, #115	; 0x73
    5072:	adds	r3, r4, #1
    5074:	subs	r5, r5, r2
    5076:	add.w	r5, r3, r5, lsr #2
    507a:	b.n	5084 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    507c:	ldr.w	r1, [r2], #4
		if (avail) break;
    5080:	cbnz	r1, 5094 <AudioStream::allocate()+0x44>
    5082:	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    5084:	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    5086:	mov	r4, r3
		p++;
    5088:	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    508a:	bne.n	507c <AudioStream::allocate()+0x2c>
			__enable_irq();
    508c:	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    508e:	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    5090:	pop	{r4, r5, r6, r7}
    5092:	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    5094:	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    5098:	mov.w	r2, #2147483648	; 0x80000000
    509c:	lsrs	r2, r3
    509e:	bic.w	r1, r1, r2
	*p = avail;
    50a2:	str	r1, [r0, #0]
	if (!avail) index++;
    50a4:	cbnz	r1, 50a8 <AudioStream::allocate()+0x58>
    50a6:	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    50a8:	ldr	r1, [pc, #64]	; (50ec <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    50aa:	strh	r4, [r7, #0]
	used = memory_used + 1;
    50ac:	ldrh	r2, [r1, #0]
    50ae:	adds	r2, #1
	memory_used = used;
    50b0:	uxth	r4, r2
    50b2:	strh	r4, [r1, #0]
	__enable_irq();
    50b4:	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    50b6:	subs	r0, r0, r6
    50b8:	asrs	r0, r0, #2
    50ba:	rsb	r0, r3, r0, lsl #5
    50be:	add.w	r0, r0, r0, lsl #6
    50c2:	lsls	r3, r0, #2
    50c4:	ldr	r0, [pc, #40]	; (50f0 <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    50c6:	ldr	r1, [pc, #44]	; (50f4 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    50c8:	ldr	r0, [r0, #0]
    50ca:	add.w	r3, r3, #8032	; 0x1f60
    50ce:	adds	r3, #28
	block->ref_count = 1;
    50d0:	movs	r5, #1
    50d2:	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    50d4:	ldrh	r5, [r1, #0]
    50d6:	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    50d8:	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    50da:	it	hi
    50dc:	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    50de:	pop	{r4, r5, r6, r7}
    50e0:	bx	lr
    50e2:	nop
    50e4:	.word	0x1fffcf82
    50e8:	.word	0x1fffcf10
    50ec:	.word	0x1fffcf84
    50f0:	.word	0x1fffcf08
    50f4:	.word	0x1fffcf04

000050f8 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    50f8:	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    50fa:	cpsid	i
	if (block->ref_count > 1) {
    50fc:	ldrb	r3, [r0, #0]
    50fe:	cmp	r3, #1
    5100:	bls.n	510a <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    5102:	subs	r3, #1
    5104:	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    5106:	cpsie	i
    5108:	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    510a:	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    510c:	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    510e:	ldr	r4, [pc, #48]	; (5140 <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    5110:	ldr	r5, [pc, #48]	; (5144 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    5112:	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    5116:	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    5118:	mvns	r2, r2
    511a:	mov.w	r0, #2147483648	; 0x80000000
    511e:	and.w	r2, r2, #31
    5122:	lsr.w	r2, r0, r2
    5126:	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    5128:	ldr	r2, [pc, #28]	; (5148 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    512a:	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    512e:	cmp	r3, r6
    5130:	it	cc
    5132:	strhcc	r3, [r5, #0]
		memory_used--;
    5134:	ldrh	r3, [r2, #0]
    5136:	subs	r3, #1
    5138:	strh	r3, [r2, #0]
	}
	__enable_irq();
    513a:	cpsie	i
}
    513c:	pop	{r4, r5, r6}
    513e:	bx	lr
    5140:	.word	0x1fffcf10
    5144:	.word	0x1fffcf82
    5148:	.word	0x1fffcf84

0000514c <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    514c:	ldr	r3, [r0, #12]
    514e:	cbz	r3, 517e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    5150:	push	{r4, r5}
    5152:	b.n	5158 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    5154:	ldr	r3, [r3, #12]
    5156:	cbz	r3, 517c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    5158:	ldrb	r0, [r3, #8]
    515a:	cmp	r0, r2
    515c:	bne.n	5154 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    515e:	ldr	r0, [r3, #4]
    5160:	ldrb	r4, [r3, #9]
    5162:	ldr	r0, [r0, #16]
    5164:	ldr.w	r5, [r0, r4, lsl #2]
    5168:	cmp	r5, #0
    516a:	bne.n	5154 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    516c:	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    5170:	ldrb	r0, [r1, #0]
    5172:	adds	r0, #1
    5174:	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    5176:	ldr	r3, [r3, #12]
    5178:	cmp	r3, #0
    517a:	bne.n	5158 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    517c:	pop	{r4, r5}
    517e:	bx	lr

00005180 <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    5180:	ldrb	r3, [r0, #9]
    5182:	cmp	r3, r1
    5184:	bls.n	5194 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    5186:	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    5188:	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    518a:	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    518e:	str.w	r2, [r3, r1, lsl #2]
	return in;
    5192:	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    5194:	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    5196:	bx	lr

00005198 <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    5198:	push	{r3, r4, r5, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    519a:	ldrb	r3, [r0, #9]
    519c:	cmp	r3, r1
    519e:	bls.n	51d6 <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
    51a0:	ldr	r3, [r0, #16]
    51a2:	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    51a6:	movs	r2, #0
    51a8:	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    51ac:	cbz	r4, 51d6 <AudioStream::receiveWritable(unsigned int)+0x3e>
    51ae:	ldrb	r3, [r4, #0]
    51b0:	cmp	r3, #1
    51b2:	bls.n	51d2 <AudioStream::receiveWritable(unsigned int)+0x3a>
		p = allocate();
    51b4:	bl	5050 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    51b8:	mov	r5, r0
    51ba:	cbz	r0, 51c8 <AudioStream::receiveWritable(unsigned int)+0x30>
    51bc:	mov.w	r2, #256	; 0x100
    51c0:	adds	r1, r4, #4
    51c2:	adds	r0, #4
    51c4:	bl	343c <memcpy>
		in->ref_count--;
    51c8:	ldrb	r3, [r4, #0]
    51ca:	subs	r3, #1
    51cc:	strb	r3, [r4, #0]

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
    51ce:	mov	r0, r5
    51d0:	pop	{r3, r4, r5, pc}
    51d2:	mov	r0, r4
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
		in = p;
	}
	return in;
}
    51d4:	pop	{r3, r4, r5, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    51d6:	movs	r0, #0
    51d8:	pop	{r3, r4, r5, pc}
    51da:	nop

000051dc <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    51dc:	ldrb	r3, [r0, #16]
    51de:	cbnz	r3, 522a <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    51e0:	ldr	r3, [r0, #4]
    51e2:	ldrb	r2, [r0, #9]
    51e4:	ldrb	r3, [r3, #9]
    51e6:	cmp	r2, r3
    51e8:	bhi.n	522a <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    51ea:	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    51ec:	cpsid	i
	p = src.destination_list;
    51ee:	ldr	r4, [r0, #0]
    51f0:	ldr	r3, [r4, #12]
	if (p == NULL) {
    51f2:	cbz	r3, 5240 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    51f4:	ldr	r2, [r3, #12]
    51f6:	cbz	r2, 5206 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    51f8:	ldr	r1, [r3, #0]
    51fa:	cmp	r4, r1
    51fc:	beq.n	522c <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    51fe:	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    5200:	ldr	r2, [r3, #12]
    5202:	cmp	r2, #0
    5204:	bne.n	51f8 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    5206:	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    5208:	movs	r3, #0
    520a:	str	r3, [r0, #12]
	src.numConnections++;
    520c:	ldrb	r3, [r4, #10]
    520e:	adds	r3, #1
    5210:	strb	r3, [r4, #10]
	src.active = true;
    5212:	ldr	r2, [r0, #0]

	dst.numConnections++;
    5214:	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    5216:	movs	r3, #1
    5218:	strb	r3, [r2, #8]

	dst.numConnections++;
    521a:	ldrb	r2, [r1, #10]
    521c:	add	r2, r3
    521e:	strb	r2, [r1, #10]
	dst.active = true;
    5220:	ldr	r2, [r0, #4]
    5222:	strb	r3, [r2, #8]

	isConnected = true;
    5224:	strb	r3, [r0, #16]

	__enable_irq();
    5226:	cpsie	i
}
    5228:	pop	{r4, r5}
    522a:	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    522c:	ldr	r5, [r3, #4]
    522e:	ldr	r1, [r0, #4]
    5230:	cmp	r5, r1
    5232:	bne.n	51fe <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    5234:	ldrh	r1, [r3, #8]
    5236:	ldrh	r3, [r0, #8]
    5238:	cmp	r1, r3
    523a:	beq.n	5226 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    523c:	mov	r3, r2
    523e:	b.n	5200 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    5240:	str	r0, [r4, #12]
    5242:	b.n	5208 <AudioConnection::connect()+0x2c>

00005244 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    5244:	ldrb	r3, [r0, #16]
    5246:	cbz	r3, 529c <AudioConnection::disconnect()+0x58>
	if (dest_index > dst.num_inputs) return;
    5248:	ldr	r3, [r0, #4]
    524a:	ldrb	r2, [r0, #9]
    524c:	ldrb	r3, [r3, #9]
    524e:	cmp	r2, r3
    5250:	bhi.n	529c <AudioConnection::disconnect()+0x58>
	__disable_irq();
    5252:	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    5254:	ldr	r2, [r0, #0]
    5256:	ldr	r3, [r2, #12]
	if (p == NULL) {
    5258:	cbz	r3, 529c <AudioConnection::disconnect()+0x58>
		return;
	} else if (p == this) {
    525a:	cmp	r0, r3
    525c:	bne.n	5264 <AudioConnection::disconnect()+0x20>
    525e:	b.n	529e <AudioConnection::disconnect()+0x5a>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    5260:	cmp	r0, r3
    5262:	beq.n	526a <AudioConnection::disconnect()+0x26>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    5264:	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    5266:	cmp	r3, #0
    5268:	bne.n	5260 <AudioConnection::disconnect()+0x1c>
			}
			p = p->next_dest;
		}
	}
	//Remove possible pending src block from destination
	dst.inputQueue[dest_index] = NULL;
    526a:	ldr	r3, [r0, #4]
    526c:	ldrb	r2, [r0, #9]
    526e:	ldr	r3, [r3, #16]
    5270:	movs	r1, #0
    5272:	str.w	r1, [r3, r2, lsl #2]

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    5276:	ldr	r2, [r0, #0]
    5278:	ldrb	r3, [r2, #10]
    527a:	subs	r3, #1
    527c:	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    527e:	ldr	r3, [r0, #0]
    5280:	ldrb	r2, [r3, #10]
    5282:	cbnz	r2, 5286 <AudioConnection::disconnect()+0x42>
		src.active = false;
    5284:	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    5286:	ldr	r2, [r0, #4]
    5288:	ldrb	r3, [r2, #10]
    528a:	subs	r3, #1
    528c:	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    528e:	ldr	r3, [r0, #4]
    5290:	ldrb	r2, [r3, #10]
    5292:	cbnz	r2, 5296 <AudioConnection::disconnect()+0x52>
		dst.active = false;
    5294:	strb	r2, [r3, #8]
	}

	isConnected = false;
    5296:	movs	r3, #0
    5298:	strb	r3, [r0, #16]

	__enable_irq();
    529a:	cpsie	i
    529c:	bx	lr
	// Remove destination from source list
	p = src.destination_list;
	if (p == NULL) {
		return;
	} else if (p == this) {
		if (p->next_dest) {
    529e:	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    52a0:	str	r3, [r2, #12]
    52a2:	b.n	526a <AudioConnection::disconnect()+0x26>

000052a4 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    52a4:	ldr	r3, [pc, #32]	; (52c8 <AudioStream::update_setup()+0x24>)
    52a6:	ldrb	r2, [r3, #0]
    52a8:	cbnz	r2, 52c2 <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    52aa:	ldr	r0, [pc, #32]	; (52cc <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    52ac:	ldr	r1, [pc, #32]	; (52d0 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    52ae:	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    52b0:	movs	r4, #208	; 0xd0
    52b2:	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    52b4:	movs	r2, #1
	update_scheduled = true;
	return true;
    52b6:	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    52b8:	str	r2, [r1, #0]
	update_scheduled = true;
    52ba:	strb	r2, [r3, #0]
	return true;
}
    52bc:	ldr.w	r4, [sp], #4
    52c0:	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    52c2:	movs	r0, #0
    52c4:	bx	lr
    52c6:	nop
    52c8:	.word	0x1fffcf0c
    52cc:	.word	0xe000e440
    52d0:	.word	0xe000e108

000052d4 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    52d4:	ldr	r1, [pc, #104]	; (5340 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    52d6:	ldr	r2, [pc, #108]	; (5344 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    52d8:	ldr	r0, [pc, #108]	; (5348 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    52da:	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    52dc:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    52de:	ldr	r5, [pc, #108]	; (534c <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    52e0:	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    52e2:	orr.w	r3, r3, #16777216	; 0x1000000
    52e6:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    52e8:	ldr	r3, [r2, #0]
    52ea:	orr.w	r3, r3, #1
    52ee:	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    52f0:	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    52f2:	cbnz	r4, 52fa <software_isr+0x26>
    52f4:	b.n	5322 <software_isr+0x4e>
    52f6:	ldr	r4, [r4, #20]
    52f8:	cbz	r4, 5322 <software_isr+0x4e>
		if (p->active) {
    52fa:	ldrb	r3, [r4, #8]
    52fc:	cmp	r3, #0
    52fe:	beq.n	52f6 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    5300:	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    5302:	ldr	r7, [r5, #0]
			p->update();
    5304:	ldr	r3, [r3, #0]
    5306:	mov	r0, r4
    5308:	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    530a:	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    530c:	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    530e:	subs	r3, r3, r7
    5310:	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    5312:	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    5314:	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    5316:	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    5318:	it	hi
    531a:	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    531c:	ldr	r4, [r4, #20]
    531e:	cmp	r4, #0
    5320:	bne.n	52fa <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    5322:	ldr	r3, [pc, #40]	; (534c <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    5324:	ldr	r2, [pc, #40]	; (5350 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    5326:	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    5328:	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    532a:	ldr	r4, [pc, #40]	; (5354 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    532c:	subs	r3, r3, r6
    532e:	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    5330:	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    5332:	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    5334:	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    5336:	bls.n	533c <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    5338:	strh	r1, [r2, #0]
    533a:	pop	{r3, r4, r5, r6, r7, pc}
    533c:	pop	{r3, r4, r5, r6, r7, pc}
    533e:	nop
    5340:	.word	0xe000edfc
    5344:	.word	0xe0001000
    5348:	.word	0x1fffcf00
    534c:	.word	0xe0001004
    5350:	.word	0x1fffcf80
    5354:	.word	0x1fffcf86

00005358 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    5358:	bx	lr
    535a:	nop

0000535c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    535c:	ldr	r2, [pc, #20]	; (5374 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    535e:	ldr	r3, [pc, #24]	; (5378 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5360:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5362:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5364:	uxtb	r0, r0
	tail = rx_buffer_tail;
    5366:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5368:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    536a:	it	cc
    536c:	addcc	r0, #64	; 0x40
    536e:	subs	r0, r0, r3
}
    5370:	bx	lr
    5372:	nop
    5374:	.word	0x1fffcf8c
    5378:	.word	0x1fffcf8d

0000537c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    537c:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    537e:	ldr	r3, [pc, #172]	; (542c <uart4_status_isr+0xb0>)
    5380:	ldrb	r2, [r3, #4]
    5382:	lsls	r4, r2, #26
    5384:	bpl.n	53c6 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    5386:	ldr	r0, [pc, #168]	; (5430 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    5388:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    538a:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    538c:	ldr	r1, [pc, #164]	; (5434 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    538e:	adds	r3, #1
    5390:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5392:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    5394:	it	gt
    5396:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    5398:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    539a:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    539c:	beq.n	53a6 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    539e:	ldr	r4, [pc, #152]	; (5438 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    53a0:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    53a2:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    53a4:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    53a6:	ldr	r2, [pc, #148]	; (543c <uart4_status_isr+0xc0>)
    53a8:	ldr	r1, [r2, #0]
    53aa:	cbz	r1, 53c6 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    53ac:	ldr	r2, [pc, #144]	; (5440 <uart4_status_isr+0xc4>)
    53ae:	ldrb	r2, [r2, #0]
    53b0:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    53b2:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    53b4:	itet	cc
    53b6:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    53ba:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    53bc:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    53be:	cmp	r3, #39	; 0x27
    53c0:	itt	gt
    53c2:	movgt	r3, #1
    53c4:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    53c6:	ldr	r2, [pc, #100]	; (542c <uart4_status_isr+0xb0>)
    53c8:	ldrb	r3, [r2, #3]
    53ca:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    53cc:	lsls	r0, r3, #24
    53ce:	bmi.n	53f4 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    53d0:	lsls	r2, r3, #25
    53d2:	bpl.n	53f0 <uart4_status_isr+0x74>
    53d4:	ldr	r3, [pc, #84]	; (542c <uart4_status_isr+0xb0>)
    53d6:	ldrb	r3, [r3, #4]
    53d8:	lsls	r3, r3, #25
    53da:	bpl.n	53f0 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    53dc:	ldr	r3, [pc, #100]	; (5444 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    53de:	ldr	r1, [pc, #104]	; (5448 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    53e0:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    53e2:	movs	r2, #0
    53e4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    53e6:	cbz	r3, 53ea <uart4_status_isr+0x6e>
    53e8:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    53ea:	ldr	r3, [pc, #64]	; (542c <uart4_status_isr+0xb0>)
    53ec:	movs	r2, #44	; 0x2c
    53ee:	strb	r2, [r3, #3]
	}
}
    53f0:	pop	{r4, r5}
    53f2:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    53f4:	ldrb	r1, [r2, #4]
    53f6:	lsls	r1, r1, #24
    53f8:	bpl.n	53d0 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    53fa:	ldr	r1, [pc, #80]	; (544c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    53fc:	ldr	r0, [pc, #64]	; (5440 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    53fe:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    5400:	ldrb	r1, [r0, #0]
    5402:	uxtb	r1, r1
		if (head == tail) {
    5404:	cmp	r4, r1
    5406:	beq.n	5424 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    5408:	adds	r2, r1, #1
    540a:	cmp	r2, #39	; 0x27
    540c:	itt	hi
    540e:	movhi	r1, #0
    5410:	movhi	r2, r1
			n = tx_buffer[tail];
    5412:	ldr	r5, [pc, #60]	; (5450 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    5414:	ldr	r4, [pc, #20]	; (542c <uart4_status_isr+0xb0>)
    5416:	it	ls
    5418:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    541a:	ldrb	r2, [r5, r2]
    541c:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    541e:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    5420:	strb	r1, [r0, #0]
    5422:	b.n	53d0 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    5424:	movs	r1, #108	; 0x6c
    5426:	strb	r1, [r2, #3]
    5428:	b.n	53d0 <uart4_status_isr+0x54>
    542a:	nop
    542c:	.word	0x400ea000
    5430:	.word	0x1fffcf8c
    5434:	.word	0x1fffcf8d
    5438:	.word	0x1fffcfb8
    543c:	.word	0x1fffcf88
    5440:	.word	0x1fffcff9
    5444:	.word	0x1fffcffc
    5448:	.word	0x1fffcff8
    544c:	.word	0x1fffd000
    5450:	.word	0x1fffcf90

00005454 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5454:	ldr	r2, [pc, #20]	; (546c <serial2_available+0x18>)
	tail = rx_buffer_tail;
    5456:	ldr	r3, [pc, #24]	; (5470 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5458:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    545a:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    545c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    545e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5460:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    5462:	it	cc
    5464:	addcc	r0, #64	; 0x40
    5466:	subs	r0, r0, r3
}
    5468:	bx	lr
    546a:	nop
    546c:	.word	0x1fffd074
    5470:	.word	0x1fffd009

00005474 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    5474:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    5476:	ldr	r3, [pc, #224]	; (5558 <uart1_status_isr+0xe4>)
    5478:	ldrb	r2, [r3, #4]
    547a:	tst.w	r2, #48	; 0x30
    547e:	beq.n	54da <uart1_status_isr+0x66>
		__disable_irq();
    5480:	cpsid	i
		avail = UART1_RCFIFO;
    5482:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    5484:	and.w	r2, r1, #255	; 0xff
    5488:	cmp	r1, #0
    548a:	beq.n	5508 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    548c:	cpsie	i
			head = rx_buffer_head;
    548e:	ldr	r7, [pc, #204]	; (555c <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    5490:	ldr	r1, [pc, #204]	; (5560 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    5492:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    5494:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    5496:	ldr	r6, [pc, #204]	; (5564 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    5498:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    549a:	uxtb	r0, r0
			tail = rx_buffer_tail;
    549c:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    549e:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    54a0:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    54a2:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    54a4:	it	cs
    54a6:	movcs	r3, #0
				if (newhead != tail) {
    54a8:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    54aa:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    54ae:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    54b0:	itt	ne
    54b2:	strbne	r1, [r6, r3]
    54b4:	movne	r0, r3
				}
			} while (--avail > 0);
    54b6:	ands.w	r2, r2, #255	; 0xff
    54ba:	bne.n	549e <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    54bc:	ldr	r3, [pc, #168]	; (5568 <uart1_status_isr+0xf4>)
    54be:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    54c0:	uxtb	r2, r0
    54c2:	strb	r2, [r7, #0]
			if (rts_pin) {
    54c4:	cbz	r3, 54da <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    54c6:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    54c8:	itet	cc
    54ca:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    54ce:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    54d0:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    54d2:	cmp	r0, #39	; 0x27
    54d4:	itt	gt
    54d6:	movgt	r2, #1
    54d8:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    54da:	ldr	r1, [pc, #124]	; (5558 <uart1_status_isr+0xe4>)
    54dc:	ldrb	r2, [r1, #3]
    54de:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    54e0:	lsls	r5, r2, #24
    54e2:	bmi.n	5512 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    54e4:	lsls	r2, r2, #25
    54e6:	bpl.n	5504 <uart1_status_isr+0x90>
    54e8:	ldr	r3, [pc, #108]	; (5558 <uart1_status_isr+0xe4>)
    54ea:	ldrb	r3, [r3, #4]
    54ec:	lsls	r3, r3, #25
    54ee:	bpl.n	5504 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    54f0:	ldr	r3, [pc, #120]	; (556c <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    54f2:	ldr	r1, [pc, #124]	; (5570 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    54f4:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    54f6:	movs	r2, #0
    54f8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    54fa:	cbz	r3, 54fe <uart1_status_isr+0x8a>
    54fc:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    54fe:	ldr	r3, [pc, #88]	; (5558 <uart1_status_isr+0xe4>)
    5500:	movs	r2, #60	; 0x3c
    5502:	strb	r2, [r3, #3]
	}
}
    5504:	pop	{r4, r5, r6, r7}
    5506:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    5508:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    550a:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    550c:	strb	r2, [r3, #17]
			__enable_irq();
    550e:	cpsie	i
    5510:	b.n	54da <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    5512:	ldrb	r3, [r1, #4]
    5514:	lsls	r4, r3, #24
    5516:	bpl.n	54e4 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    5518:	ldr	r3, [pc, #88]	; (5574 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    551a:	ldr	r6, [pc, #92]	; (5578 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    551c:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    551e:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5520:	uxtb	r4, r4
		tail = tx_buffer_tail;
    5522:	uxtb	r3, r3
		do {
			if (tail == head) break;
    5524:	cmp	r4, r3
    5526:	beq.n	5546 <uart1_status_isr+0xd2>
    5528:	ldr	r5, [pc, #80]	; (557c <uart1_status_isr+0x108>)
    552a:	b.n	5530 <uart1_status_isr+0xbc>
    552c:	cmp	r3, r4
    552e:	beq.n	5546 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    5530:	adds	r3, #1
    5532:	cmp	r3, #40	; 0x28
    5534:	it	cs
    5536:	movcs	r3, #0
			avail = UART1_S1;
    5538:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    553a:	ldrb	r0, [r5, r3]
    553c:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    553e:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    5540:	ldrb	r0, [r1, #20]
    5542:	cmp	r0, #7
    5544:	bls.n	552c <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    5546:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    5548:	ldr	r1, [pc, #12]	; (5558 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    554a:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    554c:	ldrb	r3, [r1, #4]
    554e:	lsls	r0, r3, #24
    5550:	itt	mi
    5552:	movmi	r3, #124	; 0x7c
    5554:	strbmi	r3, [r1, #3]
    5556:	b.n	54e4 <uart1_status_isr+0x70>
    5558:	.word	0x4006b000
    555c:	.word	0x1fffd074
    5560:	.word	0x1fffd009
    5564:	.word	0x1fffd034
    5568:	.word	0x1fffd004
    556c:	.word	0x1fffd078
    5570:	.word	0x1fffd008
    5574:	.word	0x1fffd07c
    5578:	.word	0x1fffd075
    557c:	.word	0x1fffd00c

00005580 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5580:	ldr	r2, [pc, #20]	; (5598 <serial4_available+0x18>)
	tail = rx_buffer_tail;
    5582:	ldr	r3, [pc, #24]	; (559c <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5584:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    5586:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5588:	uxtb	r0, r0
	tail = rx_buffer_tail;
    558a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    558c:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    558e:	it	cc
    5590:	addcc	r0, #64	; 0x40
    5592:	subs	r0, r0, r3
}
    5594:	bx	lr
    5596:	nop
    5598:	.word	0x1fffd084
    559c:	.word	0x1fffd085

000055a0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    55a0:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    55a2:	ldr	r3, [pc, #172]	; (5650 <uart3_status_isr+0xb0>)
    55a4:	ldrb	r2, [r3, #4]
    55a6:	lsls	r4, r2, #26
    55a8:	bpl.n	55ea <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    55aa:	ldr	r0, [pc, #168]	; (5654 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    55ac:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    55ae:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    55b0:	ldr	r1, [pc, #164]	; (5658 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    55b2:	adds	r3, #1
    55b4:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    55b6:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    55b8:	it	gt
    55ba:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    55bc:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    55be:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    55c0:	beq.n	55ca <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    55c2:	ldr	r4, [pc, #152]	; (565c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    55c4:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    55c6:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    55c8:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    55ca:	ldr	r2, [pc, #148]	; (5660 <uart3_status_isr+0xc0>)
    55cc:	ldr	r1, [r2, #0]
    55ce:	cbz	r1, 55ea <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    55d0:	ldr	r2, [pc, #144]	; (5664 <uart3_status_isr+0xc4>)
    55d2:	ldrb	r2, [r2, #0]
    55d4:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    55d6:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    55d8:	itet	cc
    55da:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    55de:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    55e0:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    55e2:	cmp	r3, #39	; 0x27
    55e4:	itt	gt
    55e6:	movgt	r3, #1
    55e8:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    55ea:	ldr	r2, [pc, #100]	; (5650 <uart3_status_isr+0xb0>)
    55ec:	ldrb	r3, [r2, #3]
    55ee:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    55f0:	lsls	r0, r3, #24
    55f2:	bmi.n	5618 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    55f4:	lsls	r2, r3, #25
    55f6:	bpl.n	5614 <uart3_status_isr+0x74>
    55f8:	ldr	r3, [pc, #84]	; (5650 <uart3_status_isr+0xb0>)
    55fa:	ldrb	r3, [r3, #4]
    55fc:	lsls	r3, r3, #25
    55fe:	bpl.n	5614 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5600:	ldr	r3, [pc, #100]	; (5668 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    5602:	ldr	r1, [pc, #104]	; (566c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    5604:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    5606:	movs	r2, #0
    5608:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    560a:	cbz	r3, 560e <uart3_status_isr+0x6e>
    560c:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    560e:	ldr	r3, [pc, #64]	; (5650 <uart3_status_isr+0xb0>)
    5610:	movs	r2, #44	; 0x2c
    5612:	strb	r2, [r3, #3]
	}
}
    5614:	pop	{r4, r5}
    5616:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    5618:	ldrb	r1, [r2, #4]
    561a:	lsls	r1, r1, #24
    561c:	bpl.n	55f4 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    561e:	ldr	r1, [pc, #80]	; (5670 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    5620:	ldr	r0, [pc, #64]	; (5664 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5622:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    5624:	ldrb	r1, [r0, #0]
    5626:	uxtb	r1, r1
		if (head == tail) {
    5628:	cmp	r4, r1
    562a:	beq.n	5648 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    562c:	adds	r2, r1, #1
    562e:	cmp	r2, #39	; 0x27
    5630:	itt	hi
    5632:	movhi	r1, #0
    5634:	movhi	r2, r1
			n = tx_buffer[tail];
    5636:	ldr	r5, [pc, #60]	; (5674 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    5638:	ldr	r4, [pc, #20]	; (5650 <uart3_status_isr+0xb0>)
    563a:	it	ls
    563c:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    563e:	ldrb	r2, [r5, r2]
    5640:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    5642:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    5644:	strb	r1, [r0, #0]
    5646:	b.n	55f4 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    5648:	movs	r1, #108	; 0x6c
    564a:	strb	r1, [r2, #3]
    564c:	b.n	55f4 <uart3_status_isr+0x54>
    564e:	nop
    5650:	.word	0x4006d000
    5654:	.word	0x1fffd084
    5658:	.word	0x1fffd085
    565c:	.word	0x1fffd0b0
    5660:	.word	0x1fffd080
    5664:	.word	0x1fffd0f1
    5668:	.word	0x1fffd0f4
    566c:	.word	0x1fffd0f0
    5670:	.word	0x1fffd0f8
    5674:	.word	0x1fffd088

00005678 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5678:	ldr	r2, [pc, #20]	; (5690 <serial_available+0x18>)
	tail = rx_buffer_tail;
    567a:	ldr	r3, [pc, #24]	; (5694 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    567c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    567e:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5680:	uxtb	r0, r0
	tail = rx_buffer_tail;
    5682:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5684:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    5686:	it	cc
    5688:	addcc	r0, #64	; 0x40
    568a:	subs	r0, r0, r3
}
    568c:	bx	lr
    568e:	nop
    5690:	.word	0x1fffd100
    5694:	.word	0x1fffd101

00005698 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    5698:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    569a:	ldr	r3, [pc, #224]	; (577c <uart0_status_isr+0xe4>)
    569c:	ldrb	r2, [r3, #4]
    569e:	tst.w	r2, #48	; 0x30
    56a2:	beq.n	56fe <uart0_status_isr+0x66>
		__disable_irq();
    56a4:	cpsid	i
		avail = UART0_RCFIFO;
    56a6:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    56a8:	and.w	r2, r1, #255	; 0xff
    56ac:	cmp	r1, #0
    56ae:	beq.n	572c <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    56b0:	cpsie	i
			head = rx_buffer_head;
    56b2:	ldr	r7, [pc, #204]	; (5780 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    56b4:	ldr	r1, [pc, #204]	; (5784 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    56b6:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    56b8:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    56ba:	ldr	r6, [pc, #204]	; (5788 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    56bc:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    56be:	uxtb	r0, r0
			tail = rx_buffer_tail;
    56c0:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    56c2:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    56c4:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    56c6:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    56c8:	it	cs
    56ca:	movcs	r3, #0
				if (newhead != tail) {
    56cc:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    56ce:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    56d2:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    56d4:	itt	ne
    56d6:	strbne	r1, [r6, r3]
    56d8:	movne	r0, r3
				}
			} while (--avail > 0);
    56da:	ands.w	r2, r2, #255	; 0xff
    56de:	bne.n	56c2 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    56e0:	ldr	r3, [pc, #168]	; (578c <uart0_status_isr+0xf4>)
    56e2:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    56e4:	uxtb	r2, r0
    56e6:	strb	r2, [r7, #0]
			if (rts_pin) {
    56e8:	cbz	r3, 56fe <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    56ea:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    56ec:	itet	cc
    56ee:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    56f2:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    56f4:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    56f6:	cmp	r0, #39	; 0x27
    56f8:	itt	gt
    56fa:	movgt	r2, #1
    56fc:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    56fe:	ldr	r1, [pc, #124]	; (577c <uart0_status_isr+0xe4>)
    5700:	ldrb	r2, [r1, #3]
    5702:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5704:	lsls	r5, r2, #24
    5706:	bmi.n	5736 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    5708:	lsls	r2, r2, #25
    570a:	bpl.n	5728 <uart0_status_isr+0x90>
    570c:	ldr	r3, [pc, #108]	; (577c <uart0_status_isr+0xe4>)
    570e:	ldrb	r3, [r3, #4]
    5710:	lsls	r3, r3, #25
    5712:	bpl.n	5728 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5714:	ldr	r3, [pc, #120]	; (5790 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    5716:	ldr	r1, [pc, #124]	; (5794 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    5718:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    571a:	movs	r2, #0
    571c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    571e:	cbz	r3, 5722 <uart0_status_isr+0x8a>
    5720:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    5722:	ldr	r3, [pc, #88]	; (577c <uart0_status_isr+0xe4>)
    5724:	movs	r2, #60	; 0x3c
    5726:	strb	r2, [r3, #3]
	}
}
    5728:	pop	{r4, r5, r6, r7}
    572a:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    572c:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    572e:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    5730:	strb	r2, [r3, #17]
			__enable_irq();
    5732:	cpsie	i
    5734:	b.n	56fe <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    5736:	ldrb	r3, [r1, #4]
    5738:	lsls	r4, r3, #24
    573a:	bpl.n	5708 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    573c:	ldr	r3, [pc, #88]	; (5798 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    573e:	ldr	r6, [pc, #92]	; (579c <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5740:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    5742:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5744:	uxtb	r4, r4
		tail = tx_buffer_tail;
    5746:	uxtb	r3, r3
		do {
			if (tail == head) break;
    5748:	cmp	r4, r3
    574a:	beq.n	576a <uart0_status_isr+0xd2>
    574c:	ldr	r5, [pc, #80]	; (57a0 <uart0_status_isr+0x108>)
    574e:	b.n	5754 <uart0_status_isr+0xbc>
    5750:	cmp	r3, r4
    5752:	beq.n	576a <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    5754:	adds	r3, #1
    5756:	cmp	r3, #64	; 0x40
    5758:	it	cs
    575a:	movcs	r3, #0
			avail = UART0_S1;
    575c:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    575e:	ldrb	r0, [r5, r3]
    5760:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    5762:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    5764:	ldrb	r0, [r1, #20]
    5766:	cmp	r0, #7
    5768:	bls.n	5750 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    576a:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    576c:	ldr	r1, [pc, #12]	; (577c <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    576e:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    5770:	ldrb	r3, [r1, #4]
    5772:	lsls	r0, r3, #24
    5774:	itt	mi
    5776:	movmi	r3, #124	; 0x7c
    5778:	strbmi	r3, [r1, #3]
    577a:	b.n	5708 <uart0_status_isr+0x70>
    577c:	.word	0x4006a000
    5780:	.word	0x1fffd100
    5784:	.word	0x1fffd101
    5788:	.word	0x1fffd144
    578c:	.word	0x1fffd0fc
    5790:	.word	0x1fffd188
    5794:	.word	0x1fffd184
    5798:	.word	0x1fffd18c
    579c:	.word	0x1fffd185
    57a0:	.word	0x1fffd104

000057a4 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    57a4:	ldr	r2, [pc, #20]	; (57bc <serial6_available+0x18>)
	tail = rx_buffer_tail;
    57a6:	ldr	r3, [pc, #24]	; (57c0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    57a8:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    57aa:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    57ac:	uxtb	r0, r0
	tail = rx_buffer_tail;
    57ae:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    57b0:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    57b2:	it	cc
    57b4:	addcc	r0, #64	; 0x40
    57b6:	subs	r0, r0, r3
}
    57b8:	bx	lr
    57ba:	nop
    57bc:	.word	0x1fffd194
    57c0:	.word	0x1fffd195

000057c4 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    57c4:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    57c6:	ldr	r3, [pc, #176]	; (5878 <lpuart0_status_isr+0xb4>)
    57c8:	ldr	r2, [r3, #4]
    57ca:	lsls	r4, r2, #10
    57cc:	bpl.n	580e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    57ce:	ldr	r0, [pc, #172]	; (587c <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    57d0:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    57d2:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    57d4:	ldr	r1, [pc, #168]	; (5880 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    57d6:	adds	r3, #1
    57d8:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    57da:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    57dc:	it	gt
    57de:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    57e0:	cmp	r3, r1
    57e2:	beq.n	57ee <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    57e4:	ldr	r4, [pc, #156]	; (5884 <lpuart0_status_isr+0xc0>)
    57e6:	uxtb	r2, r2
			rx_buffer_head = head;
    57e8:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    57ea:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    57ec:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    57ee:	ldr	r2, [pc, #152]	; (5888 <lpuart0_status_isr+0xc4>)
    57f0:	ldr	r1, [r2, #0]
    57f2:	cbz	r1, 580e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    57f4:	ldr	r2, [pc, #148]	; (588c <lpuart0_status_isr+0xc8>)
    57f6:	ldrb	r2, [r2, #0]
    57f8:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    57fa:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    57fc:	itet	cc
    57fe:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    5802:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    5804:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    5806:	cmp	r3, #39	; 0x27
    5808:	itt	gt
    580a:	movgt	r3, #1
    580c:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    580e:	ldr	r2, [pc, #104]	; (5878 <lpuart0_status_isr+0xb4>)
    5810:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    5812:	lsls	r0, r3, #8
    5814:	bpl.n	581c <lpuart0_status_isr+0x58>
    5816:	ldr	r2, [r2, #4]
    5818:	lsls	r1, r2, #8
    581a:	bmi.n	5840 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    581c:	lsls	r2, r3, #9
    581e:	bpl.n	583c <lpuart0_status_isr+0x78>
    5820:	ldr	r3, [pc, #84]	; (5878 <lpuart0_status_isr+0xb4>)
    5822:	ldr	r3, [r3, #4]
    5824:	lsls	r3, r3, #9
    5826:	bpl.n	583c <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    5828:	ldr	r3, [pc, #100]	; (5890 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    582a:	ldr	r1, [pc, #104]	; (5894 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    582c:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    582e:	movs	r2, #0
    5830:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5832:	cbz	r3, 5836 <lpuart0_status_isr+0x72>
    5834:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    5836:	ldr	r3, [pc, #96]	; (5898 <lpuart0_status_isr+0xd4>)
    5838:	movs	r2, #0
    583a:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    583c:	pop	{r4, r5}
    583e:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    5840:	ldr	r2, [pc, #88]	; (589c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    5842:	ldr	r1, [pc, #72]	; (588c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    5844:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    5846:	ldrb	r2, [r1, #0]
    5848:	uxtb	r2, r2
		if (head == tail) {
    584a:	cmp	r0, r2
    584c:	beq.n	586a <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    584e:	adds	r2, #1
    5850:	cmp	r2, #39	; 0x27
    5852:	itt	hi
    5854:	movhi	r0, #0
    5856:	movhi	r2, r0
			n = tx_buffer[tail];
    5858:	ldr	r5, [pc, #68]	; (58a0 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    585a:	ldr	r4, [pc, #28]	; (5878 <lpuart0_status_isr+0xb4>)
    585c:	it	ls
    585e:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    5860:	ldrb	r2, [r5, r2]
    5862:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    5864:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    5866:	strb	r0, [r1, #0]
    5868:	b.n	581c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    586a:	ldr	r0, [pc, #56]	; (58a4 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    586c:	ldr	r2, [pc, #40]	; (5898 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    586e:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    5870:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    5872:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    5874:	str	r1, [r2, #0]
    5876:	b.n	581c <lpuart0_status_isr+0x58>
    5878:	.word	0x400c4000
    587c:	.word	0x1fffd194
    5880:	.word	0x1fffd195
    5884:	.word	0x1fffd1c0
    5888:	.word	0x1fffd190
    588c:	.word	0x1fffd201
    5890:	.word	0x1fffd204
    5894:	.word	0x1fffd200
    5898:	.word	0x43880158
    589c:	.word	0x1fffd208
    58a0:	.word	0x1fffd198
    58a4:	.word	0x4388015c

000058a8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    58a8:	push	{r4, lr}
    58aa:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    58ac:	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    58ae:	bl	39b4 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    58b2:	ldr	r2, [pc, #96]	; (5914 <usb_init_serialnumber+0x6c>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    58b4:	ldr	r3, [pc, #96]	; (5918 <usb_init_serialnumber+0x70>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    58b6:	ldr	r1, [pc, #100]	; (591c <usb_init_serialnumber+0x74>)
    58b8:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    58ba:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    58bc:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    58be:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    58c0:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    58c2:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    58c4:	ldrb	r3, [r2, #0]
    58c6:	lsls	r3, r3, #24
    58c8:	bpl.n	58c4 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
    58ca:	ldr	r3, [pc, #84]	; (5920 <usb_init_serialnumber+0x78>)
    58cc:	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
    58ce:	bl	39e8 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    58d2:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    58d4:	ldr	r3, [pc, #76]	; (5924 <usb_init_serialnumber+0x7c>)
    58d6:	cmp	r4, r3
    58d8:	itt	ls
    58da:	addls.w	r4, r4, r4, lsl #2
    58de:	lslls	r4, r4, #1
	ultoa(num, buf, 10);
    58e0:	mov	r0, r4
    58e2:	ldr	r4, [pc, #68]	; (5928 <usb_init_serialnumber+0x80>)
    58e4:	add	r1, sp, #4
    58e6:	movs	r2, #10
    58e8:	bl	592c <ultoa>
    58ec:	add	r1, sp, #4
    58ee:	mov	r0, r4
	for (i=0; i<10; i++) {
    58f0:	movs	r3, #0
		char c = buf[i];
    58f2:	ldrb.w	r2, [r1], #1
    58f6:	adds	r3, #1
		if (!c) break;
    58f8:	cbz	r2, 590a <usb_init_serialnumber+0x62>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    58fa:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    58fc:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    5900:	bne.n	58f2 <usb_init_serialnumber+0x4a>
    5902:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5904:	strb	r3, [r4, #0]
}
    5906:	add	sp, #16
    5908:	pop	{r4, pc}
    590a:	lsls	r3, r3, #1
    590c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    590e:	strb	r3, [r4, #0]
}
    5910:	add	sp, #16
    5912:	pop	{r4, pc}
    5914:	.word	0x40020004
    5918:	.word	0x40020000
    591c:	.word	0x41070000
    5920:	.word	0x4002000c
    5924:	.word	0x0098967f
    5928:	.word	0x1fffb044

0000592c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    592c:	push	{r4, r5, r6, r7}
    592e:	subs	r5, r1, #1
    5930:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    5932:	movs	r4, #0
    5934:	b.n	5938 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    5936:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    5938:	udiv	r3, r0, r2
    593c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5940:	cmp	r0, #9
    5942:	add.w	r7, r0, #48	; 0x30
    5946:	itet	hi
    5948:	addhi	r0, #55	; 0x37
    594a:	uxtbls	r0, r7
    594c:	uxtbhi	r0, r0
    594e:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    5952:	mov	r0, r3
    5954:	cmp	r3, #0
    5956:	bne.n	5936 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    5958:	adds	r2, r1, r4
    595a:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    595c:	cbz	r4, 5972 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    595e:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    5960:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    5964:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5966:	adds	r3, #1
    5968:	subs	r0, r4, r3
    596a:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    596c:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    5970:	blt.n	595e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    5972:	mov	r0, r1
    5974:	pop	{r4, r5, r6, r7}
    5976:	bx	lr

00005978 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5978:	ldr	r2, [pc, #20]	; (5990 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    597a:	ldr	r3, [pc, #24]	; (5994 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    597c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    597e:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    5980:	uxtb	r0, r0
	tail = rx_buffer_tail;
    5982:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    5984:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    5986:	it	cc
    5988:	addcc	r0, #64	; 0x40
    598a:	subs	r0, r0, r3
}
    598c:	bx	lr
    598e:	nop
    5990:	.word	0x1fffd210
    5994:	.word	0x1fffd211

00005998 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    5998:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    599a:	ldr	r3, [pc, #172]	; (5a48 <uart2_status_isr+0xb0>)
    599c:	ldrb	r2, [r3, #4]
    599e:	lsls	r4, r2, #26
    59a0:	bpl.n	59e2 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    59a2:	ldr	r0, [pc, #168]	; (5a4c <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    59a4:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    59a6:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    59a8:	ldr	r1, [pc, #164]	; (5a50 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    59aa:	adds	r3, #1
    59ac:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    59ae:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    59b0:	it	gt
    59b2:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    59b4:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    59b6:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    59b8:	beq.n	59c2 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    59ba:	ldr	r4, [pc, #152]	; (5a54 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    59bc:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    59be:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    59c0:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    59c2:	ldr	r2, [pc, #148]	; (5a58 <uart2_status_isr+0xc0>)
    59c4:	ldr	r1, [r2, #0]
    59c6:	cbz	r1, 59e2 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    59c8:	ldr	r2, [pc, #144]	; (5a5c <uart2_status_isr+0xc4>)
    59ca:	ldrb	r2, [r2, #0]
    59cc:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    59ce:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    59d0:	itet	cc
    59d2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    59d6:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    59d8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    59da:	cmp	r3, #39	; 0x27
    59dc:	itt	gt
    59de:	movgt	r3, #1
    59e0:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    59e2:	ldr	r2, [pc, #100]	; (5a48 <uart2_status_isr+0xb0>)
    59e4:	ldrb	r3, [r2, #3]
    59e6:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    59e8:	lsls	r0, r3, #24
    59ea:	bmi.n	5a10 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    59ec:	lsls	r2, r3, #25
    59ee:	bpl.n	5a0c <uart2_status_isr+0x74>
    59f0:	ldr	r3, [pc, #84]	; (5a48 <uart2_status_isr+0xb0>)
    59f2:	ldrb	r3, [r3, #4]
    59f4:	lsls	r3, r3, #25
    59f6:	bpl.n	5a0c <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    59f8:	ldr	r3, [pc, #100]	; (5a60 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    59fa:	ldr	r1, [pc, #104]	; (5a64 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    59fc:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    59fe:	movs	r2, #0
    5a00:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    5a02:	cbz	r3, 5a06 <uart2_status_isr+0x6e>
    5a04:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    5a06:	ldr	r3, [pc, #64]	; (5a48 <uart2_status_isr+0xb0>)
    5a08:	movs	r2, #44	; 0x2c
    5a0a:	strb	r2, [r3, #3]
	}
}
    5a0c:	pop	{r4, r5}
    5a0e:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    5a10:	ldrb	r1, [r2, #4]
    5a12:	lsls	r1, r1, #24
    5a14:	bpl.n	59ec <uart2_status_isr+0x54>
		head = tx_buffer_head;
    5a16:	ldr	r1, [pc, #80]	; (5a68 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    5a18:	ldr	r0, [pc, #64]	; (5a5c <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    5a1a:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    5a1c:	ldrb	r1, [r0, #0]
    5a1e:	uxtb	r1, r1
		if (head == tail) {
    5a20:	cmp	r4, r1
    5a22:	beq.n	5a40 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    5a24:	adds	r2, r1, #1
    5a26:	cmp	r2, #39	; 0x27
    5a28:	itt	hi
    5a2a:	movhi	r1, #0
    5a2c:	movhi	r2, r1
			n = tx_buffer[tail];
    5a2e:	ldr	r5, [pc, #60]	; (5a6c <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    5a30:	ldr	r4, [pc, #20]	; (5a48 <uart2_status_isr+0xb0>)
    5a32:	it	ls
    5a34:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    5a36:	ldrb	r2, [r5, r2]
    5a38:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    5a3a:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    5a3c:	strb	r1, [r0, #0]
    5a3e:	b.n	59ec <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    5a40:	movs	r1, #108	; 0x6c
    5a42:	strb	r1, [r2, #3]
    5a44:	b.n	59ec <uart2_status_isr+0x54>
    5a46:	nop
    5a48:	.word	0x4006c000
    5a4c:	.word	0x1fffd210
    5a50:	.word	0x1fffd211
    5a54:	.word	0x1fffd23c
    5a58:	.word	0x1fffd20c
    5a5c:	.word	0x1fffd27d
    5a60:	.word	0x1fffd280
    5a64:	.word	0x1fffd27c
    5a68:	.word	0x1fffd284
    5a6c:	.word	0x1fffd214

00005a70 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    5a70:	bx	lr
    5a72:	nop

00005a74 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    5a74:	bx	lr
    5a76:	nop

00005a78 <__aeabi_atexit>:
    5a78:	mov	r3, r1
    5a7a:	mov	r1, r0
    5a7c:	mov	r0, r3
    5a7e:	b.w	5a84 <__cxa_atexit>
    5a82:	nop

00005a84 <__cxa_atexit>:
    5a84:	mov	r3, r2
    5a86:	mov	r2, r1
    5a88:	mov	r1, r0
    5a8a:	movs	r0, #2
    5a8c:	b.w	6134 <__register_exitproc>

00005a90 <__errno>:
    5a90:	ldr	r3, [pc, #4]	; (5a98 <__errno+0x8>)
    5a92:	ldr	r0, [r3, #0]
    5a94:	bx	lr
    5a96:	nop
    5a98:	.word	0x1fffb488

00005a9c <__libc_init_array>:
    5a9c:	push	{r4, r5, r6, lr}
    5a9e:	ldr	r6, [pc, #60]	; (5adc <__libc_init_array+0x40>)
    5aa0:	ldr	r5, [pc, #60]	; (5ae0 <__libc_init_array+0x44>)
    5aa2:	subs	r6, r6, r5
    5aa4:	asrs	r6, r6, #2
    5aa6:	it	ne
    5aa8:	movne	r4, #0
    5aaa:	beq.n	5ab8 <__libc_init_array+0x1c>
    5aac:	adds	r4, #1
    5aae:	ldr.w	r3, [r5], #4
    5ab2:	blx	r3
    5ab4:	cmp	r6, r4
    5ab6:	bne.n	5aac <__libc_init_array+0x10>
    5ab8:	ldr	r6, [pc, #40]	; (5ae4 <__libc_init_array+0x48>)
    5aba:	ldr	r5, [pc, #44]	; (5ae8 <__libc_init_array+0x4c>)
    5abc:	subs	r6, r6, r5
    5abe:	bl	6ae4 <_init>
    5ac2:	asrs	r6, r6, #2
    5ac4:	it	ne
    5ac6:	movne	r4, #0
    5ac8:	beq.n	5ad8 <__libc_init_array+0x3c>
    5aca:	adds	r4, #1
    5acc:	ldr.w	r3, [r5], #4
    5ad0:	blx	r3
    5ad2:	cmp	r6, r4
    5ad4:	bne.n	5aca <__libc_init_array+0x2e>
    5ad6:	pop	{r4, r5, r6, pc}
    5ad8:	pop	{r4, r5, r6, pc}
    5ada:	nop
    5adc:	.word	0x00006af0
    5ae0:	.word	0x00006af0
    5ae4:	.word	0x00006b40
    5ae8:	.word	0x00006af0

00005aec <malloc>:
    5aec:	ldr	r3, [pc, #8]	; (5af8 <malloc+0xc>)
    5aee:	mov	r1, r0
    5af0:	ldr	r0, [r3, #0]
    5af2:	b.w	5afc <_malloc_r>
    5af6:	nop
    5af8:	.word	0x1fffb488

00005afc <_malloc_r>:
    5afc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b00:	add.w	r5, r1, #11
    5b04:	cmp	r5, #22
    5b06:	sub	sp, #12
    5b08:	mov	r6, r0
    5b0a:	bls.w	5c4c <_malloc_r+0x150>
    5b0e:	bics.w	r5, r5, #7
    5b12:	bmi.w	5c94 <_malloc_r+0x198>
    5b16:	cmp	r1, r5
    5b18:	bhi.w	5c94 <_malloc_r+0x198>
    5b1c:	bl	6108 <__malloc_lock>
    5b20:	cmp.w	r5, #504	; 0x1f8
    5b24:	bcc.w	6060 <_malloc_r+0x564>
    5b28:	lsrs	r3, r5, #9
    5b2a:	beq.w	5ca2 <_malloc_r+0x1a6>
    5b2e:	cmp	r3, #4
    5b30:	bhi.w	5e3a <_malloc_r+0x33e>
    5b34:	lsrs	r0, r5, #6
    5b36:	add.w	lr, r0, #57	; 0x39
    5b3a:	mov.w	r3, lr, lsl #1
    5b3e:	adds	r0, #56	; 0x38
    5b40:	ldr	r7, [pc, #784]	; (5e54 <_malloc_r+0x358>)
    5b42:	add.w	r3, r7, r3, lsl #2
    5b46:	sub.w	r1, r3, #8
    5b4a:	ldr	r4, [r3, #4]
    5b4c:	cmp	r1, r4
    5b4e:	bne.n	5b60 <_malloc_r+0x64>
    5b50:	b.n	5cac <_malloc_r+0x1b0>
    5b52:	cmp	r2, #0
    5b54:	bge.w	5cb0 <_malloc_r+0x1b4>
    5b58:	ldr	r4, [r4, #12]
    5b5a:	cmp	r1, r4
    5b5c:	beq.w	5cac <_malloc_r+0x1b0>
    5b60:	ldr	r3, [r4, #4]
    5b62:	bic.w	r3, r3, #3
    5b66:	subs	r2, r3, r5
    5b68:	cmp	r2, #15
    5b6a:	ble.n	5b52 <_malloc_r+0x56>
    5b6c:	ldr	r1, [pc, #740]	; (5e54 <_malloc_r+0x358>)
    5b6e:	ldr	r4, [r7, #16]
    5b70:	add.w	lr, r1, #8
    5b74:	cmp	r4, lr
    5b76:	beq.w	5ee0 <_malloc_r+0x3e4>
    5b7a:	ldr	r3, [r4, #4]
    5b7c:	bic.w	r3, r3, #3
    5b80:	subs	r2, r3, r5
    5b82:	cmp	r2, #15
    5b84:	bgt.w	5eba <_malloc_r+0x3be>
    5b88:	cmp	r2, #0
    5b8a:	str.w	lr, [r1, #20]
    5b8e:	str.w	lr, [r1, #16]
    5b92:	bge.w	5cd2 <_malloc_r+0x1d6>
    5b96:	cmp.w	r3, #512	; 0x200
    5b9a:	bcs.w	5e6c <_malloc_r+0x370>
    5b9e:	lsrs	r3, r3, #3
    5ba0:	add.w	ip, r3, #1
    5ba4:	movs	r2, #1
    5ba6:	asrs	r3, r3, #2
    5ba8:	lsl.w	r3, r2, r3
    5bac:	ldr	r2, [r1, #4]
    5bae:	ldr.w	r8, [r1, ip, lsl #3]
    5bb2:	str.w	r8, [r4, #8]
    5bb6:	add.w	r9, r1, ip, lsl #3
    5bba:	orrs	r2, r3
    5bbc:	sub.w	r3, r9, #8
    5bc0:	str	r3, [r4, #12]
    5bc2:	str	r2, [r1, #4]
    5bc4:	str.w	r4, [r1, ip, lsl #3]
    5bc8:	str.w	r4, [r8, #12]
    5bcc:	asrs	r3, r0, #2
    5bce:	movs	r4, #1
    5bd0:	lsls	r4, r3
    5bd2:	cmp	r4, r2
    5bd4:	bhi.w	5cec <_malloc_r+0x1f0>
    5bd8:	tst	r4, r2
    5bda:	bne.n	5bea <_malloc_r+0xee>
    5bdc:	bic.w	r0, r0, #3
    5be0:	lsls	r4, r4, #1
    5be2:	tst	r4, r2
    5be4:	add.w	r0, r0, #4
    5be8:	beq.n	5be0 <_malloc_r+0xe4>
    5bea:	add.w	r9, r7, r0, lsl #3
    5bee:	mov	ip, r9
    5bf0:	mov	r8, r0
    5bf2:	ldr.w	r1, [ip, #12]
    5bf6:	cmp	ip, r1
    5bf8:	bne.n	5c0a <_malloc_r+0x10e>
    5bfa:	b.n	5ee4 <_malloc_r+0x3e8>
    5bfc:	cmp	r2, #0
    5bfe:	bge.w	5f04 <_malloc_r+0x408>
    5c02:	ldr	r1, [r1, #12]
    5c04:	cmp	ip, r1
    5c06:	beq.w	5ee4 <_malloc_r+0x3e8>
    5c0a:	ldr	r3, [r1, #4]
    5c0c:	bic.w	r3, r3, #3
    5c10:	subs	r2, r3, r5
    5c12:	cmp	r2, #15
    5c14:	ble.n	5bfc <_malloc_r+0x100>
    5c16:	mov	r4, r1
    5c18:	ldr.w	ip, [r1, #12]
    5c1c:	ldr.w	r8, [r4, #8]!
    5c20:	adds	r3, r1, r5
    5c22:	orr.w	r5, r5, #1
    5c26:	str	r5, [r1, #4]
    5c28:	orr.w	r1, r2, #1
    5c2c:	str.w	ip, [r8, #12]
    5c30:	mov	r0, r6
    5c32:	str.w	r8, [ip, #8]
    5c36:	str	r3, [r7, #20]
    5c38:	str	r3, [r7, #16]
    5c3a:	str.w	lr, [r3, #12]
    5c3e:	str.w	lr, [r3, #8]
    5c42:	str	r1, [r3, #4]
    5c44:	str	r2, [r3, r2]
    5c46:	bl	610c <__malloc_unlock>
    5c4a:	b.n	5c8c <_malloc_r+0x190>
    5c4c:	cmp	r1, #16
    5c4e:	bhi.n	5c94 <_malloc_r+0x198>
    5c50:	bl	6108 <__malloc_lock>
    5c54:	movs	r5, #16
    5c56:	movs	r3, #6
    5c58:	movs	r0, #2
    5c5a:	ldr	r7, [pc, #504]	; (5e54 <_malloc_r+0x358>)
    5c5c:	add.w	r3, r7, r3, lsl #2
    5c60:	sub.w	r2, r3, #8
    5c64:	ldr	r4, [r3, #4]
    5c66:	cmp	r4, r2
    5c68:	beq.w	5ef6 <_malloc_r+0x3fa>
    5c6c:	ldr	r3, [r4, #4]
    5c6e:	ldr	r1, [r4, #12]
    5c70:	ldr	r5, [r4, #8]
    5c72:	bic.w	r3, r3, #3
    5c76:	add	r3, r4
    5c78:	mov	r0, r6
    5c7a:	ldr	r2, [r3, #4]
    5c7c:	str	r1, [r5, #12]
    5c7e:	orr.w	r2, r2, #1
    5c82:	str	r5, [r1, #8]
    5c84:	str	r2, [r3, #4]
    5c86:	bl	610c <__malloc_unlock>
    5c8a:	adds	r4, #8
    5c8c:	mov	r0, r4
    5c8e:	add	sp, #12
    5c90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c94:	movs	r4, #0
    5c96:	movs	r3, #12
    5c98:	mov	r0, r4
    5c9a:	str	r3, [r6, #0]
    5c9c:	add	sp, #12
    5c9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ca2:	movs	r3, #128	; 0x80
    5ca4:	mov.w	lr, #64	; 0x40
    5ca8:	movs	r0, #63	; 0x3f
    5caa:	b.n	5b40 <_malloc_r+0x44>
    5cac:	mov	r0, lr
    5cae:	b.n	5b6c <_malloc_r+0x70>
    5cb0:	add	r3, r4
    5cb2:	ldr	r1, [r4, #12]
    5cb4:	ldr	r2, [r3, #4]
    5cb6:	ldr	r5, [r4, #8]
    5cb8:	orr.w	r2, r2, #1
    5cbc:	str	r1, [r5, #12]
    5cbe:	mov	r0, r6
    5cc0:	str	r5, [r1, #8]
    5cc2:	str	r2, [r3, #4]
    5cc4:	bl	610c <__malloc_unlock>
    5cc8:	adds	r4, #8
    5cca:	mov	r0, r4
    5ccc:	add	sp, #12
    5cce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cd2:	add	r3, r4
    5cd4:	mov	r0, r6
    5cd6:	ldr	r2, [r3, #4]
    5cd8:	orr.w	r2, r2, #1
    5cdc:	str	r2, [r3, #4]
    5cde:	bl	610c <__malloc_unlock>
    5ce2:	adds	r4, #8
    5ce4:	mov	r0, r4
    5ce6:	add	sp, #12
    5ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cec:	ldr	r4, [r7, #8]
    5cee:	ldr	r3, [r4, #4]
    5cf0:	bic.w	r8, r3, #3
    5cf4:	cmp	r8, r5
    5cf6:	bcc.n	5d02 <_malloc_r+0x206>
    5cf8:	rsb	r3, r5, r8
    5cfc:	cmp	r3, #15
    5cfe:	bgt.w	5e1a <_malloc_r+0x31e>
    5d02:	ldr	r3, [pc, #340]	; (5e58 <_malloc_r+0x35c>)
    5d04:	ldr.w	r9, [pc, #352]	; 5e68 <_malloc_r+0x36c>
    5d08:	ldr	r2, [r3, #0]
    5d0a:	ldr.w	r3, [r9]
    5d0e:	adds	r3, #1
    5d10:	add	r2, r5
    5d12:	add.w	sl, r4, r8
    5d16:	beq.w	5fda <_malloc_r+0x4de>
    5d1a:	add.w	r2, r2, #4096	; 0x1000
    5d1e:	adds	r2, #15
    5d20:	bic.w	r2, r2, #4080	; 0xff0
    5d24:	bic.w	r2, r2, #15
    5d28:	mov	r1, r2
    5d2a:	mov	r0, r6
    5d2c:	str	r2, [sp, #4]
    5d2e:	bl	6110 <_sbrk_r>
    5d32:	cmp.w	r0, #4294967295
    5d36:	mov	fp, r0
    5d38:	ldr	r2, [sp, #4]
    5d3a:	beq.w	5fee <_malloc_r+0x4f2>
    5d3e:	cmp	sl, r0
    5d40:	bhi.w	5f3c <_malloc_r+0x440>
    5d44:	ldr	r3, [pc, #276]	; (5e5c <_malloc_r+0x360>)
    5d46:	ldr	r1, [r3, #0]
    5d48:	cmp	sl, fp
    5d4a:	add	r1, r2
    5d4c:	str	r1, [r3, #0]
    5d4e:	beq.w	5ff8 <_malloc_r+0x4fc>
    5d52:	ldr.w	r0, [r9]
    5d56:	ldr.w	lr, [pc, #272]	; 5e68 <_malloc_r+0x36c>
    5d5a:	adds	r0, #1
    5d5c:	ittet	ne
    5d5e:	rsbne	sl, sl, fp
    5d62:	addne	r1, sl
    5d64:	streq.w	fp, [lr]
    5d68:	strne	r1, [r3, #0]
    5d6a:	ands.w	r1, fp, #7
    5d6e:	beq.w	5fa0 <_malloc_r+0x4a4>
    5d72:	rsb	r0, r1, #8
    5d76:	rsb	r1, r1, #4096	; 0x1000
    5d7a:	add	fp, r0
    5d7c:	adds	r1, #8
    5d7e:	add	r2, fp
    5d80:	ubfx	r2, r2, #0, #12
    5d84:	rsb	r9, r2, r1
    5d88:	mov	r1, r9
    5d8a:	mov	r0, r6
    5d8c:	str	r3, [sp, #4]
    5d8e:	bl	6110 <_sbrk_r>
    5d92:	adds	r3, r0, #1
    5d94:	ldr	r3, [sp, #4]
    5d96:	beq.w	6018 <_malloc_r+0x51c>
    5d9a:	rsb	r2, fp, r0
    5d9e:	add	r2, r9
    5da0:	orr.w	r2, r2, #1
    5da4:	ldr	r1, [r3, #0]
    5da6:	str.w	fp, [r7, #8]
    5daa:	add	r1, r9
    5dac:	cmp	r4, r7
    5dae:	str.w	r2, [fp, #4]
    5db2:	str	r1, [r3, #0]
    5db4:	ldr.w	r9, [pc, #164]	; 5e5c <_malloc_r+0x360>
    5db8:	beq.n	5de8 <_malloc_r+0x2ec>
    5dba:	cmp.w	r8, #15
    5dbe:	bls.w	5fbc <_malloc_r+0x4c0>
    5dc2:	ldr	r2, [r4, #4]
    5dc4:	sub.w	r3, r8, #12
    5dc8:	bic.w	r3, r3, #7
    5dcc:	adds	r0, r4, r3
    5dce:	and.w	r2, r2, #1
    5dd2:	mov.w	lr, #5
    5dd6:	orrs	r2, r3
    5dd8:	cmp	r3, #15
    5dda:	str	r2, [r4, #4]
    5ddc:	str.w	lr, [r0, #4]
    5de0:	str.w	lr, [r0, #8]
    5de4:	bhi.w	6020 <_malloc_r+0x524>
    5de8:	ldr	r3, [pc, #116]	; (5e60 <_malloc_r+0x364>)
    5dea:	ldr	r4, [r7, #8]
    5dec:	ldr	r2, [r3, #0]
    5dee:	cmp	r1, r2
    5df0:	it	hi
    5df2:	strhi	r1, [r3, #0]
    5df4:	ldr	r3, [pc, #108]	; (5e64 <_malloc_r+0x368>)
    5df6:	ldr	r2, [r3, #0]
    5df8:	cmp	r1, r2
    5dfa:	ldr	r2, [r4, #4]
    5dfc:	it	hi
    5dfe:	strhi	r1, [r3, #0]
    5e00:	bic.w	r2, r2, #3
    5e04:	cmp	r5, r2
    5e06:	sub.w	r3, r2, r5
    5e0a:	bhi.n	5e10 <_malloc_r+0x314>
    5e0c:	cmp	r3, #15
    5e0e:	bgt.n	5e1a <_malloc_r+0x31e>
    5e10:	mov	r0, r6
    5e12:	bl	610c <__malloc_unlock>
    5e16:	movs	r4, #0
    5e18:	b.n	5c8c <_malloc_r+0x190>
    5e1a:	adds	r2, r4, r5
    5e1c:	orr.w	r3, r3, #1
    5e20:	orr.w	r5, r5, #1
    5e24:	str	r5, [r4, #4]
    5e26:	mov	r0, r6
    5e28:	str	r2, [r7, #8]
    5e2a:	str	r3, [r2, #4]
    5e2c:	bl	610c <__malloc_unlock>
    5e30:	adds	r4, #8
    5e32:	mov	r0, r4
    5e34:	add	sp, #12
    5e36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e3a:	cmp	r3, #20
    5e3c:	bls.n	5f22 <_malloc_r+0x426>
    5e3e:	cmp	r3, #84	; 0x54
    5e40:	bhi.w	5f8c <_malloc_r+0x490>
    5e44:	lsrs	r0, r5, #12
    5e46:	add.w	lr, r0, #111	; 0x6f
    5e4a:	mov.w	r3, lr, lsl #1
    5e4e:	adds	r0, #110	; 0x6e
    5e50:	b.n	5b40 <_malloc_r+0x44>
    5e52:	nop
    5e54:	.word	0x1fffb48c
    5e58:	.word	0x1fffd290
    5e5c:	.word	0x1fffd294
    5e60:	.word	0x1fffd28c
    5e64:	.word	0x1fffd288
    5e68:	.word	0x1fffb898
    5e6c:	lsrs	r2, r3, #9
    5e6e:	cmp	r2, #4
    5e70:	bls.n	5f30 <_malloc_r+0x434>
    5e72:	cmp	r2, #20
    5e74:	bhi.w	5fde <_malloc_r+0x4e2>
    5e78:	add.w	r1, r2, #92	; 0x5c
    5e7c:	lsls	r1, r1, #1
    5e7e:	adds	r2, #91	; 0x5b
    5e80:	add.w	ip, r7, r1, lsl #2
    5e84:	ldr.w	r1, [r7, r1, lsl #2]
    5e88:	ldr.w	r8, [pc, #476]	; 6068 <_malloc_r+0x56c>
    5e8c:	sub.w	ip, ip, #8
    5e90:	cmp	ip, r1
    5e92:	beq.w	5fa6 <_malloc_r+0x4aa>
    5e96:	ldr	r2, [r1, #4]
    5e98:	bic.w	r2, r2, #3
    5e9c:	cmp	r3, r2
    5e9e:	bcs.n	5ea6 <_malloc_r+0x3aa>
    5ea0:	ldr	r1, [r1, #8]
    5ea2:	cmp	ip, r1
    5ea4:	bne.n	5e96 <_malloc_r+0x39a>
    5ea6:	ldr.w	ip, [r1, #12]
    5eaa:	ldr	r2, [r7, #4]
    5eac:	str.w	ip, [r4, #12]
    5eb0:	str	r1, [r4, #8]
    5eb2:	str.w	r4, [ip, #8]
    5eb6:	str	r4, [r1, #12]
    5eb8:	b.n	5bcc <_malloc_r+0xd0>
    5eba:	adds	r3, r4, r5
    5ebc:	orr.w	r7, r2, #1
    5ec0:	orr.w	r5, r5, #1
    5ec4:	str	r5, [r4, #4]
    5ec6:	mov	r0, r6
    5ec8:	str	r3, [r1, #20]
    5eca:	str	r3, [r1, #16]
    5ecc:	str.w	lr, [r3, #12]
    5ed0:	str.w	lr, [r3, #8]
    5ed4:	str	r7, [r3, #4]
    5ed6:	str	r2, [r3, r2]
    5ed8:	adds	r4, #8
    5eda:	bl	610c <__malloc_unlock>
    5ede:	b.n	5c8c <_malloc_r+0x190>
    5ee0:	ldr	r2, [r1, #4]
    5ee2:	b.n	5bcc <_malloc_r+0xd0>
    5ee4:	add.w	r8, r8, #1
    5ee8:	tst.w	r8, #3
    5eec:	add.w	ip, ip, #8
    5ef0:	bne.w	5bf2 <_malloc_r+0xf6>
    5ef4:	b.n	5f58 <_malloc_r+0x45c>
    5ef6:	ldr	r4, [r3, #12]
    5ef8:	cmp	r3, r4
    5efa:	it	eq
    5efc:	addeq	r0, #2
    5efe:	beq.w	5b6c <_malloc_r+0x70>
    5f02:	b.n	5c6c <_malloc_r+0x170>
    5f04:	add	r3, r1
    5f06:	mov	r4, r1
    5f08:	ldr	r2, [r3, #4]
    5f0a:	ldr	r1, [r1, #12]
    5f0c:	ldr.w	r5, [r4, #8]!
    5f10:	orr.w	r2, r2, #1
    5f14:	str	r2, [r3, #4]
    5f16:	mov	r0, r6
    5f18:	str	r1, [r5, #12]
    5f1a:	str	r5, [r1, #8]
    5f1c:	bl	610c <__malloc_unlock>
    5f20:	b.n	5c8c <_malloc_r+0x190>
    5f22:	add.w	lr, r3, #92	; 0x5c
    5f26:	add.w	r0, r3, #91	; 0x5b
    5f2a:	mov.w	r3, lr, lsl #1
    5f2e:	b.n	5b40 <_malloc_r+0x44>
    5f30:	lsrs	r2, r3, #6
    5f32:	add.w	r1, r2, #57	; 0x39
    5f36:	lsls	r1, r1, #1
    5f38:	adds	r2, #56	; 0x38
    5f3a:	b.n	5e80 <_malloc_r+0x384>
    5f3c:	cmp	r4, r7
    5f3e:	ldr	r3, [pc, #296]	; (6068 <_malloc_r+0x56c>)
    5f40:	beq.w	5d44 <_malloc_r+0x248>
    5f44:	ldr	r4, [r3, #8]
    5f46:	ldr	r2, [r4, #4]
    5f48:	bic.w	r2, r2, #3
    5f4c:	b.n	5e04 <_malloc_r+0x308>
    5f4e:	ldr.w	r3, [r9], #-8
    5f52:	cmp	r9, r3
    5f54:	bne.w	605c <_malloc_r+0x560>
    5f58:	tst.w	r0, #3
    5f5c:	add.w	r0, r0, #4294967295
    5f60:	bne.n	5f4e <_malloc_r+0x452>
    5f62:	ldr	r3, [r7, #4]
    5f64:	bic.w	r3, r3, r4
    5f68:	str	r3, [r7, #4]
    5f6a:	lsls	r4, r4, #1
    5f6c:	cmp	r4, r3
    5f6e:	bhi.w	5cec <_malloc_r+0x1f0>
    5f72:	cmp	r4, #0
    5f74:	beq.w	5cec <_malloc_r+0x1f0>
    5f78:	tst	r4, r3
    5f7a:	mov	r0, r8
    5f7c:	bne.w	5bea <_malloc_r+0xee>
    5f80:	lsls	r4, r4, #1
    5f82:	tst	r4, r3
    5f84:	add.w	r0, r0, #4
    5f88:	beq.n	5f80 <_malloc_r+0x484>
    5f8a:	b.n	5bea <_malloc_r+0xee>
    5f8c:	cmp.w	r3, #340	; 0x154
    5f90:	bhi.n	5fc4 <_malloc_r+0x4c8>
    5f92:	lsrs	r0, r5, #15
    5f94:	add.w	lr, r0, #120	; 0x78
    5f98:	mov.w	r3, lr, lsl #1
    5f9c:	adds	r0, #119	; 0x77
    5f9e:	b.n	5b40 <_malloc_r+0x44>
    5fa0:	mov.w	r1, #4096	; 0x1000
    5fa4:	b.n	5d7e <_malloc_r+0x282>
    5fa6:	movs	r1, #1
    5fa8:	ldr.w	r3, [r8, #4]
    5fac:	asrs	r2, r2, #2
    5fae:	lsl.w	r2, r1, r2
    5fb2:	orrs	r2, r3
    5fb4:	str.w	r2, [r8, #4]
    5fb8:	mov	r1, ip
    5fba:	b.n	5eac <_malloc_r+0x3b0>
    5fbc:	movs	r3, #1
    5fbe:	str.w	r3, [fp, #4]
    5fc2:	b.n	5e10 <_malloc_r+0x314>
    5fc4:	movw	r2, #1364	; 0x554
    5fc8:	cmp	r3, r2
    5fca:	bhi.n	600e <_malloc_r+0x512>
    5fcc:	lsrs	r0, r5, #18
    5fce:	add.w	lr, r0, #125	; 0x7d
    5fd2:	mov.w	r3, lr, lsl #1
    5fd6:	adds	r0, #124	; 0x7c
    5fd8:	b.n	5b40 <_malloc_r+0x44>
    5fda:	adds	r2, #16
    5fdc:	b.n	5d28 <_malloc_r+0x22c>
    5fde:	cmp	r2, #84	; 0x54
    5fe0:	bhi.n	6030 <_malloc_r+0x534>
    5fe2:	lsrs	r2, r3, #12
    5fe4:	add.w	r1, r2, #111	; 0x6f
    5fe8:	lsls	r1, r1, #1
    5fea:	adds	r2, #110	; 0x6e
    5fec:	b.n	5e80 <_malloc_r+0x384>
    5fee:	ldr	r4, [r7, #8]
    5ff0:	ldr	r2, [r4, #4]
    5ff2:	bic.w	r2, r2, #3
    5ff6:	b.n	5e04 <_malloc_r+0x308>
    5ff8:	ubfx	r0, sl, #0, #12
    5ffc:	cmp	r0, #0
    5ffe:	bne.w	5d52 <_malloc_r+0x256>
    6002:	add	r2, r8
    6004:	ldr	r3, [r7, #8]
    6006:	orr.w	r2, r2, #1
    600a:	str	r2, [r3, #4]
    600c:	b.n	5de8 <_malloc_r+0x2ec>
    600e:	movs	r3, #254	; 0xfe
    6010:	mov.w	lr, #127	; 0x7f
    6014:	movs	r0, #126	; 0x7e
    6016:	b.n	5b40 <_malloc_r+0x44>
    6018:	movs	r2, #1
    601a:	mov.w	r9, #0
    601e:	b.n	5da4 <_malloc_r+0x2a8>
    6020:	add.w	r1, r4, #8
    6024:	mov	r0, r6
    6026:	bl	62bc <_free_r>
    602a:	ldr.w	r1, [r9]
    602e:	b.n	5de8 <_malloc_r+0x2ec>
    6030:	cmp.w	r2, #340	; 0x154
    6034:	bhi.n	6042 <_malloc_r+0x546>
    6036:	lsrs	r2, r3, #15
    6038:	add.w	r1, r2, #120	; 0x78
    603c:	lsls	r1, r1, #1
    603e:	adds	r2, #119	; 0x77
    6040:	b.n	5e80 <_malloc_r+0x384>
    6042:	movw	r1, #1364	; 0x554
    6046:	cmp	r2, r1
    6048:	bhi.n	6056 <_malloc_r+0x55a>
    604a:	lsrs	r2, r3, #18
    604c:	add.w	r1, r2, #125	; 0x7d
    6050:	lsls	r1, r1, #1
    6052:	adds	r2, #124	; 0x7c
    6054:	b.n	5e80 <_malloc_r+0x384>
    6056:	movs	r1, #254	; 0xfe
    6058:	movs	r2, #126	; 0x7e
    605a:	b.n	5e80 <_malloc_r+0x384>
    605c:	ldr	r3, [r7, #4]
    605e:	b.n	5f6a <_malloc_r+0x46e>
    6060:	lsrs	r0, r5, #3
    6062:	adds	r3, r0, #1
    6064:	lsls	r3, r3, #1
    6066:	b.n	5c5a <_malloc_r+0x15e>
    6068:	.word	0x1fffb48c

0000606c <memset>:
    606c:	push	{r4, r5, r6}
    606e:	lsls	r4, r0, #30
    6070:	beq.n	6100 <memset+0x94>
    6072:	subs	r4, r2, #1
    6074:	cmp	r2, #0
    6076:	beq.n	60fc <memset+0x90>
    6078:	uxtb	r5, r1
    607a:	mov	r3, r0
    607c:	b.n	6084 <memset+0x18>
    607e:	subs	r2, r4, #1
    6080:	cbz	r4, 60fc <memset+0x90>
    6082:	mov	r4, r2
    6084:	strb.w	r5, [r3], #1
    6088:	lsls	r2, r3, #30
    608a:	bne.n	607e <memset+0x12>
    608c:	cmp	r4, #3
    608e:	bls.n	60ee <memset+0x82>
    6090:	uxtb	r5, r1
    6092:	orr.w	r5, r5, r5, lsl #8
    6096:	cmp	r4, #15
    6098:	orr.w	r5, r5, r5, lsl #16
    609c:	bls.n	60d2 <memset+0x66>
    609e:	add.w	r2, r3, #16
    60a2:	mov	r6, r4
    60a4:	subs	r6, #16
    60a6:	cmp	r6, #15
    60a8:	str.w	r5, [r2, #-16]
    60ac:	str.w	r5, [r2, #-12]
    60b0:	str.w	r5, [r2, #-8]
    60b4:	str.w	r5, [r2, #-4]
    60b8:	add.w	r2, r2, #16
    60bc:	bhi.n	60a4 <memset+0x38>
    60be:	sub.w	r2, r4, #16
    60c2:	bic.w	r2, r2, #15
    60c6:	and.w	r4, r4, #15
    60ca:	adds	r2, #16
    60cc:	cmp	r4, #3
    60ce:	add	r3, r2
    60d0:	bls.n	60ee <memset+0x82>
    60d2:	mov	r6, r3
    60d4:	mov	r2, r4
    60d6:	subs	r2, #4
    60d8:	cmp	r2, #3
    60da:	str.w	r5, [r6], #4
    60de:	bhi.n	60d6 <memset+0x6a>
    60e0:	subs	r2, r4, #4
    60e2:	bic.w	r2, r2, #3
    60e6:	adds	r2, #4
    60e8:	add	r3, r2
    60ea:	and.w	r4, r4, #3
    60ee:	cbz	r4, 60fc <memset+0x90>
    60f0:	uxtb	r1, r1
    60f2:	add	r4, r3
    60f4:	strb.w	r1, [r3], #1
    60f8:	cmp	r3, r4
    60fa:	bne.n	60f4 <memset+0x88>
    60fc:	pop	{r4, r5, r6}
    60fe:	bx	lr
    6100:	mov	r4, r2
    6102:	mov	r3, r0
    6104:	b.n	608c <memset+0x20>
    6106:	nop

00006108 <__malloc_lock>:
    6108:	bx	lr
    610a:	nop

0000610c <__malloc_unlock>:
    610c:	bx	lr
    610e:	nop

00006110 <_sbrk_r>:
    6110:	push	{r3, r4, r5, lr}
    6112:	ldr	r4, [pc, #28]	; (6130 <_sbrk_r+0x20>)
    6114:	movs	r3, #0
    6116:	mov	r5, r0
    6118:	mov	r0, r1
    611a:	str	r3, [r4, #0]
    611c:	bl	3984 <_sbrk>
    6120:	adds	r3, r0, #1
    6122:	beq.n	6126 <_sbrk_r+0x16>
    6124:	pop	{r3, r4, r5, pc}
    6126:	ldr	r3, [r4, #0]
    6128:	cmp	r3, #0
    612a:	beq.n	6124 <_sbrk_r+0x14>
    612c:	str	r3, [r5, #0]
    612e:	pop	{r3, r4, r5, pc}
    6130:	.word	0x1fffd2d0

00006134 <__register_exitproc>:
    6134:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6138:	ldr	r4, [pc, #148]	; (61d0 <__register_exitproc+0x9c>)
    613a:	ldr	r5, [r4, #0]
    613c:	ldr.w	r4, [r5, #328]	; 0x148
    6140:	mov	r6, r0
    6142:	mov	r8, r1
    6144:	mov	sl, r2
    6146:	mov	r9, r3
    6148:	cbz	r4, 61bc <__register_exitproc+0x88>
    614a:	ldr	r0, [r4, #4]
    614c:	cmp	r0, #31
    614e:	bgt.n	6180 <__register_exitproc+0x4c>
    6150:	adds	r3, r0, #1
    6152:	cbz	r6, 6172 <__register_exitproc+0x3e>
    6154:	add.w	r5, r4, r0, lsl #2
    6158:	movs	r2, #1
    615a:	str.w	sl, [r5, #136]	; 0x88
    615e:	ldr.w	r1, [r4, #392]	; 0x188
    6162:	lsls	r2, r0
    6164:	orrs	r1, r2
    6166:	cmp	r6, #2
    6168:	str.w	r1, [r4, #392]	; 0x188
    616c:	str.w	r9, [r5, #264]	; 0x108
    6170:	beq.n	61b0 <__register_exitproc+0x7c>
    6172:	adds	r0, #2
    6174:	str	r3, [r4, #4]
    6176:	str.w	r8, [r4, r0, lsl #2]
    617a:	movs	r0, #0
    617c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6180:	ldr	r3, [pc, #80]	; (61d4 <__register_exitproc+0xa0>)
    6182:	cbz	r3, 61c6 <__register_exitproc+0x92>
    6184:	mov.w	r0, #400	; 0x190
    6188:	bl	5aec <malloc>
    618c:	mov	r4, r0
    618e:	cbz	r0, 61c6 <__register_exitproc+0x92>
    6190:	ldr.w	r3, [r5, #328]	; 0x148
    6194:	movs	r7, #0
    6196:	stmia.w	r0, {r3, r7}
    619a:	str.w	r4, [r5, #328]	; 0x148
    619e:	mov	r0, r7
    61a0:	movs	r3, #1
    61a2:	str.w	r7, [r4, #392]	; 0x188
    61a6:	str.w	r7, [r4, #396]	; 0x18c
    61aa:	cmp	r6, #0
    61ac:	beq.n	6172 <__register_exitproc+0x3e>
    61ae:	b.n	6154 <__register_exitproc+0x20>
    61b0:	ldr.w	r1, [r4, #396]	; 0x18c
    61b4:	orrs	r2, r1
    61b6:	str.w	r2, [r4, #396]	; 0x18c
    61ba:	b.n	6172 <__register_exitproc+0x3e>
    61bc:	add.w	r4, r5, #332	; 0x14c
    61c0:	str.w	r4, [r5, #328]	; 0x148
    61c4:	b.n	614a <__register_exitproc+0x16>
    61c6:	mov.w	r0, #4294967295
    61ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61ce:	nop
    61d0:	.word	0x00006ae0
    61d4:	.word	0x00005aed

000061d8 <register_fini>:
    61d8:	ldr	r3, [pc, #8]	; (61e4 <register_fini+0xc>)
    61da:	cbz	r3, 61e2 <register_fini+0xa>
    61dc:	ldr	r0, [pc, #8]	; (61e8 <register_fini+0x10>)
    61de:	b.w	61ec <atexit>
    61e2:	bx	lr
    61e4:	.word	0x00000000
    61e8:	.word	0x000061f9

000061ec <atexit>:
    61ec:	movs	r3, #0
    61ee:	mov	r1, r0
    61f0:	mov	r2, r3
    61f2:	mov	r0, r3
    61f4:	b.w	6134 <__register_exitproc>

000061f8 <__libc_fini_array>:
    61f8:	push	{r3, r4, r5, lr}
    61fa:	ldr	r5, [pc, #28]	; (6218 <__libc_fini_array+0x20>)
    61fc:	ldr	r4, [pc, #28]	; (621c <__libc_fini_array+0x24>)
    61fe:	subs	r4, r5, r4
    6200:	asrs	r4, r4, #2
    6202:	beq.n	6210 <__libc_fini_array+0x18>
    6204:	subs	r4, #1
    6206:	ldr.w	r3, [r5, #-4]!
    620a:	blx	r3
    620c:	cmp	r4, #0
    620e:	bne.n	6204 <__libc_fini_array+0xc>
    6210:	ldmia.w	sp!, {r3, r4, r5, lr}
    6214:	b.w	6b40 <__init_array_end>
	...

00006220 <_malloc_trim_r>:
    6220:	push	{r3, r4, r5, r6, r7, lr}
    6222:	ldr	r7, [pc, #140]	; (62b0 <_malloc_trim_r+0x90>)
    6224:	mov	r4, r1
    6226:	mov	r6, r0
    6228:	bl	6108 <__malloc_lock>
    622c:	ldr	r3, [r7, #8]
    622e:	ldr	r5, [r3, #4]
    6230:	bic.w	r5, r5, #3
    6234:	subs	r1, r5, r4
    6236:	addw	r1, r1, #4079	; 0xfef
    623a:	bic.w	r1, r1, #4080	; 0xff0
    623e:	bic.w	r1, r1, #15
    6242:	sub.w	r4, r1, #4096	; 0x1000
    6246:	cmp.w	r4, #4096	; 0x1000
    624a:	blt.n	625c <_malloc_trim_r+0x3c>
    624c:	movs	r1, #0
    624e:	mov	r0, r6
    6250:	bl	6110 <_sbrk_r>
    6254:	ldr	r3, [r7, #8]
    6256:	add	r3, r5
    6258:	cmp	r0, r3
    625a:	beq.n	6266 <_malloc_trim_r+0x46>
    625c:	mov	r0, r6
    625e:	bl	610c <__malloc_unlock>
    6262:	movs	r0, #0
    6264:	pop	{r3, r4, r5, r6, r7, pc}
    6266:	negs	r1, r4
    6268:	mov	r0, r6
    626a:	bl	6110 <_sbrk_r>
    626e:	adds	r0, #1
    6270:	beq.n	628e <_malloc_trim_r+0x6e>
    6272:	ldr	r3, [pc, #64]	; (62b4 <_malloc_trim_r+0x94>)
    6274:	ldr	r2, [r7, #8]
    6276:	ldr	r1, [r3, #0]
    6278:	subs	r5, r5, r4
    627a:	orr.w	r5, r5, #1
    627e:	mov	r0, r6
    6280:	subs	r1, r1, r4
    6282:	str	r5, [r2, #4]
    6284:	str	r1, [r3, #0]
    6286:	bl	610c <__malloc_unlock>
    628a:	movs	r0, #1
    628c:	pop	{r3, r4, r5, r6, r7, pc}
    628e:	movs	r1, #0
    6290:	mov	r0, r6
    6292:	bl	6110 <_sbrk_r>
    6296:	ldr	r2, [r7, #8]
    6298:	subs	r3, r0, r2
    629a:	cmp	r3, #15
    629c:	ble.n	625c <_malloc_trim_r+0x3c>
    629e:	ldr	r4, [pc, #24]	; (62b8 <_malloc_trim_r+0x98>)
    62a0:	ldr	r1, [pc, #16]	; (62b4 <_malloc_trim_r+0x94>)
    62a2:	ldr	r4, [r4, #0]
    62a4:	orr.w	r3, r3, #1
    62a8:	subs	r0, r0, r4
    62aa:	str	r3, [r2, #4]
    62ac:	str	r0, [r1, #0]
    62ae:	b.n	625c <_malloc_trim_r+0x3c>
    62b0:	.word	0x1fffb48c
    62b4:	.word	0x1fffd294
    62b8:	.word	0x1fffb898

000062bc <_free_r>:
    62bc:	cmp	r1, #0
    62be:	beq.n	634c <_free_r+0x90>
    62c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62c4:	mov	r5, r1
    62c6:	mov	r8, r0
    62c8:	bl	6108 <__malloc_lock>
    62cc:	ldr.w	r7, [r5, #-4]
    62d0:	ldr	r1, [pc, #424]	; (647c <_free_r+0x1c0>)
    62d2:	bic.w	r3, r7, #1
    62d6:	sub.w	r4, r5, #8
    62da:	adds	r2, r4, r3
    62dc:	ldr	r6, [r1, #8]
    62de:	ldr	r0, [r2, #4]
    62e0:	cmp	r2, r6
    62e2:	bic.w	r0, r0, #3
    62e6:	beq.n	63ae <_free_r+0xf2>
    62e8:	lsls	r6, r7, #31
    62ea:	str	r0, [r2, #4]
    62ec:	bmi.n	6306 <_free_r+0x4a>
    62ee:	ldr.w	r7, [r5, #-8]
    62f2:	subs	r4, r4, r7
    62f4:	add.w	lr, r1, #8
    62f8:	ldr	r5, [r4, #8]
    62fa:	cmp	r5, lr
    62fc:	add	r3, r7
    62fe:	beq.n	63e0 <_free_r+0x124>
    6300:	ldr	r7, [r4, #12]
    6302:	str	r7, [r5, #12]
    6304:	str	r5, [r7, #8]
    6306:	adds	r5, r2, r0
    6308:	ldr	r5, [r5, #4]
    630a:	lsls	r5, r5, #31
    630c:	bpl.n	6394 <_free_r+0xd8>
    630e:	orr.w	r2, r3, #1
    6312:	str	r2, [r4, #4]
    6314:	str	r3, [r4, r3]
    6316:	cmp.w	r3, #512	; 0x200
    631a:	bcs.n	634e <_free_r+0x92>
    631c:	lsrs	r3, r3, #3
    631e:	adds	r2, r3, #1
    6320:	ldr	r5, [r1, #4]
    6322:	ldr.w	r7, [r1, r2, lsl #3]
    6326:	str	r7, [r4, #8]
    6328:	movs	r0, #1
    632a:	asrs	r3, r3, #2
    632c:	lsl.w	r3, r0, r3
    6330:	add.w	r0, r1, r2, lsl #3
    6334:	orrs	r5, r3
    6336:	subs	r0, #8
    6338:	str	r0, [r4, #12]
    633a:	str	r5, [r1, #4]
    633c:	str.w	r4, [r1, r2, lsl #3]
    6340:	str	r4, [r7, #12]
    6342:	mov	r0, r8
    6344:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6348:	b.w	610c <__malloc_unlock>
    634c:	bx	lr
    634e:	lsrs	r2, r3, #9
    6350:	cmp	r2, #4
    6352:	bhi.n	63fc <_free_r+0x140>
    6354:	lsrs	r2, r3, #6
    6356:	add.w	r7, r2, #57	; 0x39
    635a:	lsls	r7, r7, #1
    635c:	add.w	r5, r2, #56	; 0x38
    6360:	add.w	r0, r1, r7, lsl #2
    6364:	ldr.w	r2, [r1, r7, lsl #2]
    6368:	ldr	r1, [pc, #272]	; (647c <_free_r+0x1c0>)
    636a:	subs	r0, #8
    636c:	cmp	r0, r2
    636e:	beq.n	640c <_free_r+0x150>
    6370:	ldr	r1, [r2, #4]
    6372:	bic.w	r1, r1, #3
    6376:	cmp	r3, r1
    6378:	bcs.n	6380 <_free_r+0xc4>
    637a:	ldr	r2, [r2, #8]
    637c:	cmp	r0, r2
    637e:	bne.n	6370 <_free_r+0xb4>
    6380:	ldr	r0, [r2, #12]
    6382:	str	r0, [r4, #12]
    6384:	str	r2, [r4, #8]
    6386:	str	r4, [r0, #8]
    6388:	str	r4, [r2, #12]
    638a:	mov	r0, r8
    638c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6390:	b.w	610c <__malloc_unlock>
    6394:	ldr	r5, [r2, #8]
    6396:	ldr	r7, [pc, #232]	; (6480 <_free_r+0x1c4>)
    6398:	cmp	r5, r7
    639a:	add	r3, r0
    639c:	beq.n	641e <_free_r+0x162>
    639e:	ldr	r0, [r2, #12]
    63a0:	str	r0, [r5, #12]
    63a2:	orr.w	r2, r3, #1
    63a6:	str	r5, [r0, #8]
    63a8:	str	r2, [r4, #4]
    63aa:	str	r3, [r4, r3]
    63ac:	b.n	6316 <_free_r+0x5a>
    63ae:	lsls	r7, r7, #31
    63b0:	add	r3, r0
    63b2:	bmi.n	63c4 <_free_r+0x108>
    63b4:	ldr.w	r2, [r5, #-8]
    63b8:	subs	r4, r4, r2
    63ba:	add	r3, r2
    63bc:	ldr	r0, [r4, #8]
    63be:	ldr	r2, [r4, #12]
    63c0:	str	r2, [r0, #12]
    63c2:	str	r0, [r2, #8]
    63c4:	ldr	r2, [pc, #188]	; (6484 <_free_r+0x1c8>)
    63c6:	ldr	r2, [r2, #0]
    63c8:	orr.w	r0, r3, #1
    63cc:	cmp	r3, r2
    63ce:	str	r0, [r4, #4]
    63d0:	str	r4, [r1, #8]
    63d2:	bcc.n	6342 <_free_r+0x86>
    63d4:	ldr	r3, [pc, #176]	; (6488 <_free_r+0x1cc>)
    63d6:	mov	r0, r8
    63d8:	ldr	r1, [r3, #0]
    63da:	bl	6220 <_malloc_trim_r>
    63de:	b.n	6342 <_free_r+0x86>
    63e0:	adds	r1, r2, r0
    63e2:	ldr	r1, [r1, #4]
    63e4:	lsls	r1, r1, #31
    63e6:	bmi.n	6472 <_free_r+0x1b6>
    63e8:	ldr	r1, [r2, #8]
    63ea:	ldr	r2, [r2, #12]
    63ec:	str	r2, [r1, #12]
    63ee:	add	r3, r0
    63f0:	orr.w	r0, r3, #1
    63f4:	str	r1, [r2, #8]
    63f6:	str	r0, [r4, #4]
    63f8:	str	r3, [r4, r3]
    63fa:	b.n	6342 <_free_r+0x86>
    63fc:	cmp	r2, #20
    63fe:	bhi.n	6430 <_free_r+0x174>
    6400:	add.w	r7, r2, #92	; 0x5c
    6404:	lsls	r7, r7, #1
    6406:	add.w	r5, r2, #91	; 0x5b
    640a:	b.n	6360 <_free_r+0xa4>
    640c:	asrs	r2, r5, #2
    640e:	ldr	r3, [r1, #4]
    6410:	movs	r5, #1
    6412:	lsl.w	r2, r5, r2
    6416:	orrs	r3, r2
    6418:	str	r3, [r1, #4]
    641a:	mov	r2, r0
    641c:	b.n	6382 <_free_r+0xc6>
    641e:	orr.w	r2, r3, #1
    6422:	str	r4, [r1, #20]
    6424:	str	r4, [r1, #16]
    6426:	str	r5, [r4, #12]
    6428:	str	r5, [r4, #8]
    642a:	str	r2, [r4, #4]
    642c:	str	r3, [r4, r3]
    642e:	b.n	6342 <_free_r+0x86>
    6430:	cmp	r2, #84	; 0x54
    6432:	bhi.n	6442 <_free_r+0x186>
    6434:	lsrs	r2, r3, #12
    6436:	add.w	r7, r2, #111	; 0x6f
    643a:	lsls	r7, r7, #1
    643c:	add.w	r5, r2, #110	; 0x6e
    6440:	b.n	6360 <_free_r+0xa4>
    6442:	cmp.w	r2, #340	; 0x154
    6446:	bhi.n	6456 <_free_r+0x19a>
    6448:	lsrs	r2, r3, #15
    644a:	add.w	r7, r2, #120	; 0x78
    644e:	lsls	r7, r7, #1
    6450:	add.w	r5, r2, #119	; 0x77
    6454:	b.n	6360 <_free_r+0xa4>
    6456:	movw	r0, #1364	; 0x554
    645a:	cmp	r2, r0
    645c:	bhi.n	646c <_free_r+0x1b0>
    645e:	lsrs	r2, r3, #18
    6460:	add.w	r7, r2, #125	; 0x7d
    6464:	lsls	r7, r7, #1
    6466:	add.w	r5, r2, #124	; 0x7c
    646a:	b.n	6360 <_free_r+0xa4>
    646c:	movs	r7, #254	; 0xfe
    646e:	movs	r5, #126	; 0x7e
    6470:	b.n	6360 <_free_r+0xa4>
    6472:	orr.w	r2, r3, #1
    6476:	str	r2, [r4, #4]
    6478:	str	r3, [r4, r3]
    647a:	b.n	6342 <_free_r+0x86>
    647c:	.word	0x1fffb48c
    6480:	.word	0x1fffb494
    6484:	.word	0x1fffb894
    6488:	.word	0x1fffd290

0000648c <vtable for AudioStream>:
	...
    6494:	.9..HELLO...

000064a0 <vtable for AudioAnalyzePeak>:
	...
    64a8:	)...

000064ac <vtable for AudioMixer4>:
	...
    64b4:	i...

000064b8 <vtable for AudioEffectMultiply>:
	...
    64c0:	u...

000064c4 <vtable for AudioControlSGTL5000>:
	...
    64cc:	....)...)...-...
    64dc:	e...

000064e0 <vtable for AudioFilterStateVariable>:
	...
    64e8:	M...

000064ec <vtable for AudioSynthWaveformDc>:
	...
    64f4:	a...

000064f8 <vtable for AudioOutputI2S>:
	...
    6500:	....

00006504 <vtable for AudioSynthNoiseWhite>:
	...
    650c:	u...

00006510 <vtable for AudioEffectDelay>:
	...
    6518:	u...

0000651c <vtable for AudioSynthWaveform>:
	...
    6524:	9...

00006528 <TwoWire::i2c0_hardware>:
    6528:	4..@@.....".0...
    6538:	....!./.........

00006548 <TwoWire::i2c1_hardware>:
    6548:	4..@....&:......
    6558:	..%;............

00006568 <TwoWire::i2c2_hardware>:
    6568:	(..@@...........
    6578:	............J...

00006588 <vtable for TwoWire>:
	...
    6590:	. ..] ... ..Y ..
    65a0:	. ..! ..A ..

000065ac <SPIClass::spi0_hardware>:
    65ac:	<..@............
    65bc:	.....$....'.....
    65cc:	................
    65dc:	................
    65ec:	................
    65fc:	..........-.....
    660c:	................
    661c:	................
    662c:	................
    663c:	.. .

00006640 <vtable for SdFile>:
	...
    6648:	.+...O... ...%..

00006658 <AudioWaveformSine>:
    6658:	..$.H.j.........
    6668:	......#"(%&(.+..
    6678:	.0.3.6.9V<.?.AzD
    6688:	.G.I?L.N3Q.S.UBX
    6698:	.Z.\.^.`.b.d.f.h
    66a8:	mj#l.m^o.pTr.s.u
    66b8:	Avkw.x.y|z\{)|.|
    66c8:	.}.~.~..a.......
    66d8:	........a....~.~
    66e8:	.}.|)|\{|z.y.xkw
    66f8:	Av.u.sTr.p^o.m#l
    6708:	mj.h.f.d.b.`.^.\
    6718:	.ZBX.U.S3Q.N?L.I
    6728:	.GzD.A.?V<.9.6.3
    6738:	.0...+&((%#"....
    6748:	..........j.H.$.
    6758:	........t.U.8...
    6768:	................
    6778:	..!.F.t.....2...
    6788:	..L...A...e.....
    6798:	~.M.).......1.Z.
    67a8:	....7.......K...
    67b8:	....|.w.........
    67c8:	w...d.....Z.(...
    67d8:	....(.Z.....d...
    67e8:	w.........w.|...
    67f8:	....K.......7...
    6808:	..Z.1.......).M.
    6818:	~.....e...A...L.
    6828:	....2.....t.F.!.
    6838:	................
    6848:	....8.U.t.......
    6858:	....

0000685c <digital_pin_to_info_PGM>:
    685c:	@..C@..@D..CD..@
    686c:	...C...@0..C0..@
    687c:	4..C4..@...C...@
    688c:	...C...@...C...@
    689c:	...C...@...C...@
    68ac:	...C...@...C...@
    68bc:	...C...@...C...@
    68cc:	...C...@...C...@
    68dc:	...C...@...C...@
    68ec:	...C...@...C...@
    68fc:	...C...@...C...@
    690c:	...C...@...C...@
    691c:	h .Ch..@...C...@
    692c:	8..C8..@<..C<..@
    693c:	@..C@..@H..CH..@
    694c:	L..CL..@(..C(..@
    695c:	,..C,..@` .C`..@
    696c:	d .Cd..@ ..C ..@
    697c:	$..C$..@(..C(..@
    698c:	,..C,..@D..CD..@
    699c:	p..Cp..@t..Ct..@
    69ac:	h..Ch..@P..CP..@
    69bc:	X..CX..@\..C\..@
    69cc:	T..CT..@ ..C ..@
    69dc:	$..C$..@...C...@
    69ec:	...C...@8..C8..@
    69fc:	4..C4..@0..C0..@
    6a0c:	<..C<..@,..C,..@
    6a1c:	( .C(..@, .C,..@
    6a2c:	. .C...@. .C...@
    6a3c:	. .C...@. .C...@
    6a4c:	. .C...@. .C...@

00006a5c <vtable for usb_serial_class>:
	...
    6a64:	.O...N...N...N..
    6a74:	.N...N...N...N..
    6a84:	....

00006a88 <usb_endpoint_config_table>:
    6a88:	....

00006a8c <usb_descriptor_list>:
    6a8c:	................
    6a9c:	....C.......@...
    6aac:	................
    6abc:	....(...........
    6acc:	D...............
    6adc:	....

00006ae0 <_global_impure_ptr>:
    6ae0:	`...

00006ae4 <_init>:
    6ae4:	push	{r3, r4, r5, r6, r7, lr}
    6ae6:	nop
    6ae8:	pop	{r3, r4, r5, r6, r7}
    6aea:	pop	{r3}
    6aec:	mov	lr, r3
    6aee:	bx	lr

00006af0 <__init_array_start>:
    6af0:	.word	0x000061d9

00006af4 <__frame_dummy_init_array_entry>:
    6af4:	5...............
    6b04:	].......I...a...
    6b14:	........I.......
    6b24:	............]...
    6b34:	]....%...0..

Disassembly of section .fini:

00006b40 <_fini>:
    6b40:	push	{r3, r4, r5, r6, r7, lr}
    6b42:	nop
